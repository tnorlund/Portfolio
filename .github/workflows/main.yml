name: Main CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Stage 1: Fast checks (fail fast)
  fast-checks:
    name: Format & Lint Checks
    runs-on: [self-hosted, macOS, ARM64]
    permissions:
      contents: write
      pull-requests: read
    outputs:
      receipt_dynamo_changed: ${{ steps.changes.outputs.receipt_dynamo }}
      receipt_label_changed: ${{ steps.changes.outputs.receipt_label }}
      portfolio_changed: ${{ steps.changes.outputs.portfolio }}
      infra_changed: ${{ steps.changes.outputs.infra }}
      workflows_changed: ${{ steps.changes.outputs.workflows }}
      any_code_changed: ${{ steps.changes.outputs.all_code }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Need full history for change detection

      - name: Detect changed files
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            receipt_dynamo:
              - 'receipt_dynamo/**'
              - 'conftest.py'
              - 'pytest*.ini'
            receipt_label:
              - 'receipt_label/**'
              - 'conftest.py'
              - 'pytest*.ini'
            infra:
              - 'infra/**'
            portfolio:
              - 'portfolio/**'
            scripts:
              - 'scripts/**'
            workflows:
              - '.github/workflows/**'
            all_code:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'

      - name: Set up Python (GitHub-hosted)
        if: ${{ runner.os != 'macOS' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Use system Python (self-hosted)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Using Python 3.12 on self-hosted runner"
          # Prioritize Framework Python 3.12 to match workflow requirements
          if [ -f "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3" ]; then
            export PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin:$PATH"
            echo "/Library/Frameworks/Python.framework/Versions/3.12/bin" >> $GITHUB_PATH
          # Fall back to Homebrew Python (but check version)
          elif [ -f "/opt/homebrew/bin/python3" ]; then
            HOMEBREW_VERSION=$(/opt/homebrew/bin/python3 --version 2>&1 | grep -o "3\.[0-9]*")
            if [[ "$HOMEBREW_VERSION" == "3.12" ]]; then
              export PATH="/opt/homebrew/bin:$PATH"
              echo "/opt/homebrew/bin" >> $GITHUB_PATH
            else
              echo "Warning: Homebrew Python is $HOMEBREW_VERSION, but workflow requires 3.12"
              echo "Continuing with system Python"
            fi
          fi
          python3 --version
          which python3

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install minimal dependencies
        run: |
          python3 -m pip install black isort

      - name: Check Python formatting
        run: |
          # Check formatting but don't block (we have auto-format on PRs)
          echo "Checking Python formatting..."
          black --check --line-length=79 receipt_dynamo receipt_label infra || echo "::warning::Some files need black formatting"
          isort --check-only --profile=black --line-length=79 receipt_dynamo receipt_label infra || echo "::warning::Some imports need isort formatting"

      - name: Set up Node.js
        if: steps.changes.outputs.portfolio == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Check TypeScript/ESLint
        if: steps.changes.outputs.portfolio == 'true'
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run lint
          npm run type-check

  # Stage 2: Tests (parallel)
  test-python:
    name: Python Tests (${{ matrix.package }})
    needs: fast-checks
    runs-on: [self-hosted, macOS, ARM64]
    if: |
      needs.fast-checks.outputs.receipt_dynamo_changed == 'true' ||
      needs.fast-checks.outputs.receipt_label_changed == 'true' ||
      needs.fast-checks.outputs.workflows_changed == 'true' ||
      github.event_name == 'schedule'
    strategy:
      matrix:
        package: [receipt_dynamo, receipt_label]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (GitHub-hosted)
        if: ${{ runner.os != 'macOS' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Use system Python (self-hosted)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Using Python 3.12 on self-hosted runner"
          # Prioritize Framework Python 3.12 to match workflow requirements
          if [ -f "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3" ]; then
            export PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin:$PATH"
            echo "/Library/Frameworks/Python.framework/Versions/3.12/bin" >> $GITHUB_PATH
          # Fall back to Homebrew Python (but check version)
          elif [ -f "/opt/homebrew/bin/python3" ]; then
            HOMEBREW_VERSION=$(/opt/homebrew/bin/python3 --version 2>&1 | grep -o "3\.[0-9]*")
            if [[ "$HOMEBREW_VERSION" == "3.12" ]]; then
              export PATH="/opt/homebrew/bin:$PATH"
              echo "/opt/homebrew/bin" >> $GITHUB_PATH
            else
              echo "Warning: Homebrew Python is $HOMEBREW_VERSION, but workflow requires 3.12"
              echo "Continuing with system Python"
            fi
          fi
          python3 --version
          which python3

      - name: Cache pip packages only (not virtual environments)
        uses: actions/cache@v4  # Use latest cache action
        with:
          path: |
            ${{ runner.os == 'macOS' && '~/Library/Caches/pip' || '~/.cache/pip' }}
            **/__pycache__
          key: ${{ runner.os }}-pip-cache-py312-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-cache-py312-
            ${{ runner.os }}-pip-cache-

      - name: Cache pytest results and coverage
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.package }}/.pytest_cache
            ${{ matrix.package }}/.coverage
            .pytest_cache
          key: ${{ runner.os }}-pytest-${{ matrix.package }}-${{ hashFiles(format('{0}/**/*.py', matrix.package)) }}
          restore-keys: |
            ${{ runner.os }}-pytest-${{ matrix.package }}-

      - name: Setup virtual environment and install packages
        run: |
          # Create isolated virtual environment for this job to prevent collisions
          VENV_PATH=".venv-${{ matrix.package }}"
          echo "Creating virtual environment: $VENV_PATH"
          
          # Always create fresh virtual environment to ensure we test against PR code
          if [ -d "$VENV_PATH" ]; then
            echo "Removing existing virtual environment to ensure fresh dependencies..."
            rm -rf "$VENV_PATH"
          fi
          
          python3 -m venv "$VENV_PATH"
          source "$VENV_PATH/bin/activate"
          
          # Add venv to PATH for subsequent steps
          echo "$PWD/$VENV_PATH/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$PWD/$VENV_PATH" >> $GITHUB_ENV
          
          # Upgrade pip for faster installs
          python3 -m pip install --upgrade pip wheel --disable-pip-version-check

          # CRITICAL: Always install packages in editable mode to use PR's source code
          # Install receipt_dynamo first as it's a dependency for other packages
          if [[ "${{ matrix.package }}" != "receipt_dynamo" ]]; then
            echo "Installing receipt_dynamo dependency from PR source..."
            python3 -m pip install --force-reinstall -e "receipt_dynamo[test]" --disable-pip-version-check
          fi

          # Install the target package from PR source with all test dependencies
          if [[ "${{ matrix.package }}" == "receipt_trainer" ]] || [[ "${{ matrix.package }}" == "receipt_trainer_1" ]]; then
            echo "Installing ${{ matrix.package }} from PR source..."
            python3 -m pip install --force-reinstall -e "${{ matrix.package }}[dev]" --disable-pip-version-check
          else
            echo "Installing ${{ matrix.package }} from PR source..."
            python3 -m pip install --force-reinstall -e "${{ matrix.package }}[test]" --disable-pip-version-check
          fi

          # Verify we're using the correct source code
          echo "=== Virtual environment packages ==="
          python3 -m pip list | grep -E "(pinecone|openai|receipt|pytest|moto|boto)" | head -10 || true
          echo "Python location: $(which python3)"
          echo "Virtual environment: $VIRTUAL_ENV"
          
          # Show we're using editable installs from current directory
          echo "=== Verifying editable installs ==="
          python3 -m pip show receipt_dynamo 2>/dev/null | grep -E "(Location|Editable)" || echo "receipt_dynamo not found"
          if [[ "${{ matrix.package }}" != "receipt_dynamo" ]]; then
            python3 -m pip show ${{ matrix.package }} 2>/dev/null | grep -E "(Location|Editable)" || echo "${{ matrix.package }} not found"
          fi

      - name: Run tests (all types unified)
        if: |
          (matrix.package == 'receipt_dynamo' && needs.fast-checks.outputs.receipt_dynamo_changed == 'true') ||
          (matrix.package == 'receipt_label' && needs.fast-checks.outputs.receipt_label_changed == 'true') ||
          needs.fast-checks.outputs.workflows_changed == 'true' ||
          github.event_name == 'schedule'
        env:
          SKIP_PERFORMANCE_TESTS: "true"
        run: |
          echo "🚀 Running unified test suite for ${{ matrix.package }} with -n auto parallelization"
          
          # Run all tests together with optimal parallelization
          cd ${{ matrix.package }}
          
          if [[ "${{ matrix.package }}" == "receipt_label" ]]; then
            # receipt_label: Run unit tests first (fast feedback), then integration tests
            echo "🚀 Running receipt_label unit tests with optimized timeout..."
            python -m pytest tests \
              -n auto \
              --timeout=30 \
              --tb=short \
              --maxfail=5 \
              --durations=10 \
              -m "unit and not end_to_end and not slow and not performance" \
              --cov \
              --cov-report=term-missing \
              --cov-report=xml
            
            echo "🚀 Running receipt_label integration tests with extended timeout..."
            python -m pytest tests \
              -n auto \
              --timeout=300 \
              --tb=short \
              --maxfail=3 \
              --durations=10 \
              -m "integration and not end_to_end and not slow and not performance" \
              --cov-append \
              --cov \
              --cov-report=term-missing \
              --cov-report=xml
          else
            # receipt_dynamo: Run unit tests first (fast feedback), then integration tests
            echo "🚀 Running receipt_dynamo unit tests with optimized timeout..."
            python -m pytest tests \
              -n auto \
              --timeout=30 \
              --tb=short \
              --maxfail=5 \
              --durations=10 \
              --dist=loadfile \
              -m "unit and not end_to_end and not slow and not performance" \
              --cov \
              --cov-report=term-missing \
              --cov-report=xml
            
            echo "🚀 Running receipt_dynamo integration tests with extended timeout..."
            python -m pytest tests \
              -n auto \
              --timeout=300 \
              --tb=short \
              --maxfail=3 \
              --durations=10 \
              --dist=loadfile \
              -m "integration and not end_to_end and not slow and not performance" \
              --cov-append \
              --cov \
              --cov-report=term-missing \
              --cov-report=xml
          fi

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: ${{ matrix.package }}/coverage.xml
          retention-days: 1

  test-typescript:
    name: TypeScript Tests
    needs: fast-checks
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Install and test
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run test:ci

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-portfolio
          path: portfolio/coverage
          retention-days: 1

  # Stage 3: Documentation (can run in parallel with tests)
  docs:
    name: Generate Documentation
    needs: fast-checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    continue-on-error: true  # Don't fail the whole workflow if docs fail
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Generate docs
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run docs

      - name: Commit documentation
        continue-on-error: true
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'docs: update TypeDoc documentation [skip ci]'
          file_pattern: 'portfolio/docs/**'
          skip_dirty_check: false
          skip_checkout: true

  # Stage 4: Deploy (only on main)
  deploy:
    name: Deploy with Pulumi
    needs: [fast-checks]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (GitHub-hosted)
        if: ${{ runner.os != 'macOS' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Use system Python (self-hosted)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Using Python 3.12 on self-hosted runner"
          # Prioritize Framework Python 3.12 to match workflow requirements
          if [ -f "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3" ]; then
            export PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin:$PATH"
            echo "/Library/Frameworks/Python.framework/Versions/3.12/bin" >> $GITHUB_PATH
          # Fall back to Homebrew Python (but check version)
          elif [ -f "/opt/homebrew/bin/python3" ]; then
            HOMEBREW_VERSION=$(/opt/homebrew/bin/python3 --version 2>&1 | grep -o "3\.[0-9]*")
            if [[ "$HOMEBREW_VERSION" == "3.12" ]]; then
              export PATH="/opt/homebrew/bin:$PATH"
              echo "/opt/homebrew/bin" >> $GITHUB_PATH
            else
              echo "Warning: Homebrew Python is $HOMEBREW_VERSION, but workflow requires 3.12"
              echo "Continuing with system Python"
            fi
          fi
          python3 --version
          which python3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Next.js app
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run build

      - name: Install Python dependencies
        run: |
          python3 -m pip install -r infra/requirements.txt

      - name: Deploy with Pulumi
        run: |
          cd infra
          pulumi stack select tnorlund/portfolio/prod
          pulumi up --yes
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Get Pulumi outputs
        id: pulumi-outputs
        run: |
          cd infra
          echo "bucket_name=$(pulumi stack output cdn_bucket_name)" >> $GITHUB_OUTPUT
          echo "distribution_id=$(pulumi stack output cdn_distribution_id)" >> $GITHUB_OUTPUT

      - name: Sync to S3
        run: |
          aws s3 sync portfolio/out s3://${{ steps.pulumi-outputs.outputs.bucket_name }} \
            --delete \
            --exclude "assets/*" \
            --cache-control "public, max-age=3600"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.pulumi-outputs.outputs.distribution_id }} \
            --paths "/*"

  # Stage 5: E2E tests (only after deploy)
  e2e-tests:
    name: End-to-End Tests
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (GitHub-hosted)
        if: ${{ runner.os != 'macOS' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Use system Python (self-hosted)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Using Python 3.12 on self-hosted runner"
          # Prioritize Framework Python 3.12 to match workflow requirements
          if [ -f "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3" ]; then
            export PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin:$PATH"
            echo "/Library/Frameworks/Python.framework/Versions/3.12/bin" >> $GITHUB_PATH
          # Fall back to Homebrew Python (but check version)
          elif [ -f "/opt/homebrew/bin/python3" ]; then
            HOMEBREW_VERSION=$(/opt/homebrew/bin/python3 --version 2>&1 | grep -o "3\.[0-9]*")
            if [[ "$HOMEBREW_VERSION" == "3.12" ]]; then
              export PATH="/opt/homebrew/bin:$PATH"
              echo "/opt/homebrew/bin" >> $GITHUB_PATH
            else
              echo "Warning: Homebrew Python is $HOMEBREW_VERSION, but workflow requires 3.12"
              echo "Continuing with system Python"
            fi
          fi
          python3 --version
          which python3

      - name: Install package
        run: |
          python3 -m pip install -e "receipt_dynamo[test]"

      - name: Run E2E tests
        working-directory: receipt_dynamo
        run: |
          pytest -m end_to_end --timeout=600 --tb=short
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # Summary job for branch protection
  ci-success:
    name: CI Success
    needs: [fast-checks, test-python, test-typescript]
    runs-on: [self-hosted, macOS, ARM64]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          # Check if any required jobs failed (not skipped)
          if [[ "${{ needs.fast-checks.result }}" == "failure" ||
                "${{ needs.fast-checks.result }}" == "cancelled" ||
                "${{ needs.test-python.result }}" == "failure" ||
                "${{ needs.test-python.result }}" == "cancelled" ||
                "${{ needs.test-typescript.result }}" == "failure" ||
                "${{ needs.test-typescript.result }}" == "cancelled" ]]; then
            echo "❌ One or more jobs failed or were cancelled"
            echo "fast-checks: ${{ needs.fast-checks.result }}"
            echo "test-python: ${{ needs.test-python.result }}"
            echo "test-typescript: ${{ needs.test-typescript.result }}"
            exit 1
          fi

          # Success includes both 'success' and 'skipped' states
          echo "✅ All CI checks passed!"
          echo "fast-checks: ${{ needs.fast-checks.result }}"
          echo "test-python: ${{ needs.test-python.result }}"
          echo "test-typescript: ${{ needs.test-typescript.result }}"
          
          echo ""
          echo "🤖 Claude Code Review available:"
          echo "   - Automatic reviews for PRs under 1000 lines"
          echo "   - Interactive help with @claude comments"
          echo "   - Focus on performance and architecture patterns"
          echo "   - See .github/CLAUDE.md for details"
