name: Pulumi
on:
  push:
    branches:
      - main
jobs:
  lint:
    name: Lint Python
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install package with all dependencies
        run: |
          pip install -e "${{ github.workspace }}/receipt_dynamo[test,dev]"

      - name: Run Black formatter check
        working-directory: receipt_dynamo
        run: |
          black --check .

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

  lint-portfolio:
    name: Lint TypeScript/Next.js
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "portfolio/package-lock.json"

      - name: Install dependencies
        working-directory: portfolio
        run: npm install

      - name: Run ESLint
        working-directory: portfolio
        run: npm run lint

      - name: Run TypeScript type check
        working-directory: portfolio
        run: npm run type-check

  test-portfolio:
    name: Test TypeScript/Next.js
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "portfolio/package-lock.json"

      - name: Install dependencies
        working-directory: portfolio
        run: npm install

      - name: Run Jest tests with coverage
        working-directory: portfolio
        run: npm run test:ci

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-portfolio
          path: portfolio/coverage
          if-no-files-found: warn
          retention-days: 1

  docs:
    name: Validate Documentation
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "portfolio/package-lock.json"

      - name: Install dependencies
        working-directory: portfolio
        run: npm install

      - name: Generate and validate documentation
        working-directory: portfolio
        run: npm run ci:docs

  test:
    name: Run ${{ matrix.test-type }} Tests
    needs: lint
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install package with all dependencies
        run: |
          pip install -e "${{ github.workspace }}/receipt_dynamo[test,dev]"

      - name: Run tests with coverage
        working-directory: receipt_dynamo
        run: |
          echo "Running tests for ${{ matrix.test-type }}"
          export COVERAGE_FILE="$PWD/.coverage.${{ matrix.test-type }}"
          python -m pytest -m ${{ matrix.test-type }} -n auto --cov=receipt_dynamo --cov-report=term

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-type }}
          path: receipt_dynamo/.coverage.${{ matrix.test-type }}
          if-no-files-found: error
          retention-days: 1
          include-hidden-files: true

  deploy:
    name: Build and Deploy
    needs: [test, lint-portfolio, test-portfolio, docs]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "portfolio/package-lock.json"

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install and build Next.js app
        working-directory: portfolio
        run: |
          npm install && npm run build

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install Pulumi Python dependencies
        run: |
          pip install -e "${{ github.workspace }}/infra[dev]"

      - name: Setup Pulumi
        uses: pulumi/setup-pulumi@v2

      - name: Configure Pulumi Stack
        working-directory: infra
        run: |
          pulumi stack select tnorlund/portfolio/prod
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Pulumi Deploy
        uses: pulumi/actions@v6
        with:
          command: up
          stack-name: tnorlund/portfolio/prod
          work-dir: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get Pulumi outputs
        id: pulumi-outputs
        working-directory: infra
        run: |
          BUCKET_NAME=$(pulumi stack output cdn_bucket_name --stack tnorlund/portfolio/prod)
          AWS_REGION_FROM_PULUMI=$(pulumi stack output region --stack tnorlund/portfolio/prod)
          DISTRIBUTION_ID=$(pulumi stack output cdn_distribution_id --stack tnorlund/portfolio/prod)

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "aws_region=$AWS_REGION_FROM_PULUMI" >> $GITHUB_OUTPUT
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Sync files to S3
        run: |
          aws s3 sync portfolio/out "s3://${{ steps.pulumi-outputs.outputs.bucket_name }}"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.pulumi-outputs.outputs.distribution_id }} \
            --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  end_to_end_test:
    name: Run end-to-end Tests
    needs: deploy
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install package with all dependencies
        run: |
          pip install -e "${{ github.workspace }}/receipt_dynamo[test,dev]"

      - name: Run end-to-end tests with coverage
        working-directory: receipt_dynamo
        run: |
          echo "Running end-to-end tests"
          export COVERAGE_FILE="$PWD/.coverage.end_to_end"
          python -m pytest -m end_to_end --cov=receipt_dynamo --cov-report=term
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload end-to-end test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-end_to_end
          path: receipt_dynamo/.coverage.end_to_end
          if-no-files-found: error
          retention-days: 1
          include-hidden-files: true

  coverage:
    name: Combine Test Coverage
    needs: [test, end_to_end_test]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install package with all dependencies
        run: |
          pip install -e "${{ github.workspace }}/receipt_dynamo[test,dev]"
          pip install coverage

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage-data
          merge-multiple: true

      - name: Debug coverage files
        run: |
          echo "Contents of coverage-data directory:"
          ls -la coverage-data/

      - name: Combine coverage
        working-directory: receipt_dynamo
        run: |
          # Create a directory for collecting all coverage files
          mkdir -p coverage-files

          # Find and copy all coverage files from various possible locations
          find ../coverage-data -name ".coverage*" -type f -exec cp {} coverage-files/ \;

          if [ "$(ls -A coverage-files 2>/dev/null)" ]; then
            echo "Copying coverage files to current directory..."
            cp coverage-files/.* . 2>/dev/null || true  # Use .* to copy hidden files
            echo "Running coverage combine..."
            coverage combine
            coverage report
            coverage xml
          else
            echo "No coverage files found to combine"
            echo "{}" > coverage.xml
          fi

      - name: Upload combined coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: receipt_dynamo/coverage.xml
          if-no-files-found: error
