name: Main CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Stage 1: Fast checks (fail fast)
  fast-checks:
    name: Format & Lint Checks
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install minimal dependencies
        run: |
          pip install black isort
      
      - name: Format Python code
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Format all Python files
          black receipt_dynamo receipt_label infra scripts spec || true
          isort receipt_dynamo receipt_label infra scripts spec || true
          
          # Check if there are any changes
          if [[ -n $(git diff --name-only) ]]; then
            git config user.email "action@github.com"
            git config user.name "GitHub Action"
            git add -A
            git commit -m "style: auto-format Python code [skip ci]"
            git push
          fi
      
      - name: Check Python formatting
        if: github.event_name == 'pull_request'
        run: |
          black --check receipt_dynamo receipt_label infra
          isort --check-only receipt_dynamo receipt_label infra
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Check TypeScript/ESLint
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run lint
          npm run type-check

  # Stage 2: Tests (parallel)
  test-python:
    name: Python Tests
    needs: fast-checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [receipt_dynamo, receipt_label]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.package }}-${{ hashFiles(format('{0}/pyproject.toml', matrix.package)) }}
      
      - name: Install package
        run: |
          pip install -e "${{ matrix.package }}[test]"
      
      - name: Run tests
        working-directory: ${{ matrix.package }}
        run: |
          pytest -m "not end_to_end" --cov=${{ matrix.package }} --cov-report=xml
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: ${{ matrix.package }}/coverage.xml
          retention-days: 1

  test-typescript:
    name: TypeScript Tests
    needs: fast-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Install and test
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run test:ci
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-portfolio
          path: portfolio/coverage
          retention-days: 1

  # Stage 3: Documentation (can run in parallel with tests)
  docs:
    name: Generate Documentation
    needs: fast-checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Generate docs
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run docs
      
      - name: Commit documentation
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'docs: update TypeDoc documentation [skip ci]'
          file_pattern: 'portfolio/docs/**'
          skip_dirty_check: false

  # Stage 4: Deploy (only on main)
  deploy:
    name: Deploy with Pulumi
    needs: [test-python, test-typescript]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Build Next.js app
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run build
      
      - name: Install Python dependencies
        run: |
          pip install -r infra/requirements.txt
      
      - name: Deploy with Pulumi
        run: |
          cd infra
          pulumi stack select tnorlund/portfolio/prod
          pulumi up --yes
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      
      - name: Get Pulumi outputs
        id: pulumi-outputs
        run: |
          cd infra
          echo "bucket_name=$(pulumi stack output site_bucket_name)" >> $GITHUB_OUTPUT
          echo "distribution_id=$(pulumi stack output distribution_id)" >> $GITHUB_OUTPUT
      
      - name: Sync to S3
        run: |
          aws s3 sync portfolio/out s3://${{ steps.pulumi-outputs.outputs.bucket_name }} \
            --delete \
            --cache-control "public, max-age=3600"
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.pulumi-outputs.outputs.distribution_id }} \
            --paths "/*"

  # Stage 5: E2E tests (only after deploy)
  e2e-tests:
    name: End-to-End Tests
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install package
        run: |
          pip install -e "receipt_dynamo[test]"
      
      - name: Run E2E tests
        working-directory: receipt_dynamo
        run: |
          pytest -m end_to_end --tb=short
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # Summary job for branch protection
  ci-success:
    name: CI Success
    needs: [fast-checks, test-python, test-typescript]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.fast-checks.result }}" != "success" || 
                "${{ needs.test-python.result }}" != "success" || 
                "${{ needs.test-typescript.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All CI checks passed!"