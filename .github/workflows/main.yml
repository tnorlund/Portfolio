name: Pulumi
on:
  push:
    branches:
      - main
jobs:
  pytest:
    name: Run tests
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Install dependencies
        run: pip install -r requirements-dev.txt
        working-directory: development/lambda_layer/python

      - name: Install package
        run: pip install -e .
        working-directory: development/lambda_layer/python

      - name: Run tests
        run: pytest
        working-directory: development/lambda_layer/python
  up:
    name: Build React app and Pulumi Up to Production
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Install dependencies (Yarn)
        run: yarn install
        working-directory: my-app

      - name: Build React app
        run: yarn build
        working-directory: my-app

      - name: Build and push Docker image
        run: |
          export ACCOUNT_ID=`aws sts get-caller-identity --query "Account" --output text --region ${REGION}`
          aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
          if ! aws ecr describe-repositories --repository-names cluster-ocr > /dev/null 2>&1; then
              aws ecr create-repository --repository-name cluster-ocr
          fi
          docker buildx build --platform=linux/amd64 -t cluster-ocr -f ingestion/Dockerfile .
          docker tag cluster-ocr:prod ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/cluster-ocr:prod
          docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/cluster-ocr:prod
        working-directory: development
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ env.awsRegion }}

      - name: Pulumi Up
        uses: pulumi/actions@v6
        with:
          command: up
          stack-name: tnorlund/development/prod
          work-dir: development
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get Pulumi outputs
        id: pulumi-outputs
        run: |
            BUCKET_NAME=$(pulumi stack output bucketName --stack tnorlund/development/prod)
            AWS_REGION_FROM_PULUMI=$(pulumi stack output region --stack tnorlund/development/prod)
            echo "bucketName=$BUCKET_NAME" >> $GITHUB_ENV
            echo "awsRegion=$AWS_REGION_FROM_PULUMI" >> $GITHUB_ENV
        working-directory: development
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Sync files to S3
        run: |
          aws s3 sync my-app/build "s3://${{ env.bucketName }}"
