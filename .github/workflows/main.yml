name: Main CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Stage 1: Fast checks (fail fast)
  fast-checks:
    name: Format & Lint Checks
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install minimal dependencies
        run: |
          pip install black isort
      
      - name: Check Python formatting
        run: |
          # Check formatting but don't block (we have auto-format on PRs)
          echo "Checking Python formatting..."
          black --check receipt_dynamo receipt_label infra || echo "::warning::Some files need black formatting"
          isort --check-only receipt_dynamo receipt_label infra || echo "::warning::Some imports need isort formatting"
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Check TypeScript/ESLint
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run lint
          npm run type-check

  # Stage 2: Tests (parallel)
  test-python:
    name: Python Tests (${{ matrix.package }}-${{ matrix.test_type }})
    needs: fast-checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Split receipt_dynamo (largest package) into unit and integration tests
          - package: receipt_dynamo
            test_type: unit
            test_path: tests/unit
          - package: receipt_dynamo  
            test_type: integration
            test_path: tests/integration
          # receipt_label is smaller, run all tests together
          - package: receipt_label
            test_type: all
            test_path: tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache pip packages and virtual environment
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}
            ~/.local/lib/python3.12/site-packages
          key: ${{ runner.os }}-python-${{ matrix.package }}-${{ hashFiles(format('{0}/pyproject.toml', matrix.package), 'receipt_dynamo/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.package }}-
            ${{ runner.os }}-python-
      
      - name: Cache pytest results and coverage
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.package }}/.pytest_cache
            ${{ matrix.package }}/.coverage
            .pytest_cache
          key: ${{ runner.os }}-pytest-${{ matrix.package }}-${{ hashFiles(format('{0}/**/*.py', matrix.package)) }}
          restore-keys: |
            ${{ runner.os }}-pytest-${{ matrix.package }}-
      
      - name: Install package with optimizations
        run: |
          # Upgrade pip for faster installs
          python -m pip install --upgrade pip wheel
          
          # Check if packages are already cached
          if pip list | grep -q "pytest-xdist"; then
            echo "✓ Test dependencies already cached"
          else
            echo "Installing test dependencies..."
            pip install pytest-xdist pytest-timeout
          fi
          
          # Install receipt_dynamo first as it's a dependency for other packages
          if [[ "${{ matrix.package }}" != "receipt_dynamo" ]]; then
            if pip list | grep -q "receipt-dynamo"; then
              echo "✓ receipt_dynamo already cached"
            else
              pip install -e "receipt_dynamo[dev]" --no-deps
              pip install -e "receipt_dynamo[dev]"
            fi
          fi
          
          # Install the target package with minimal dependencies first
          if [[ "${{ matrix.package }}" == "receipt_trainer" ]] || [[ "${{ matrix.package }}" == "receipt_trainer_1" ]]; then
            pip install -e "${{ matrix.package }}[dev]"
          else
            # Check if already installed
            PACKAGE_NAME=$(echo "${{ matrix.package }}" | tr '_' '-')
            if pip list | grep -q "${PACKAGE_NAME}"; then
              echo "✓ ${{ matrix.package }} already cached"
            else
              # Install with minimum dependencies first, then test extras
              pip install -e "${{ matrix.package }}" --no-deps
              pip install -e "${{ matrix.package }}[test]"
            fi
          fi
          
          # Verify installation
          echo "=== Key packages installed ==="
          pip list | grep -E "(pinecone|openai|receipt|pytest|moto|boto)" | head -10 || true
      
      - name: Run tests (${{ matrix.test_type }})
        working-directory: ${{ matrix.package }}
        run: |
          # Use the specific test path from matrix
          TEST_DIR="${{ matrix.test_path }}"
          
          # For receipt_label, check for package-specific test location
          if [[ "${{ matrix.package }}" == "receipt_label" ]] && [[ -d "receipt_label/tests" ]]; then
            TEST_DIR="receipt_label/tests"
          fi
          
          # Adjust parallelization based on test type
          if [[ "${{ matrix.test_type }}" == "unit" ]]; then
            # Unit tests can handle more parallelization
            WORKERS="auto"
            TIMEOUT="120"
          elif [[ "${{ matrix.test_type }}" == "integration" ]]; then
            # Integration tests need fewer workers to avoid resource conflicts
            WORKERS="2"
            TIMEOUT="300"
          else
            # Default for mixed test suites
            WORKERS="auto"
            TIMEOUT="300"
          fi
          
          # Run tests with optimized settings per test type
          python -m pytest $TEST_DIR \
            -n $WORKERS \
            -m "not end_to_end and not slow" \
            --timeout=$TIMEOUT \
            --timeout-method=thread \
            --cov=${{ matrix.package }} \
            --cov-report=xml \
            --cov-report=term-missing:skip-covered \
            --maxfail=5 \
            -x \
            --durations=20 \
            --tb=short
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}-${{ matrix.test_type }}
          path: ${{ matrix.package }}/coverage.xml
          retention-days: 1

  test-typescript:
    name: TypeScript Tests
    needs: fast-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Install and test
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run test:ci
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-portfolio
          path: portfolio/coverage
          retention-days: 1

  # Stage 3: Documentation (can run in parallel with tests)
  docs:
    name: Generate Documentation
    needs: fast-checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    continue-on-error: true  # Don't fail the whole workflow if docs fail
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Generate docs
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run docs
      
      - name: Commit documentation
        continue-on-error: true
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'docs: update TypeDoc documentation [skip ci]'
          file_pattern: 'portfolio/docs/**'
          skip_dirty_check: false
          skip_checkout: true

  # Stage 4: Deploy (only on main)
  deploy:
    name: Deploy with Pulumi
    needs: [test-python, test-typescript]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Build Next.js app
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run build
      
      - name: Install Python dependencies
        run: |
          pip install -r infra/requirements.txt
      
      - name: Deploy with Pulumi
        run: |
          cd infra
          pulumi stack select tnorlund/portfolio/prod
          pulumi up --yes
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      
      - name: Get Pulumi outputs
        id: pulumi-outputs
        run: |
          cd infra
          echo "bucket_name=$(pulumi stack output site_bucket_name)" >> $GITHUB_OUTPUT
          echo "distribution_id=$(pulumi stack output distribution_id)" >> $GITHUB_OUTPUT
      
      - name: Sync to S3
        run: |
          aws s3 sync portfolio/out s3://${{ steps.pulumi-outputs.outputs.bucket_name }} \
            --delete \
            --cache-control "public, max-age=3600"
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.pulumi-outputs.outputs.distribution_id }} \
            --paths "/*"

  # Stage 5: E2E tests (only after deploy)
  e2e-tests:
    name: End-to-End Tests
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install package
        run: |
          pip install -e "receipt_dynamo[test]"
      
      - name: Run E2E tests
        working-directory: receipt_dynamo
        run: |
          pytest -m end_to_end --tb=short
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # Summary job for branch protection
  ci-success:
    name: CI Success
    needs: [fast-checks, test-python, test-typescript]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.fast-checks.result }}" != "success" || 
                "${{ needs.test-python.result }}" != "success" || 
                "${{ needs.test-typescript.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All CI checks passed!"