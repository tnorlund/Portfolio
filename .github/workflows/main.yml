name: Pulumi
on:
  push:
    branches:
      - main
jobs:
  pytest:
    name: Run tests
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install dependencies
        run: pip install -r requirements-dev.txt
        working-directory: infra/lambda_layer/python

      - name: Install package
        run: pip install -e .
        working-directory: infra/lambda_layer/python

      - name: Run unit tests
        run: pytest -m unit
        working-directory: infra/lambda_layer/python

      - name: Run integration tests
        run: pytest -m integration
        working-directory: infra/lambda_layer/python

      - name: Install Pulumi Python dependencies
        run: pip install -r requirements.txt
        working-directory: infra

      - name: Configure Pulumi Stack
        run: pulumi stack select tnorlund/portfolio/prod
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Configure Pulumi
        uses: pulumi/actions@v6
        with:
          command: preview
          stack-name: tnorlund/portfolio/prod
          work-dir: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Run end-to-end tests
        run: pytest -m end_to_end
        working-directory: infra/lambda_layer/python
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  up:
    name: Build React app and Pulumi Up to Production
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install and build React app
        run: |
          yarn install
          yarn build
        working-directory: portfolio

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
      
      - name: Install Pulumi Python dependencies
        run: pip install -r requirements.txt
        working-directory: infra

      - name: Pulumi Deploy
        uses: pulumi/actions@v6
        with:
          command: up
          stack-name: tnorlund/portfolio/prod
          work-dir: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get Pulumi outputs
        id: pulumi-outputs
        run: |
          BUCKET_NAME=$(pulumi stack output cdn_bucket_name --stack tnorlund/portfolio/prod)
          AWS_REGION_FROM_PULUMI=$(pulumi stack output region --stack tnorlund/portfolio/prod)
          DISTRIBUTION_ID=$(pulumi stack output cdn_distribution_id --stack tnorlund/portfolio/prod)
      
          echo "cdn_bucket_name=$BUCKET_NAME" >> $GITHUB_ENV
          echo "awsRegion=$AWS_REGION_FROM_PULUMI" >> $GITHUB_ENV
          echo "distributionId=$DISTRIBUTION_ID" >> $GITHUB_ENV
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Sync files to S3
        run: |
          aws s3 sync portfolio/build "s3://${{ env.cdn_bucket_name }}"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.distributionId }} \
            --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
