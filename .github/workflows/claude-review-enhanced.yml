name: Claude Code Review
on:
  pull_request:
    types: [ready_for_review, labeled, synchronize]
    paths:
      # Only review code files
      - '**.py'
      - '**.ts'
      - '**.tsx'
      - '**.js'
      - '**.jsx'
      # Exclude non-code files
      - '!**.md'
      - '!**.json'
      - '!**.yaml'
      - '!**.yml'
      - '!**.txt'
      - '!**.toml'

# Required permissions for comment management and PR access
permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  manage-comments:
    name: Manage Previous Comments
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      !contains(github.event.pull_request.labels.*.name, 'skip-claude-review')
    outputs:
      should_review: ${{ steps.check.outputs.should_review }}
      pr_size: ${{ steps.check.outputs.pr_size }}
    steps:
      - name: Mark previous Claude comments as outdated
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number;
            
            // Get all comments on the PR
            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
              }
            );
            
            // Get all review comments (inline code comments)
            const reviewComments = await github.paginate(
              github.rest.pulls.listReviewComments,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
              }
            );
            
            // Find Claude's comments (from github-actions bot)
            const claudeComments = comments.filter(comment => 
              comment.user.login === 'github-actions[bot]' &&
              (comment.body.includes('Claude') || comment.body.includes('🤖'))
            );
            
            const claudeReviewComments = reviewComments.filter(comment =>
              comment.user.login === 'github-actions[bot]' &&
              (comment.body.includes('Claude') || comment.body.includes('🤖'))
            );
            
            console.log(`Found ${claudeComments.length} Claude PR comments`);
            console.log(`Found ${claudeReviewComments.length} Claude review comments`);
            
            // Mark PR comments as outdated by editing them
            for (const comment of claudeComments) {
              // Skip if already marked as outdated
              if (comment.body.includes('[OUTDATED]')) continue;
              
              // Collapse the comment content and mark as outdated
              const updatedBody = `<details>
            <summary>🤖 [OUTDATED] Claude Review (${new Date(comment.created_at).toLocaleDateString()})</summary>
            
            ${comment.body}
            
            </details>
            
            ----
            *This review is outdated due to new commits. See the latest review below.*`;
              
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: updatedBody
              });
            }
            
            // For review comments, we can't edit them, but we can minimize them
            for (const comment of claudeReviewComments) {
              try {
                // GitHub GraphQL API to minimize review comments
                await github.graphql(`
                  mutation minimizeComment($commentId: ID!) {
                    minimizeComment(input: {
                      subjectId: $commentId,
                      classifier: OUTDATED
                    }) {
                      minimizedComment {
                        isMinimized
                      }
                    }
                  }
                `, {
                  commentId: comment.node_id
                });
              } catch (error) {
                console.log(`Could not minimize comment ${comment.id}: ${error.message}`);
              }
            }
            
            // Check if we should do a new review
            const pr = context.payload.pull_request;
            
            // Skip if draft
            if (pr.draft) {
              console.log('Skipping: PR is draft');
              core.setOutput('should_review', 'false');
              return;
            }
            
            // Skip if has skip label
            const labels = pr.labels.map(l => l.name);
            if (labels.includes('skip-claude-review')) {
              console.log('Skipping: has skip-claude-review label');
              core.setOutput('should_review', 'false');
              return;
            }
            
            // Check PR size
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const total = additions + deletions;
            core.setOutput('pr_size', total);
            
            // Skip large PRs unless explicitly requested
            const hasRequestLabel = labels.includes('claude-review-requested');
            if (total > 1000 && !hasRequestLabel) {
              console.log(`Skipping: PR too large (${total} lines) without explicit request`);
              core.setOutput('should_review', 'false');
              return;
            }
            
            core.setOutput('should_review', 'true');

  claude-review:
    name: Claude Code Review
    needs: manage-comments
    if: needs.manage-comments.outputs.should_review == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add review header comment
        uses: actions/github-script@v7
        with:
          script: |
            const size = ${{ needs.manage-comments.outputs.pr_size }};
            const timestamp = new Date().toISOString();
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 🤖 Claude Review Started
              
              **PR Size**: ${size} lines  
              **Timestamp**: ${timestamp}  
              **Commit**: ${context.sha.substring(0, 7)}
              
              Review in progress...`
            });

      - name: Claude review
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          allow-python-tool-execution: true
          language-model-instructions: |
            You are reviewing a pull request. Be concise and focus on:
            1. Critical bugs or security issues
            2. Performance problems
            3. Missing error handling
            4. Code that doesn't follow project patterns
            
            Skip commenting on:
            - Minor style issues (these are handled by formatters)
            - Missing docstrings (unless critical)
            - Variable naming (unless very unclear)
            
            For large PRs (>500 lines), focus only on critical issues.
            
            Start your review with a brief summary (2-3 sentences max).
            
            IMPORTANT: Keep your comments concise. Long comments will be harder to manage.
          review-strategy: "files-changed"

      - name: Add review summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Create a summary comment with metadata
            const summary = `## 🤖 Claude Review Complete
            
            **Reviewed at**: ${new Date().toISOString()}  
            **Commit**: ${context.sha.substring(0, 7)}  
            **Review ID**: ${context.runId}-${context.runNumber}
            
            <details>
            <summary>Review Metadata</summary>
            
            - Workflow Run: [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - Triggered by: ${context.eventName}
            - PR Size: ${{ needs.manage-comments.outputs.pr_size }} lines
            
            </details>
            
            ---
            *Previous reviews have been collapsed as outdated. To see all reviews, expand the collapsed sections above.*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });

  cleanup-on-merge:
    name: Cleanup After Merge
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Minimize all Claude comments
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number;
            
            // Get all comments
            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
              }
            );
            
            // Find Claude's comments
            const claudeComments = comments.filter(comment => 
              comment.user.login === 'github-actions[bot]' &&
              (comment.body.includes('Claude') || comment.body.includes('🤖'))
            );
            
            // Add a final summary
            if (claudeComments.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `### 🎉 PR Merged
                
                This PR had ${claudeComments.length} Claude review comments. All reviews are now archived.`
              });
            }