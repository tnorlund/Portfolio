name: Track AI Usage

on:
  workflow_run:
    workflows: ["Claude Review", "Claude Review Enhanced"]
    types: [completed]
  
  # Also allow manual trigger for testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to track usage for'
        required: false
        type: number
      estimated_tokens:
        description: 'Estimated tokens used'
        required: false
        default: 5000
        type: number

jobs:
  track-claude-usage:
    name: Track Claude Usage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          pip install boto3
      
      - name: Track usage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DYNAMODB_TABLE_NAME: ${{ secrets.DYNAMODB_TABLE_NAME }}
        run: |
          python -c "
          import os
          import json
          import uuid
          from datetime import datetime
          import boto3
          
          # Get context
          event_name = '${{ github.event_name }}'
          workflow_name = '${{ github.workflow }}'
          
          if event_name == 'workflow_run':
              # Extract PR number from workflow run
              pr_number = None
              workflow_run = ${{ toJson(github.event.workflow_run) }}
              if workflow_run.get('head_branch') and workflow_run['head_branch'].startswith('pull/'):
                  pr_number = int(workflow_run['head_branch'].split('/')[1])
              estimated_tokens = 5000  # Default estimate
          else:
              # Manual trigger
              pr_number = ${{ inputs.pr_number || 'None' }}
              estimated_tokens = ${{ inputs.estimated_tokens || 5000 }}
          
          # Calculate cost estimate
          model = 'claude-3-opus'
          input_tokens = int(estimated_tokens * 0.7)
          output_tokens = estimated_tokens - input_tokens
          
          # Claude pricing per 1k tokens
          input_price = 0.015
          output_price = 0.075
          cost_usd = (input_tokens / 1000) * input_price + (output_tokens / 1000) * output_price
          
          # Create DynamoDB item
          timestamp = datetime.utcnow()
          request_id = str(uuid.uuid4())
          
          item = {
              'PK': {'S': f'AI_USAGE#anthropic#{model}'},
              'SK': {'S': f'USAGE#{timestamp.isoformat()}#{request_id}'},
              'GSI1PK': {'S': 'AI_USAGE#anthropic'},
              'GSI1SK': {'S': f'DATE#{timestamp.strftime(\"%Y-%m-%d\")}'},
              'GSI2PK': {'S': 'AI_USAGE_COST'},
              'GSI2SK': {'S': f'COST#{timestamp.strftime(\"%Y-%m-%d\")}#anthropic'},
              'TYPE': {'S': 'AIUsageMetric'},
              'service': {'S': 'anthropic'},
              'model': {'S': model},
              'operation': {'S': 'code_review'},
              'timestamp': {'S': timestamp.isoformat()},
              'requestId': {'S': request_id},
              'inputTokens': {'N': str(input_tokens)},
              'outputTokens': {'N': str(output_tokens)},
              'totalTokens': {'N': str(estimated_tokens)},
              'costUSD': {'N': str(cost_usd)},
              'apiCalls': {'N': '1'},
              'date': {'S': timestamp.strftime('%Y-%m-%d')},
              'month': {'S': timestamp.strftime('%Y-%m')},
              'hour': {'S': timestamp.strftime('%Y-%m-%d-%H')},
              'userId': {'S': 'github-actions'},
              'metadata': {'M': {
                  'workflow': {'S': workflow_name},
                  'repository': {'S': '${{ github.repository }}'},
                  'estimated': {'BOOL': True}
              }}
          }
          
          if pr_number:
              item['githubPR'] = {'N': str(pr_number)}
              item['metadata']['M']['pr_number'] = {'N': str(pr_number)}
          
          # Store in DynamoDB
          try:
              dynamodb = boto3.client('dynamodb')
              table_name = os.environ['DYNAMODB_TABLE_NAME']
              
              response = dynamodb.put_item(
                  TableName=table_name,
                  Item=item
              )
              
              print(f'Successfully tracked AI usage:')
              print(f'  Service: anthropic')
              print(f'  Model: {model}')
              print(f'  Operation: code_review')
              print(f'  Estimated tokens: {estimated_tokens}')
              print(f'  Estimated cost: ${cost_usd:.4f}')
              if pr_number:
                  print(f'  PR: #{pr_number}')
              
          except Exception as e:
              print(f'Failed to track usage: {e}')
              # Don't fail the workflow for tracking issues
          "