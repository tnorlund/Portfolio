name: PR Checks
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Quick format check
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    outputs:
      formatted: ${{ steps.check.outputs.formatted }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Check Python formatting
        id: check
        run: |
          # Install formatters
          pip install isort black

          # Check if code is formatted
          if isort --check-only . && black --check .; then
            echo "formatted=true" >> $GITHUB_OUTPUT
          else
            echo "formatted=false" >> $GITHUB_OUTPUT
          fi

  # Fast subset of tests for PRs
  quick-tests:
    name: Quick Tests (${{ matrix.package }})
    needs: format-check
    if: always()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [receipt_dynamo, receipt_label, portfolio]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up environment
        uses: actions/setup-python@v4
        if: matrix.package != 'portfolio'
        with:
          python-version: '3.12'

      - uses: actions/setup-node@v3
        if: matrix.package == 'portfolio'
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Run Python tests
        if: matrix.package != 'portfolio'
        working-directory: ${{ matrix.package }}
        run: |
          # Install package with test dependencies
          if [[ -f "pyproject.toml" ]] && grep -q "test.*=" pyproject.toml; then
            echo "Installing package with test dependencies"
            pip install -e ".[test]"
          else
            echo "Installing minimal test dependencies"
            pip install pytest pytest-xdist pytest-cov
            pip install -e .
          fi

          # Handle cross-package dependencies
          if [[ "${{ matrix.package }}" == "receipt_label" ]]; then
            echo "Installing receipt_dynamo dependency for receipt_label"
            pip install -e "../receipt_dynamo"
          fi

          # Run only fast unit tests
          # Use -o addopts="" to override pytest.ini for faster CI runs without coverage
          if [[ "${{ matrix.package }}" == "receipt_label" ]]; then
            # receipt_label uses marker-based test organization
            pytest tests -n auto -m "unit and not slow" --tb=short -q -o addopts=""
          else
            # receipt_dynamo uses directory-based test organization
            pytest tests/unit -n auto -m "not slow" --tb=short -q -o addopts=""
          fi

      - name: Run TypeScript checks
        if: matrix.package == 'portfolio'
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run lint
          npm run type-check

  # Status check for branch protection
  pr-status:
    name: PR Status
    needs: [format-check, quick-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Log status
        run: |
          formatted='${{ needs.format-check.outputs.formatted }}'
          tests_result='${{ needs.quick-tests.result }}'

          echo "=== PR Status Summary ==="
          if [[ "$formatted" == "true" ]]; then
            echo "✅ Code is properly formatted"
          else
            echo "❌ Code needs formatting (run 'make format')"
          fi

          if [[ "$tests_result" == "success" ]]; then
            echo "✅ Tests pass"
          else
            echo "❌ Tests failed"
          fi
          echo "========================="

      - name: Set status
        run: |
          # Only fail if tests fail, not formatting
          if [[ "${{ needs.quick-tests.result }}" == "success" ]]; then
            echo "All critical checks passed!"
            if [[ "${{ needs.format-check.outputs.formatted }}" != "true" ]]; then
              echo "Note: Formatting issues detected but not blocking"
            fi
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi
