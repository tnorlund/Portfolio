name: PR Checks
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Quick format check
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    outputs:
      formatted: ${{ steps.check.outputs.formatted }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python (GitHub-hosted)
        if: ${{ runner.os != 'macOS' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Use system Python (self-hosted)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Using Python 3.12 on self-hosted runner"
          # Prioritize Framework Python 3.12 to match workflow requirements
          if [ -f "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3" ]; then
            export PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin:$PATH"
            echo "/Library/Frameworks/Python.framework/Versions/3.12/bin" >> $GITHUB_PATH
          # Fall back to Homebrew Python (but check version)
          elif [ -f "/opt/homebrew/bin/python3" ]; then
            HOMEBREW_VERSION=$(/opt/homebrew/bin/python3 --version 2>&1 | grep -o "3\.[0-9]*")
            if [[ "$HOMEBREW_VERSION" == "3.12" ]]; then
              export PATH="/opt/homebrew/bin:$PATH"
              echo "/opt/homebrew/bin" >> $GITHUB_PATH
            else
              echo "Warning: Homebrew Python is $HOMEBREW_VERSION, but workflow requires 3.12"
              echo "Continuing with system Python"
            fi
          fi
          python3 --version
          which python3

      - name: Check Python formatting
        id: check
        run: |
          # Install formatters
          python3 -m pip install isort black

          # Check if code is formatted with standardized parameters
          if isort --check-only --profile=black --line-length=79 --multi-line-output=3 --include-trailing-comma --force-grid-wrap=0 --use-parentheses --ensure-newline-before-comments receipt_dynamo receipt_label receipt_trainer receipt_trainer_1 receipt_upload infra scripts && black --check --line-length=79 receipt_dynamo receipt_label receipt_trainer receipt_trainer_1 receipt_upload infra scripts; then
            echo "formatted=true" >> $GITHUB_OUTPUT
          else
            echo "formatted=false" >> $GITHUB_OUTPUT
          fi

  # Fast subset of tests for PRs - Python packages on self-hosted
  quick-tests-python:
    name: Quick Tests (${{ matrix.package }})
    needs: format-check
    if: always()
    runs-on: [self-hosted, macOS, ARM64]
    strategy:
      matrix:
        package: [receipt_dynamo, receipt_label]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python (GitHub-hosted)
        if: ${{ runner.os != 'macOS' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Use system Python (self-hosted)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Using Python 3.12 on self-hosted runner"
          # Prioritize Framework Python 3.12 to match workflow requirements
          if [ -f "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3" ]; then
            export PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin:$PATH"
            echo "/Library/Frameworks/Python.framework/Versions/3.12/bin" >> $GITHUB_PATH
          # Fall back to Homebrew Python (but check version)
          elif [ -f "/opt/homebrew/bin/python3" ]; then
            HOMEBREW_VERSION=$(/opt/homebrew/bin/python3 --version 2>&1 | grep -o "3\.[0-9]*")
            if [[ "$HOMEBREW_VERSION" == "3.12" ]]; then
              export PATH="/opt/homebrew/bin:$PATH"
              echo "/opt/homebrew/bin" >> $GITHUB_PATH
            else
              echo "Warning: Homebrew Python is $HOMEBREW_VERSION, but workflow requires 3.12"
              echo "Continuing with system Python"
            fi
          fi
          python3 --version
          which python3

      - name: Setup virtual environment and install packages
        run: |
          # Create isolated virtual environment for this PR check job
          VENV_PATH=".venv-pr-${{ matrix.package }}"
          echo "Creating virtual environment: $VENV_PATH"
          
          # Always create fresh virtual environment to ensure we test against PR code
          if [ -d "$VENV_PATH" ]; then
            echo "Removing existing virtual environment to ensure fresh dependencies..."
            rm -rf "$VENV_PATH"
          fi
          
          python3 -m venv "$VENV_PATH"
          source "$VENV_PATH/bin/activate"
          
          # Add venv to PATH and environment for subsequent steps
          echo "$PWD/$VENV_PATH/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$PWD/$VENV_PATH" >> $GITHUB_ENV
          
          # Upgrade pip
          python3 -m pip install --upgrade pip --disable-pip-version-check

          # Install build dependencies offline to avoid network issues
          echo "Pre-installing build dependencies..."
          python3 -m pip install hatchling --disable-pip-version-check

          # Install package with test dependencies from PR source
          if [[ "${{ matrix.package }}" == "receipt_label" ]]; then
            echo "Installing receipt_dynamo dependency from PR source first"
            python3 -m pip install --force-reinstall -e "receipt_dynamo[test]" --disable-pip-version-check
          fi
          
          # Install target package with all test dependencies
          cd ${{ matrix.package }}
          if [[ -f "pyproject.toml" ]] && grep -q "test.*=" pyproject.toml; then
            echo "Installing package with test dependencies from PR source"
            python3 -m pip install --force-reinstall -e ".[test]" --disable-pip-version-check
          else
            echo "Installing package from PR source with minimal test dependencies"
            python3 -m pip install --force-reinstall -e . --disable-pip-version-check
            python3 -m pip install pytest pytest-xdist pytest-cov pytest-mock --disable-pip-version-check
          fi

          # Verify we're using PR source code
          echo "=== Virtual environment packages ==="
          python3 -m pip list | grep -E "(receipt|pytest)" || echo "No receipt/pytest packages found"
          echo "Python location: $(which python3)"
          echo "Virtual environment: $VIRTUAL_ENV"
          
          # Verify editable installs
          echo "=== Verifying editable installs ==="
          python3 -m pip show ${{ matrix.package }} 2>/dev/null | grep -E "(Location|Editable)" || echo "${{ matrix.package }} not found"

      - name: Run Python tests
        working-directory: ${{ matrix.package }}
        env:
          SKIP_PERFORMANCE_TESTS: "true"
        run: |

          # Run only fast unit tests with 30-second timeout
          # Use -o addopts="" to override pytest.ini for faster CI runs without coverage
          if [[ "${{ matrix.package }}" == "receipt_label" ]]; then
            # receipt_label uses marker-based test organization
            pytest tests -n auto --timeout=30 -m "unit and not slow" --tb=short -q -o addopts=""
          else
            # receipt_dynamo uses directory-based test organization
            pytest tests/unit -n auto --timeout=30 -m "not slow and not unused_in_production" --tb=short -q -o addopts=""
          fi

  # TypeScript tests on GitHub-hosted
  quick-tests-typescript:
    name: Quick Tests (portfolio)
    needs: format-check
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Run TypeScript checks
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run lint
          npm run type-check

  # Status check for branch protection
  pr-status:
    name: PR Status
    needs: [format-check, quick-tests-python, quick-tests-typescript]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Log status
        run: |
          formatted='${{ needs.format-check.outputs.formatted }}'
          python_tests_result='${{ needs.quick-tests-python.result }}'
          typescript_tests_result='${{ needs.quick-tests-typescript.result }}'

          echo "=== PR Status Summary ==="
          if [[ "$formatted" == "true" ]]; then
            echo "✅ Code is properly formatted"
          else
            echo "❌ Code needs formatting (run 'make format')"
          fi

          if [[ "$python_tests_result" == "success" ]]; then
            echo "✅ Python tests pass"
          else
            echo "❌ Python tests failed"
          fi

          if [[ "$typescript_tests_result" == "success" ]]; then
            echo "✅ TypeScript tests pass"
          else
            echo "❌ TypeScript tests failed"
          fi
          echo "========================="

      - name: Set status
        run: |
          # Only fail if tests fail, not formatting
          python_result='${{ needs.quick-tests-python.result }}'
          typescript_result='${{ needs.quick-tests-typescript.result }}'

          if [[ "$python_result" == "success" && "$typescript_result" == "success" ]]; then
            echo "All critical checks passed!"
            if [[ "${{ needs.format-check.outputs.formatted }}" != "true" ]]; then
              echo "Note: Formatting issues detected but not blocking"
            fi
            exit 0
          else
            echo "One or more test suites failed:"
            echo "Python tests: $python_result"
            echo "TypeScript tests: $typescript_result"
            exit 1
          fi
