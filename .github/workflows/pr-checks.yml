name: PR Checks
on:
  pull_request:
    types: [opened, synchronize, reopened]

# Cancel previous runs
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Quick format check and auto-fix
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      formatted: ${{ steps.format.outputs.formatted }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Format code
        id: format
        run: |
          pip install black isort
          
          # Run formatters
          black receipt_dynamo receipt_label infra || true
          isort receipt_dynamo receipt_label infra || true
          
          # Check for changes
          if [[ -n $(git diff --name-only) ]]; then
            echo "formatted=true" >> $GITHUB_OUTPUT
            
            # Commit changes
            git config user.email "action@github.com"
            git config user.name "GitHub Action"
            git add -A
            git commit -m "style: auto-format code [skip ci]"
            git push
          else
            echo "formatted=false" >> $GITHUB_OUTPUT
          fi

  # Fast subset of tests for PRs
  quick-tests:
    name: Quick Tests (${{ matrix.package }})
    needs: format-check
    if: always()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [receipt_dynamo, receipt_label, portfolio]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up environment
        uses: actions/setup-python@v4
        if: matrix.package != 'portfolio'
        with:
          python-version: '3.12'

      - uses: actions/setup-node@v3
        if: matrix.package == 'portfolio'
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Run Python tests
        if: matrix.package != 'portfolio'
        working-directory: ${{ matrix.package }}
        run: |
          # Install minimal dependencies
          pip install pytest pytest-xdist
          
          # Install package with test dependencies for receipt_label
          if [[ "${{ matrix.package }}" == "receipt_label" ]]; then
            # receipt_label depends on receipt_dynamo (cross-package dependency)
            pip install -e "../receipt_dynamo"
            pip install -e ".[test]"
          else
            pip install -e .
          fi
          
          # Run only fast unit tests (handle different test organization patterns)
          if [[ "${{ matrix.package }}" == "receipt_label" ]]; then
            # receipt_label uses marker-based organization
            pytest receipt_label/tests -n auto -m "unit and not slow" --tb=short -q
          else
            # receipt_dynamo uses directory-based organization
            pytest tests/unit -n auto -m "not slow" --tb=short -q
          fi

      - name: Run TypeScript checks
        if: matrix.package == 'portfolio'
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run lint
          npm run type-check

  # Status check for branch protection
  pr-status:
    name: PR Status
    needs: [format-check, quick-tests]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:
      - name: Comment status
        uses: actions/github-script@v7
        with:
          script: |
            const formatted = '${{ needs.format-check.outputs.formatted }}' === 'true';
            const icon = formatted ? '🎨' : '✅';
            const formatCheck = '${{ needs.format-check.result }}';
            const quickTests = '${{ needs.quick-tests.result }}';
            
            let message = 'All PR checks passed!';
            let details = [];
            
            if (formatted) {
              message = 'Code has been auto-formatted. Please pull the latest changes.';
              details.push('📝 **Auto-formatting**: Applied black and isort formatting');
            }
            
            if (formatCheck === 'success' && quickTests === 'success') {
              details.push('✅ **Format check**: Passed');
              details.push('✅ **Quick tests**: Passed');
            } else {
              if (formatCheck !== 'success') details.push('❌ **Format check**: Failed');
              if (quickTests !== 'success') details.push('❌ **Quick tests**: Failed');
            }
            
            const detailsText = details.length > 0 ? '\n\n' + details.join('\n') : '';
            
            // Find and update existing comment or create new
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              (comment.body.includes('## ✅ PR Status') || comment.body.includes('## 🎨 PR Status'))
            );
            
            const body = `## ${icon} PR Status\n\n${message}${detailsText}\n\n<sub>Last updated: ${new Date().toISOString()} | Run: ${context.runId}</sub>`;
            
            if (botComment) {
              console.log(`Updating existing PR status comment (ID: ${botComment.id})`);
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              console.log('Creating new PR status comment');
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body
              });
            }