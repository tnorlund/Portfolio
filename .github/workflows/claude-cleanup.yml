name: Claude Comment Cleanup

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to clean up (optional, cleans all if not specified)'
        required: false
        type: number
      
  schedule:
    # Run weekly to clean up old comments
    - cron: '0 0 * * 0'
  
  issue_comment:
    types: [created]

jobs:
  manual-cleanup:
    name: Manual Comment Cleanup
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '/claude cleanup'))
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Clean up Claude comments
        uses: actions/github-script@v7
        with:
          script: |
            let prs_to_clean = [];
            
            if (context.eventName === 'workflow_dispatch' && context.payload.inputs.pr_number) {
              // Clean specific PR
              prs_to_clean = [parseInt(context.payload.inputs.pr_number)];
            } else if (context.eventName === 'issue_comment') {
              // Clean current PR
              if (context.payload.issue.pull_request) {
                prs_to_clean = [context.payload.issue.number];
              }
            } else {
              // Get all open PRs
              const pulls = await github.paginate(
                github.rest.pulls.list,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  per_page: 100
                }
              );
              prs_to_clean = pulls.map(pr => pr.number);
            }
            
            console.log(`Cleaning ${prs_to_clean.length} PRs`);
            
            for (const pr_number of prs_to_clean) {
              console.log(`Processing PR #${pr_number}`);
              
              try {
                // Get all comments
                const comments = await github.paginate(
                  github.rest.issues.listComments,
                  {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr_number,
                  }
                );
                
                // Find Claude's comments
                const claudeComments = comments.filter(comment => 
                  comment.user.login === 'github-actions[bot]' &&
                  (comment.body.includes('Claude') || comment.body.includes('ðŸ¤–')) &&
                  !comment.body.includes('[OUTDATED]')
                );
                
                // Group comments by date
                const commentsByDate = {};
                for (const comment of claudeComments) {
                  const date = new Date(comment.created_at).toDateString();
                  if (!commentsByDate[date]) {
                    commentsByDate[date] = [];
                  }
                  commentsByDate[date].push(comment);
                }
                
                // Keep only the latest comment per day, collapse others
                for (const [date, dateComments] of Object.entries(commentsByDate)) {
                  // Sort by created_at descending
                  dateComments.sort((a, b) => 
                    new Date(b.created_at) - new Date(a.created_at)
                  );
                  
                  // Skip the most recent one
                  for (let i = 1; i < dateComments.length; i++) {
                    const comment = dateComments[i];
                    
                    // Collapse older comments
                    const updatedBody = `<details>
            <summary>ðŸ¤– [OUTDATED] Claude Review (${new Date(comment.created_at).toLocaleString()})</summary>
            
            ${comment.body}
            
            </details>`;
                    
                    await github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: comment.id,
                      body: updatedBody
                    });
                  }
                }
                
                console.log(`Cleaned ${claudeComments.length} comments in PR #${pr_number}`);
                
              } catch (error) {
                console.error(`Error processing PR #${pr_number}: ${error.message}`);
              }
            }
            
            // Add summary comment if triggered by comment
            if (context.eventName === 'issue_comment') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `âœ… Claude comment cleanup complete! Older reviews have been collapsed.`
              });
            }

  scheduled-cleanup:
    name: Weekly Comment Cleanup
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Clean old Claude comments
        uses: actions/github-script@v7
        with:
          script: |
            // Get all closed PRs from the last month
            const since = new Date();
            since.setDate(since.getDate() - 30);
            
            const pulls = await github.paginate(
              github.rest.pulls.list,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                sort: 'updated',
                direction: 'desc',
                per_page: 100
              }
            );
            
            // Filter to PRs updated in the last month
            const recentPulls = pulls.filter(pr => 
              new Date(pr.updated_at) > since
            );
            
            console.log(`Found ${recentPulls.length} recently closed PRs to clean`);
            
            for (const pr of recentPulls) {
              try {
                // Get all comments
                const comments = await github.paginate(
                  github.rest.issues.listComments,
                  {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                  }
                );
                
                // Find Claude's comments
                const claudeComments = comments.filter(comment => 
                  comment.user.login === 'github-actions[bot]' &&
                  (comment.body.includes('Claude') || comment.body.includes('ðŸ¤–'))
                );
                
                // Delete all Claude comments on merged PRs
                if (pr.merged_at) {
                  for (const comment of claudeComments) {
                    await github.rest.issues.deleteComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: comment.id,
                    });
                  }
                  console.log(`Deleted ${claudeComments.length} comments from merged PR #${pr.number}`);
                } else {
                  // Just collapse comments on closed but not merged PRs
                  for (const comment of claudeComments) {
                    if (comment.body.includes('[OUTDATED]')) continue;
                    
                    const updatedBody = `<details>
            <summary>ðŸ¤– [CLOSED] Claude Review</summary>
            
            ${comment.body}
            
            </details>`;
                    
                    await github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: comment.id,
                      body: updatedBody
                    });
                  }
                  console.log(`Collapsed ${claudeComments.length} comments in closed PR #${pr.number}`);
                }
              } catch (error) {
                console.error(`Error cleaning PR #${pr.number}: ${error.message}`);
              }
            }