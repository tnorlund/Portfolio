name: Deploy on Main
on:
  push:
    branches:
      - main
  # Manual trigger for missed deployments
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy with Pulumi
    # ALWAYS run on main branch pushes - no conditions
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Next.js app
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run build

      - name: Install Python dependencies
        run: |
          python3 -m pip install -r infra/requirements.txt

      - name: Deploy with Pulumi
        run: |
          cd infra
          pulumi stack select tnorlund/portfolio/prod
          # Try full deployment first
          if ! pulumi up --yes; then
            echo "Initial deployment detected, running in phases..."
            # Phase 1: Build infrastructure only
            pulumi up --yes --target '**/*codebuild*' --target '**/*codepipeline*' --target '**/*pipeline*' || true
            # Wait for pipelines to initialize
            sleep 30
            # Phase 2: Full deployment
            pulumi up --yes
          fi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Get Pulumi outputs
        id: pulumi-outputs
        run: |
          cd infra
          echo "bucket_name=$(pulumi stack output cdn_bucket_name)" >> $GITHUB_OUTPUT
          echo "distribution_id=$(pulumi stack output cdn_distribution_id)" >> $GITHUB_OUTPUT

      - name: Sync to S3
        run: |
          aws s3 sync portfolio/out s3://${{ steps.pulumi-outputs.outputs.bucket_name }} \
            --delete \
            --exclude "assets/*" \
            --cache-control "public, max-age=3600"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.pulumi-outputs.outputs.distribution_id }} \
            --paths "/*"