name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Auto-format Python code if needed
  format-python:
    name: Format Python Code
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install formatters
        run: |
          pip install black isort

      - name: Run Black formatter
        id: black
        run: |
          # Format all Python files
          black receipt_dynamo receipt_label infra

          # Check if files were modified
          if [[ -n $(git status --porcelain) ]]; then
            echo "formatted=true" >> $GITHUB_OUTPUT
          else
            echo "formatted=false" >> $GITHUB_OUTPUT
          fi

      - name: Run isort
        if: steps.black.outputs.formatted == 'true'
        run: |
          isort receipt_dynamo receipt_label infra

      - name: Commit formatting changes
        if: steps.black.outputs.formatted == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "style: auto-format Python code with Black and isort [skip ci]"
          git push

      - name: Comment on PR
        if: steps.black.outputs.formatted == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: 'üé® I\'ve automatically formatted the Python code with Black and isort. Please pull the latest changes.'
            })

  # Fast Python linting (after formatting)
  lint-python:
    name: Lint Python
    needs: [format-python]
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}

      - name: Install linters
        run: |
          pip install black isort mypy pylint

      - name: Check formatting
        run: |
          black --check receipt_dynamo receipt_label infra
          isort --check-only receipt_dynamo receipt_label infra

  # TypeScript/Next.js checks
  lint-typescript:
    name: Lint TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Install dependencies
        working-directory: portfolio
        run: npm ci --prefer-offline

      - name: Run checks
        working-directory: portfolio
        run: |
          npm run lint
          npm run type-check

  # Split Python tests by package and type for parallelization
  test-python:
    name: Test ${{ matrix.package }} (${{ matrix.test-type }})
    needs: [lint-python]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: [receipt_dynamo, receipt_label]
        test-type: [unit, integration]
        exclude:
          # Skip integration tests for receipt_label if not needed
          - package: receipt_label
            test-type: integration
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.package }}-${{ hashFiles(format('{0}/pyproject.toml', matrix.package)) }}

      - name: Install package
        run: |
          pip install -e "${{ matrix.package }}[test]"

      - name: Run tests
        working-directory: ${{ matrix.package }}
        run: |
          if [ "${{ matrix.test-type }}" == "unit" ]; then
            # Run unit tests with coverage
            pytest tests/unit -n auto --cov=${{ matrix.package }} --cov-report=xml --cov-report=term
          else
            # Run integration tests
            pytest tests/integration -n auto --cov=${{ matrix.package }} --cov-report=xml --cov-report=term
          fi

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}-${{ matrix.test-type }}
          path: ${{ matrix.package }}/coverage.xml
          retention-days: 1

  # TypeScript tests
  test-typescript:
    name: Test TypeScript
    needs: [lint-typescript]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Install and test
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run test:ci

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-portfolio
          path: portfolio/coverage
          retention-days: 1

  # Documentation generation (only on main)
  docs:
    name: Generate Documentation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Generate docs
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run docs
          npm run docs:md

      - name: Commit documentation
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'docs: update generated documentation [skip ci]'
          file_pattern: 'portfolio/docs/** portfolio/docs-md/**'
          skip_dirty_check: false

  # Deploy only on main after all tests pass
  deploy:
    name: Deploy to Production
    needs: [test-python, test-typescript]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Next.js app
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run build

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Pulumi dependencies
        run: |
          pip install -r infra/requirements.txt

      - name: Deploy with Pulumi
        uses: pulumi/actions@v6
        with:
          command: up
          stack-name: tnorlund/portfolio/prod
          work-dir: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Get outputs and sync
        id: deploy
        working-directory: infra
        run: |
          BUCKET=$(pulumi stack output cdn_bucket_name)
          DISTRIBUTION=$(pulumi stack output cdn_distribution_id)

          # Sync files
          aws s3 sync ../portfolio/out "s3://$BUCKET" --delete

          # Invalidate cache
          aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION" --paths "/*"
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # Summary status check for branch protection
  ci-status:
    name: CI Status
    needs: [lint-python, lint-typescript, test-python, test-typescript]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.lint-python.result }}" == "success" &&
                "${{ needs.lint-typescript.result }}" == "success" &&
                "${{ needs.test-python.result }}" == "success" &&
                "${{ needs.test-typescript.result }}" == "success" ]]; then
            echo "‚úÖ All checks passed!"
            exit 0
          else
            echo "‚ùå Some checks failed"
            exit 1
          fi
