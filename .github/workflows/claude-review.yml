name: Claude Code Review

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened, ready_for_review]
    # Only trigger on initial PR creation or when marked ready for review
    # NOT on subsequent commits to avoid reviewing every commit

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  claude-review:
    name: Claude Code Review
    # Run on self-hosted runner to leverage existing cost optimization
    runs-on: [self-hosted, macOS, ARM64]
    
    # Conditional execution for cost optimization
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.draft == false &&
       !contains(github.event.pull_request.labels.*.name, 'skip-claude-review')) ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && 
       contains(github.event.comment.body, '@claude'))
       
    permissions:
      contents: read
      pull-requests: write
      issues: write
      
    steps:
      - name: Check PR size for cost optimization
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        id: pr-size
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const totalChanges = additions + deletions;
            
            // Skip large PRs automatically unless explicitly requested
            if (totalChanges > 1000) {
              core.setOutput('skip_review', 'true');
              core.setOutput('reason', `PR too large: ${totalChanges} lines changed (limit: 1000)`);
            } else {
              core.setOutput('skip_review', 'false');
              core.setOutput('size_info', `PR size: ${totalChanges} lines (${additions} additions, ${deletions} deletions)`);
            }

      - name: Comment on large PR
        if: github.event_name == 'pull_request' && steps.pr-size.outputs.skip_review == 'true'
        uses: actions/github-script@v7
        env:
          SKIP_REASON: ${{ steps.pr-size.outputs.reason }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ü§ñ **Claude Review Skipped**\n\n${process.env.SKIP_REASON}\n\nTo force a review, add the \`claude-review-requested\` label or comment \`@claude review\`.`
            });

      - name: Checkout code
        if: steps.pr-size.outputs.skip_review != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for comprehensive analysis

      - name: Claude Code Review
        if: steps.pr-size.outputs.skip_review != 'true'
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Cost optimization settings
          max_turns: "3"              # Limit conversation length
          timeout_minutes: "15"       # Prevent runaway costs
          
          # Review configuration
          trigger_phrase: "@claude"   # Only respond when mentioned
          auto_review: "true"         # Enable automatic PR reviews
          
          # Integration with your optimization patterns
          review_guidelines: |
            Focus on:
            1. Performance implications (especially test timeouts and CI optimization)
            2. Pattern detection logic (given recent fixes for overlapping matches)
            3. Architecture alignment with package boundaries (receipt_dynamo vs receipt_label)
            4. Security best practices
            5. Code maintainability and testing strategy
            
            Context: This codebase uses optimized CI with self-hosted runners, has strict package separation (receipt_dynamo for data layer, receipt_label for business logic), and recently underwent CI optimization reducing execution time by 48%.

      - name: Track AI usage for cost monitoring
        if: steps.pr-size.outputs.skip_review != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Log usage for cost tracking (integrate with your existing DynamoDB tracking)
            console.log(`Claude review completed for PR #${context.payload.pull_request?.number || 'N/A'}`);
            console.log(`Trigger: ${context.eventName}`);
            console.log(`Repository: ${context.repo.owner}/${context.repo.repo}`);
            console.log(`Timestamp: ${new Date().toISOString()}`);

  # Integration check with existing CI
  integration-status:
    name: Claude Integration Status
    needs: claude-review
    runs-on: [self-hosted, macOS, ARM64]
    if: always()
    steps:
      - name: Report status
        run: |
          echo "ü§ñ Claude Code Review Integration Status"
          echo "========================================"
          echo "Event: ${{ github.event_name }}"
          echo "Claude Review: ${{ needs.claude-review.result }}"
          
          if [[ "${{ needs.claude-review.result }}" == "success" ]]; then
            echo "‚úÖ Claude review completed successfully"
          elif [[ "${{ needs.claude-review.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Claude review skipped (expected behavior)"
          else
            echo "‚ùå Claude review encountered issues"
          fi
          
          echo ""
          echo "This workflow complements your optimized CI pipeline:"
          echo "- Leverages existing self-hosted runner infrastructure"
          echo "- Implements cost controls (size limits, selective triggering)"
          echo "- Integrates with fast-checks ‚Üí test-python workflow pattern"