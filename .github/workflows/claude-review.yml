name: Claude Code Review

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened, ready_for_review, synchronize, labeled, closed]

# Cancel in-progress runs for the same PR  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  claude-review:
    name: Claude Code Review
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    # Use GitHub-hosted runner for reliable authentication
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis
          
      - name: Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v0.0.32
        with:
          # Use Claude subscription instead of API key
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Cost optimization settings
          max_turns: "10"             # Allow complete review execution
          timeout_minutes: "20"       # Prevent runaway costs
          
          # Review configuration
          trigger_phrase: "@claude"   # Only respond when mentioned
          
          # Automatic PR review prompt (for pull_request events)
          direct_prompt: |
            Please perform a thorough code review of this pull request. I need you to:
            
            1. Read CLAUDE.md to understand the repository context and guidelines
            2. Identify all changed files in this PR
            3. For each changed file, read the content and analyze for:
               - Performance implications (test timeouts, CI optimization)
               - Package boundary violations (receipt_dynamo vs receipt_label separation)
               - Critical bugs or security issues
               - Architecture alignment issues
            4. Provide a comprehensive review comment with specific findings, line numbers, and actionable recommendations
            
            Important: Do not stop after creating a checklist. Continue working until you have analyzed the actual code changes and provided detailed feedback. Use multiple conversation turns to read files and build up your analysis, then provide a final comprehensive review.
          
          # Comprehensive review guidelines for manual mentions
          custom_instructions: |
            You are reviewing a pull request in a portfolio project with optimized CI/CD. Focus on:

            ## High Priority Issues:
            1. **Performance implications** - especially test timeouts and CI optimization patterns
            2. **Package boundary violations** - strict separation between receipt_dynamo (data layer) and receipt_label (business logic)
            3. **Critical bugs or security issues** - authentication, data validation, error handling
            4. **Architecture alignment** - with existing CI optimization patterns and self-hosted runners

            ## Medium Priority:
            5. **Pattern detection logic** - overlapping matches, race conditions (recent area of focus)
            6. **Cost optimization** - AWS resource usage, API call efficiency
            7. **Test strategy** - integration with optimized test matrix and parallel execution
            8. **DynamoDB best practices** - GSI usage, query patterns, resilience

            ## Skip Commenting On:
            - Minor style issues (handled by auto-formatters)
            - Missing docstrings (unless critical for public APIs)
            - Variable naming (unless very unclear)
            - Type hints (unless missing in critical paths)

            ## Context:
            - Uses optimized CI with self-hosted ARM64 runners
            - Recent 48% CI execution time reduction through test optimization
            - Strict package separation: receipt_dynamo (data) vs receipt_label (business logic)
            - DynamoDB with 4 GSIs for different query patterns
            - Cost-optimized GitHub Actions workflow ($48/month â†’ $5/month target)

            Be concise and actionable. Reference specific lines and suggest concrete improvements.

      - name: Integration status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Claude review workflow completed');
            console.log('Event type:', '${{ github.event_name }}');
            console.log('Review triggered:', '${{ steps.claude-review.outcome }}');

  cleanup-on-merge:
    name: Cleanup Comments on Merge
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Delete Claude comments from merged PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            
            // Find Claude comments
            const claudeComments = comments.filter(comment => 
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('ðŸ¤– Claude')
            );
            
            // Delete all Claude comments
            for (const comment of claudeComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }
            
            console.log(`Deleted ${claudeComments.length} Claude comments from merged PR`);