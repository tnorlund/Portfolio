name: AI Code Reviews
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string

# Ensure only one AI review runs per PR at a time
concurrency:
  group: ai-review-${{ github.event.pull_request.number || github.event.inputs.pr_number }}
  cancel-in-progress: false

jobs:
  fast-validation:
    name: Fast Tests & Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      tests_passed: ${{ steps.tests.outputs.passed }}
      changes_detected: ${{ steps.changes.outputs.detected }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            code:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.tsx'
            config:
              - '**/pyproject.toml'
              - '**/package.json'
              - '**/*.ini'
              - '**/*.yml'
              - '**/*.yaml'

      - name: Set up Python
        if: steps.changes.outputs.code == 'true' || steps.changes.outputs.config == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Run fast syntax/lint checks
        id: tests
        if: steps.changes.outputs.code == 'true' || steps.changes.outputs.config == 'true'
        run: |
          echo "üîç Running fast validation checks..."
          
          # Install minimal dependencies for syntax checking
          pip install --quiet black isort flake8 || echo "::warning::Could not install linting tools"
          
          # Quick syntax validation
          echo "Checking Python syntax..."
          python -m py_compile $(find . -name "*.py" -not -path "./.*" | head -20) || {
            echo "‚ùå Python syntax errors found"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          }
          
          # Quick format check (don't fail, just warn)
          echo "Checking code formatting..."
          black --check --quiet . || echo "::warning::Code formatting issues detected"
          isort --check-only --quiet . || echo "::warning::Import sorting issues detected"
          
          echo "‚úÖ Fast validation passed"
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "detected=true" >> $GITHUB_OUTPUT

      - name: Skip if no relevant changes
        if: steps.changes.outputs.code != 'true' && steps.changes.outputs.config != 'true'
        run: |
          echo "üìã No code changes detected - skipping AI reviews"
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "detected=false" >> $GITHUB_OUTPUT

  wait-for-cursor:
    name: Wait for Cursor Bot Review
    needs: fast-validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.fast-validation.outputs.tests_passed == 'true' && needs.fast-validation.outputs.changes_detected == 'true'
    timeout-minutes: 10
    outputs:
      cursor_completed: ${{ steps.check-cursor.outputs.completed }}
    steps:
      - name: Wait for Cursor Bot
        id: check-cursor
        run: |
          echo "‚è≥ Allowing time for Cursor bot to complete its review..."
          sleep 30  # Give Cursor bot time to start
          echo "completed=true" >> $GITHUB_OUTPUT

  claude-review:
    name: Claude Code Review
    needs: [fast-validation, wait-for-cursor]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.fast-validation.outputs.tests_passed == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.fast-validation.outputs.changes_detected == 'true' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install requests PyGithub click

      - name: Get PR Information
        id: pr-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "üìã Analyzing PR #${PR_NUMBER}"

      - name: Check Budget and Select Model
        id: cost-check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
        run: |
          echo "üí∞ Checking budget and selecting optimal model..."
          
          # Check budget limits
          python scripts/cost_optimizer.py --check-budget
          
          # Get model recommendation
          python scripts/cost_optimizer.py \
            --pr-number "$PR_NUMBER" \
            --repository "${{ github.repository }}" \
            --config ".github/claude-cost-config.json" > model_recommendation.txt
          
          # Extract recommended model
          RECOMMENDED_MODEL=$(grep "Recommended Model:" model_recommendation.txt | cut -d' ' -f3)
          echo "selected_model=${RECOMMENDED_MODEL,,}" >> $GITHUB_OUTPUT
          
          # Check if budget allows review
          if python scripts/cost_optimizer.py --check-budget | grep -q "WITHIN BUDGET"; then
            echo "budget_ok=true" >> $GITHUB_OUTPUT
          else
            echo "budget_ok=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Budget limit reached - skipping Claude review"
          fi
          
          cat model_recommendation.txt

      - name: Run Claude Review Analysis
        id: claude-analysis
        if: steps.cost-check.outputs.budget_ok == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
          FAST_VALIDATION_PASSED: ${{ needs.fast-validation.outputs.tests_passed }}
          CLAUDE_MODEL: ${{ steps.cost-check.outputs.selected_model }}
        run: |
          echo "ü§ñ Starting Claude analysis with model: $CLAUDE_MODEL (fast validation: $FAST_VALIDATION_PASSED)"
          
          python scripts/claude_review_analyzer.py \
            --pr-number "$PR_NUMBER" \
            --repository "${{ github.repository }}" \
            --output-file "claude_review_results.md" \
            --fast-validation-passed "$FAST_VALIDATION_PASSED" \
            --model "$CLAUDE_MODEL"

      - name: Post Claude Review Comment
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
        run: |
          if [ "${{ steps.cost-check.outputs.budget_ok }}" = "false" ]; then
            # Post budget limit message
            echo "# üí∞ Claude Review Skipped - Budget Limit Reached" > budget_message.md
            echo "" >> budget_message.md
            echo "The Claude review was skipped because the monthly or daily budget limit has been reached." >> budget_message.md
            echo "" >> budget_message.md
            echo "$(python scripts/cost_optimizer.py --check-budget)" >> budget_message.md
            echo "" >> budget_message.md
            echo "To continue reviews, either:" >> budget_message.md
            echo "- Wait for the budget to reset" >> budget_message.md  
            echo "- Increase budget limits in \`.github/claude-cost-config.json\`" >> budget_message.md
            echo "- Use manual trigger: \`/claude-review --force\`" >> budget_message.md
            
            python scripts/post_review_comment.py \
              --pr-number "$PR_NUMBER" \
              --repository "${{ github.repository }}" \
              --review-file "budget_message.md"
          elif [ -f "claude_review_results.md" ]; then
            python scripts/post_review_comment.py \
              --pr-number "$PR_NUMBER" \
              --repository "${{ github.repository }}" \
              --review-file "claude_review_results.md"
          else
            echo "‚ö†Ô∏è Claude review results not found"
          fi

      - name: Log Usage and Cost
        if: steps.claude-analysis.conclusion == 'success'
        env:
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
          CLAUDE_MODEL: ${{ steps.cost-check.outputs.selected_model }}
        run: |
          echo "üìä Logging Claude usage for cost tracking..."
          # This would integrate with actual Claude API response to get real token counts
          # For now, we'll estimate based on PR size
          python scripts/cost_optimizer.py \
            --pr-number "$PR_NUMBER" \
            --repository "${{ github.repository }}" \
            --config ".github/claude-cost-config.json"

      - name: Upload Review Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: claude-review-pr-${{ steps.pr-info.outputs.pr_number }}
          path: |
            claude_review_results.md
            cursor_findings.json
          retention-days: 30