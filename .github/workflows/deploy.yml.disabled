name: Deploy to Production
on:
  push:
    branches:
      - main

# Share concurrency group with main workflow to prevent conflicts
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel deploys in progress

jobs:
  # Auto-format any code that slipped through
  format-fix:
    name: Format Fix
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Auto-format code
        run: |
          pip install black isort
          
          # Format all Python code
          black receipt_dynamo receipt_label infra
          isort receipt_dynamo receipt_label infra
          
          # Commit if changes
          if [[ -n $(git diff --name-only) ]]; then
            git config user.email "action@github.com"
            git config user.name "GitHub Action"
            git add -A
            git commit -m "style: auto-format code [skip ci]"
            git push
          fi

  # Quick validation before deployment
  validate:
    name: Validate
    needs: format-fix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Check Python
        run: |
          pip install black mypy
          black --check receipt_dynamo receipt_label infra
      
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Check TypeScript
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run lint
          npm run type-check

  # Run tests in parallel
  test:
    name: Test ${{ matrix.package }}
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [receipt_dynamo, receipt_label, portfolio]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        if: matrix.package != 'portfolio'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Setup Node
        if: matrix.package == 'portfolio'
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'portfolio/package-lock.json'
      
      - name: Test Python package
        if: matrix.package != 'portfolio'
        run: |
          pip install -e "${{ matrix.package }}[test]"
          cd ${{ matrix.package }}
          pytest -n auto --cov=${{ matrix.package }} --cov-report=xml
      
      - name: Test TypeScript
        if: matrix.package == 'portfolio'
        working-directory: portfolio
        run: |
          npm ci --prefer-offline
          npm run test:ci

  # Deploy with Pulumi
  deploy:
    name: Deploy Infrastructure
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environments
        run: |
          # Node for Next.js
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Python for Pulumi
          sudo apt-get install -y python3.12 python3.12-venv python3-pip

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Next.js
        working-directory: portfolio
        run: |
          npm ci
          npm run build

      - name: Deploy with Pulumi
        uses: pulumi/actions@v6
        with:
          command: up
          stack-name: tnorlund/portfolio/prod
          work-dir: infra
          comment-on-pr: false
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Sync to S3 and invalidate CDN
        working-directory: infra
        run: |
          # Get outputs
          BUCKET=$(pulumi stack output cdn_bucket_name)
          DISTRIBUTION=$(pulumi stack output cdn_distribution_id)
          
          # Sync files
          aws s3 sync ../portfolio/out "s3://$BUCKET" \
            --delete \
            --cache-control "public, max-age=3600"
          
          # Invalidate CloudFront
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION" \
            --paths "/*"
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  # Run E2E tests after deployment
  e2e-test:
    name: E2E Tests
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Run E2E tests
        run: |
          pip install -e "receipt_dynamo[test]"
          cd receipt_dynamo
          pytest -m end_to_end --tb=short
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}