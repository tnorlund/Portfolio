[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "receipt_label"
version = "0.1.0"
description = "A Python package for labeling and validating receipt data using the Google Places API"
readme = "README.md"
requires-python = ">=3.12"
license = {file = "LICENSE"}
authors = [
    {name = "Receipt Label Contributors"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  # Core dependencies
  "receipt-dynamo",  # Include receipt_dynamo in the layer
  
  # OpenAI dependencies
  "openai>=1.3.0",
  "openai-agents>=0.0.12",
  
  # LangChain ecosystem for validation system
  "langchain>=0.3.0",
  "langchain-core>=0.3.0",
  "langchain-community>=0.3.0",  # For Ollama and other integrations
  "langgraph>=0.2.0",  # For graph-based workflows
  "langchain-openai>=0.2.0",  # OpenAI integration
  "langchain-ollama>=0.2.0",  # Ollama integration
  "langsmith>=0.1.0",  # Observability and tracing
  
  # HTTP and async support (for Ollama Turbo)
  "httpx>=0.25.0",  # For async HTTP requests to Ollama Turbo
  "python-dotenv>=1.0.0",  # For environment variable management
  
  # Pattern matching and fuzzy logic
  "fuzzywuzzy>=0.18.0",
  "RapidFuzz>=3.13.0",
  
  # Data validation
  "pydantic>=2.0.0",  # For data models and validation
  # numpy removed - use AWS Lambda Layer instead
]
keywords = ["llm", "labeling", "validation"]

[project.optional-dependencies]
# Full dependencies for Docker containers and local development
full = [
  "chromadb>=0.5.0",  # Full ChromaDB with embedded database
  "numpy>=1.24.0",    # For analytics and math operations
  "pinecone>=3.0",    # Legacy Pinecone support (migrating to ChromaDB)
  "ollama>=0.5.0",    # Local Ollama client
  "tiktoken>=0.7.0",  # OpenAI tokenizer
]

# Minimal dependencies for Lambda layers
# Note: numpy available via AWS Lambda Layer
# Note: botocore excluded (provided by Lambda runtime)
# Note: chromadb-client may fail to import in Lambda due to OpenTelemetry issues
#       but this is handled gracefully in the code
lambda = [
  "chromadb-client>=0.5.0",  # Lightweight ChromaDB client (optional - may not work in Lambda)
]

# LangChain-specific extras for advanced features
langchain-extras = [
  "langchain-text-splitters>=0.3.0",  # For document processing
  "langgraph-checkpoint>=2.0.0",  # For graph state persistence
  "langgraph-sdk>=0.1.0",  # For graph SDK features
]

# Ollama-specific dependencies
ollama = [
  "ollama>=0.5.0",  # Ollama Python client
  "httpx[http2]>=0.25.0",  # HTTP/2 support for better streaming
]
test = [
    "pytest>=8.3.0,<9.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "pytest-cov>=6.1.0,<7.0.0",
    "pytest-xdist>=3.6.0,<4.0.0",
    "pytest-timeout>=2.1.0,<3.0.0",
    "pytest-asyncio>=0.24.0,<1.0.0",
    "moto>=5.1.0,<6.0.0",
    "freezegun>=1.5.0,<2.0.0",
]
dev = [
    "black==25.1.0",
    "isort==6.0.1",
    "mypy>=1.16.1",
    "pylint>=3.0.0,<4.0.0",
]

[tool.hatch.build]
exclude = [
  "tests/",
  "test/",
  "**/*.md",
  "**/*.txt",
  "**/*.json",
  "**/*.yaml",
  "**/*.yml",
  "**/*.ini",
  "**/*.cfg",
  "**/*.sh",
  "**/conftest.py",
  "**/pytest.ini",
  "scripts/",
  "**/__pycache__/",
  "**/*.pyc",
  "**/*.pyo",
  "**/*.pyd",
  ".coverage",
  ".pytest_cache/",
  "export_*.py",
  "test_*.py",
]

[tool.hatch.build.targets.wheel]
packages = ["receipt_label"]

[tool.black]
line-length = 79
target-version = ["py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 79

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
python_files = ["test_*.py"]
markers = [
    "unit: Fast, isolated unit tests",
    "integration: Component interaction tests", 
    "end_to_end: Full system tests",
    "unused_in_production: Tests for deprecated/experimental code",
    "slow: Tests that take >5 seconds",
    "fast: Tests that take <1 second", 
    "performance: Performance benchmarking tests",
    "aws: Tests requiring AWS services",
    "chroma: Tests requiring ChromaDB",
    "openai: Tests requiring OpenAI API",
    "pattern_detection: Pattern detection system tests",
    "completion: Completion pipeline tests",
    "embedding: Embedding pipeline tests", 
    "cost_optimization: Cost optimization feature tests"
]

[tool.pylint.format]
max-line-length = 79

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-instance-attributes",
    "too-many-branches",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
]

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "pk", "sk"]

[tool.pylint.design]
max-args = 10
max-locals = 20
