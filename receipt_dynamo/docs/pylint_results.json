[
    {
        "type": "warning",
        "module": "receipt_dynamo.utils.retry_with_backoff",
        "obj": "retry_with_backoff.decorator.wrapper",
        "line": 81,
        "column": 20,
        "endLine": 81,
        "endColumn": 30,
        "path": "receipt_dynamo/utils/retry_with_backoff.py",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "message-id": "W0718"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._word",
        "obj": "_Word",
        "line": 32,
        "column": 0,
        "endLine": 32,
        "endColumn": 11,
        "path": "receipt_dynamo/data/_word.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_label_analysis",
        "obj": "_ReceiptLabelAnalysis",
        "line": 57,
        "column": 0,
        "endLine": 57,
        "endColumn": 27,
        "path": "receipt_dynamo/data/_receipt_label_analysis.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (10/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_label_analysis",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": 28,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt_label_analysis.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_validation_category",
        "obj": "_ReceiptValidationCategory",
        "line": 29,
        "column": 0,
        "endLine": 29,
        "endColumn": 32,
        "path": "receipt_dynamo/data/_receipt_validation_category.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (9/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_validation_category",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": 23,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt_validation_category.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_field",
        "obj": "",
        "line": 448,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_field.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_field",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": 22,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt_field.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._label_count_cache",
        "obj": "_LabelCountCache",
        "line": 30,
        "column": 0,
        "endLine": 30,
        "endColumn": 22,
        "path": "receipt_dynamo/data/_label_count_cache.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._instance",
        "obj": "_Instance",
        "line": 35,
        "column": 0,
        "endLine": 35,
        "endColumn": 15,
        "path": "receipt_dynamo/data/_instance.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (9/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._instance",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": 5,
        "endColumn": 64,
        "path": "receipt_dynamo/data/_instance.py",
        "symbol": "unused-import",
        "message": "Unused validate_last_evaluated_key imported from receipt_dynamo.data._job",
        "message-id": "W0611"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._ocr_routing_decision",
        "obj": "_OCRRoutingDecision",
        "line": 37,
        "column": 0,
        "endLine": 37,
        "endColumn": 25,
        "path": "receipt_dynamo/data/_ocr_routing_decision.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_line_item_analysis",
        "obj": "",
        "line": 303,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_line_item_analysis.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_line_item_analysis",
        "obj": "_ReceiptLineItemAnalysis",
        "line": 42,
        "column": 0,
        "endLine": 42,
        "endColumn": 30,
        "path": "receipt_dynamo/data/_receipt_line_item_analysis.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_line_item_analysis",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": 26,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt_line_item_analysis.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.resilient_dynamo_client",
        "obj": "ResilientDynamoClient",
        "line": 20,
        "column": 0,
        "endLine": 20,
        "endColumn": 27,
        "path": "receipt_dynamo/data/resilient_dynamo_client.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (19/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.resilient_dynamo_client",
        "obj": "ResilientDynamoClient.__init__",
        "line": 31,
        "column": 4,
        "endLine": 31,
        "endColumn": 16,
        "path": "receipt_dynamo/data/resilient_dynamo_client.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (10/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.dynamo_client",
        "obj": "DynamoClient",
        "line": 58,
        "column": 0,
        "endLine": 58,
        "endColumn": 18,
        "path": "receipt_dynamo/data/dynamo_client.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (29/7)",
        "message-id": "R0901"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._letter",
        "obj": "",
        "line": 192,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_letter.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._letter",
        "obj": "",
        "line": 243,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_letter.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._letter",
        "obj": "_Letter",
        "line": 28,
        "column": 0,
        "endLine": 28,
        "endColumn": 13,
        "path": "receipt_dynamo/data/_letter.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._letter",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": 17,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_letter.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._ocr_job",
        "obj": "",
        "line": 124,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_ocr_job.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._ocr_job",
        "obj": "_OCRJob",
        "line": 34,
        "column": 0,
        "endLine": 34,
        "endColumn": 13,
        "path": "receipt_dynamo/data/_ocr_job.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (9/7)",
        "message-id": "R0901"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._job_status",
        "obj": "_JobStatus._getJobWithStatus",
        "line": 242,
        "column": 4,
        "endLine": 242,
        "endColumn": 25,
        "path": "receipt_dynamo/data/_job_status.py",
        "symbol": "invalid-name",
        "message": "Method name \"_getJobWithStatus\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._job_dependency",
        "obj": "",
        "line": 138,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_job_dependency.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._job_dependency",
        "obj": "",
        "line": 177,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_job_dependency.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._job_resource",
        "obj": "_JobResource.update_job_resource_status",
        "line": 172,
        "column": 12,
        "endLine": 192,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_job_resource.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._queue",
        "obj": "",
        "line": 282,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_queue.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._queue",
        "obj": "",
        "line": 325,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_queue.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._job_log",
        "obj": "",
        "line": 201,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_job_log.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_line",
        "obj": "_ReceiptLine.list_receipt_lines_by_embedding_status",
        "line": 321,
        "column": 12,
        "endLine": 338,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_receipt_line.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._image",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": 20,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_image.py",
        "symbol": "unused-import",
        "message": "Unused CommonValidationMixin imported from receipt_dynamo.data.base_operations",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_validation_summary",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_validation_summary.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_validation_summary",
        "obj": "",
        "line": 3,
        "column": 0,
        "endLine": 12,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_validation_summary.py",
        "symbol": "unused-import",
        "message": "Unused QueryInputTypeDef imported from receipt_dynamo.data.base_operations",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 269,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 321,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 358,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "_ReceiptChatGPTValidation",
        "line": 39,
        "column": 0,
        "endLine": 39,
        "endColumn": 31,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 3,
        "column": 0,
        "endLine": 3,
        "endColumn": 43,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "unused-import",
        "message": "Unused ClientError imported from botocore.exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": 26,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": 26,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBServerError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": 26,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBThroughputError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": 26,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBValidationError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": 26,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "unused-import",
        "message": "Unused OperationError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_chatgpt_validation",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": 33,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt_chatgpt_validation.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_section",
        "obj": "_ReceiptSection.delete_receipt_section",
        "line": 189,
        "column": 12,
        "endLine": 199,
        "endColumn": 21,
        "path": "receipt_dynamo/data/_receipt_section.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
        "message-id": "R1720"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_section",
        "obj": "_ReceiptSection.get_receipt_sections_from_receipt",
        "line": 328,
        "column": 12,
        "endLine": 339,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_receipt_section.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_section",
        "obj": "_ReceiptSection.list_receipt_sections",
        "line": 419,
        "column": 12,
        "endLine": 436,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_receipt_section.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": 33,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_metadata",
        "obj": "",
        "line": 295,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_metadata.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_metadata",
        "obj": "",
        "line": 302,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_metadata.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_metadata",
        "obj": "",
        "line": 305,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_metadata.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_metadata",
        "obj": "_ReceiptMetadata",
        "line": 35,
        "column": 0,
        "endLine": 35,
        "endColumn": 22,
        "path": "receipt_dynamo/data/_receipt_metadata.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (9/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_metadata",
        "obj": "_ReceiptMetadata.get_receipt_metadatas_by_confidence",
        "line": 635,
        "column": 12,
        "endLine": 653,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_receipt_metadata.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_metadata",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": 26,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt_metadata.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.import_image",
        "obj": "import_image",
        "line": 49,
        "column": 9,
        "endLine": 49,
        "endColumn": 29,
        "path": "receipt_dynamo/data/import_image.py",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "message-id": "W1514"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._places_cache",
        "obj": "_PlacesCache",
        "line": 35,
        "column": 0,
        "endLine": 35,
        "endColumn": 18,
        "path": "receipt_dynamo/data/_places_cache.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._places_cache",
        "obj": "_PlacesCache.delete_places_caches",
        "line": 194,
        "column": 16,
        "endLine": 215,
        "endColumn": 28,
        "path": "receipt_dynamo/data/_places_cache.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._places_cache",
        "obj": "_PlacesCache.invalidate_old_cache_items",
        "line": 321,
        "column": 8,
        "endLine": 321,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_places_cache.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'datetime' from outer scope (line 1)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._places_cache",
        "obj": "_PlacesCache.invalidate_old_cache_items",
        "line": 321,
        "column": 8,
        "endLine": 321,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_places_cache.py",
        "symbol": "reimported",
        "message": "Reimport 'datetime' (imported line 1)",
        "message-id": "W0404"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._places_cache",
        "obj": "_PlacesCache.invalidate_old_cache_items",
        "line": 321,
        "column": 8,
        "endLine": 321,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_places_cache.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (datetime.datetime, datetime.timedelta, datetime.timezone)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._line",
        "obj": "",
        "line": 234,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_line.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._line",
        "obj": "_Line",
        "line": 28,
        "column": 0,
        "endLine": 28,
        "endColumn": 11,
        "path": "receipt_dynamo/data/_line.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (9/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._line",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": 18,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_line.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 254,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 353,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "_ReceiptLetter",
        "line": 39,
        "column": 0,
        "endLine": 39,
        "endColumn": 20,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (9/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "_ReceiptLetter.get_receipt_letter",
        "line": 201,
        "column": 4,
        "endLine": 201,
        "endColumn": 26,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": 4,
        "endColumn": 43,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "unused-import",
        "message": "Unused ClientError imported from botocore.exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": 18,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "unused-import",
        "message": "Unused QueryInputTypeDef imported from receipt_dynamo.data.base_operations",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": 27,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": 27,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBServerError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": 27,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBThroughputError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": 27,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBValidationError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": 27,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "unused-import",
        "message": "Unused OperationError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_letter",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": 30,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt_letter.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_structure_analysis",
        "obj": "",
        "line": 259,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_structure_analysis.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_structure_analysis",
        "obj": "",
        "line": 274,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_structure_analysis.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_structure_analysis",
        "obj": "",
        "line": 374,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_structure_analysis.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_structure_analysis",
        "obj": "_ReceiptStructureAnalysis",
        "line": 43,
        "column": 0,
        "endLine": 43,
        "endColumn": 31,
        "path": "receipt_dynamo/data/_receipt_structure_analysis.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_structure_analysis",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": 26,
        "endColumn": 58,
        "path": "receipt_dynamo/data/_receipt_structure_analysis.py",
        "symbol": "unused-import",
        "message": "Unused assert_valid_uuid imported from receipt_dynamo.entities.util",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "",
        "line": 74,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "",
        "line": 80,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "",
        "line": 358,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "",
        "line": 471,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "",
        "line": 512,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "",
        "line": 514,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel",
        "line": 53,
        "column": 0,
        "endLine": 53,
        "endColumn": 23,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_label_error",
        "line": 104,
        "column": 8,
        "endLine": 111,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'EntityValidationError' from outer scope (line 21)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_label_error",
        "line": 104,
        "column": 8,
        "endLine": 111,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "reimported",
        "message": "Reimport 'EntityValidationError' (imported line 21)",
        "message-id": "W0404"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_label_error",
        "line": 104,
        "column": 8,
        "endLine": 111,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (receipt_dynamo.data.shared_exceptions.DynamoDBError, receipt_dynamo.data.shared_exceptions.DynamoDBServerError, receipt_dynamo.data.shared_exceptions.DynamoDBThroughputError, receipt_dynamo.data.shared_exceptions.DynamoDBValidationError, receipt_dynamo.data.shared_exceptions.EntityAlreadyExistsError, receipt_dynamo.data.shared_exceptions.EntityValidationError)",
        "message-id": "C0415"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_label_error",
        "line": 114,
        "column": 8,
        "endLine": 140,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_label_error",
        "line": 104,
        "column": 8,
        "endLine": 111,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "unused-import",
        "message": "Unused EntityValidationError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel.add_receipt_word_labels",
        "line": 159,
        "column": 8,
        "endLine": 162,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (receipt_dynamo.data.base_operations.PutRequestTypeDef, receipt_dynamo.data.base_operations.WriteRequestTypeDef)",
        "message-id": "C0415"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_labels_error",
        "line": 174,
        "column": 8,
        "endLine": 180,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'EntityValidationError' from outer scope (line 21)",
        "message-id": "W0621"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_labels_error",
        "line": 174,
        "column": 8,
        "endLine": 180,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "reimported",
        "message": "Reimport 'EntityValidationError' (imported line 21)",
        "message-id": "W0404"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_labels_error",
        "line": 174,
        "column": 8,
        "endLine": 180,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (receipt_dynamo.data.shared_exceptions.DynamoDBError, receipt_dynamo.data.shared_exceptions.DynamoDBServerError, receipt_dynamo.data.shared_exceptions.DynamoDBThroughputError, receipt_dynamo.data.shared_exceptions.DynamoDBValidationError, receipt_dynamo.data.shared_exceptions.EntityValidationError)",
        "message-id": "C0415"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_labels_error",
        "line": 183,
        "column": 8,
        "endLine": 198,
        "endColumn": 78,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel._handle_add_receipt_word_labels_error",
        "line": 174,
        "column": 8,
        "endLine": 180,
        "endColumn": 9,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "unused-import",
        "message": "Unused EntityValidationError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_word_label",
        "obj": "_ReceiptWordLabel.get_receipt_word_label",
        "line": 282,
        "column": 4,
        "endLine": 282,
        "endColumn": 30,
        "path": "receipt_dynamo/data/_receipt_word_label.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word",
        "obj": "",
        "line": 163,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word",
        "obj": "",
        "line": 170,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_word",
        "obj": "",
        "line": 325,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_word",
        "obj": "_ReceiptWord",
        "line": 39,
        "column": 0,
        "endLine": 39,
        "endColumn": 18,
        "path": "receipt_dynamo/data/_receipt_word.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_word",
        "obj": "_ReceiptWord.list_receipt_words_from_receipt",
        "line": 418,
        "column": 12,
        "endLine": 435,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_receipt_word.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._receipt_word",
        "obj": "",
        "line": 449,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_word.py",
        "symbol": "implicit-str-concat",
        "message": "Implicit string concatenation found in call",
        "message-id": "W1404"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._embedding_batch_result",
        "obj": "_EmbeddingBatchResult",
        "line": 51,
        "column": 0,
        "endLine": 51,
        "endColumn": 27,
        "path": "receipt_dynamo/data/_embedding_batch_result.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (9/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._embedding_batch_result",
        "obj": "_EmbeddingBatchResult.get_embedding_batch_result",
        "line": 228,
        "column": 4,
        "endLine": 228,
        "endColumn": 34,
        "path": "receipt_dynamo/data/_embedding_batch_result.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._job_checkpoint",
        "obj": "",
        "line": 252,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_job_checkpoint.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._job_checkpoint",
        "obj": "_JobCheckpoint.delete_job_checkpoint",
        "line": 323,
        "column": 12,
        "endLine": 336,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_job_checkpoint.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._job_checkpoint",
        "obj": "_JobCheckpoint.list_all_job_checkpoints",
        "line": 419,
        "column": 12,
        "endLine": 437,
        "endColumn": 24,
        "path": "receipt_dynamo/data/_job_checkpoint.py",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1720"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_validation_result",
        "obj": "",
        "line": 271,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_validation_result.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._receipt_validation_result",
        "obj": "",
        "line": 396,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_receipt_validation_result.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_validation_result",
        "obj": "_ReceiptValidationResult",
        "line": 28,
        "column": 0,
        "endLine": 28,
        "endColumn": 30,
        "path": "receipt_dynamo/data/_receipt_validation_result.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._receipt_validation_result",
        "obj": "_ReceiptValidationResult.list_receipt_validation_results_for_field",
        "line": 327,
        "column": 4,
        "endLine": 327,
        "endColumn": 49,
        "path": "receipt_dynamo/data/_receipt_validation_result.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._completion_batch_result",
        "obj": "_CompletionBatchResult",
        "line": 55,
        "column": 0,
        "endLine": 55,
        "endColumn": 28,
        "path": "receipt_dynamo/data/_completion_batch_result.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (9/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._completion_batch_result",
        "obj": "_CompletionBatchResult.get_completion_batch_result",
        "line": 137,
        "column": 4,
        "endLine": 137,
        "endColumn": 35,
        "path": "receipt_dynamo/data/_completion_batch_result.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._completion_batch_result",
        "obj": "",
        "line": 3,
        "column": 0,
        "endLine": 3,
        "endColumn": 43,
        "path": "receipt_dynamo/data/_completion_batch_result.py",
        "symbol": "unused-import",
        "message": "Unused ClientError imported from botocore.exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._completion_batch_result",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": 20,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_completion_batch_result.py",
        "symbol": "unused-import",
        "message": "Unused BatchOperationError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._completion_batch_result",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": 20,
        "endColumn": 1,
        "path": "receipt_dynamo/data/_completion_batch_result.py",
        "symbol": "unused-import",
        "message": "Unused OperationError imported from receipt_dynamo.data.shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._ai_usage_metric",
        "obj": "_AIUsageMetric.batch_put_ai_usage_metrics",
        "line": 58,
        "column": 8,
        "endLine": 104,
        "endColumn": 37,
        "path": "receipt_dynamo/data/_ai_usage_metric.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (6/5)",
        "message-id": "R1702"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data._ai_usage_metric",
        "obj": "_AIUsageMetric.get_ai_usage_metric.<lambda>",
        "line": 166,
        "column": 27,
        "endLine": 166,
        "endColumn": 78,
        "path": "receipt_dynamo/data/_ai_usage_metric.py",
        "symbol": "unnecessary-lambda",
        "message": "Lambda may not be necessary",
        "message-id": "W0108"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data._batch_summary",
        "obj": "",
        "line": 343,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/_batch_summary.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data._batch_summary",
        "obj": "_BatchSummary",
        "line": 51,
        "column": 0,
        "endLine": 51,
        "endColumn": 19,
        "path": "receipt_dynamo/data/_batch_summary.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "",
        "line": 147,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "message-id": "C0304"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "WriteOperationsMixin",
        "line": 39,
        "column": 4,
        "endLine": 39,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "QueryOperationsMixin",
        "line": 56,
        "column": 4,
        "endLine": 56,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "FullDynamoEntityMixin",
        "line": 60,
        "column": 0,
        "endLine": 60,
        "endColumn": 27,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "FullDynamoEntityMixin",
        "line": 76,
        "column": 4,
        "endLine": 76,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "SimpleDynamoEntityMixin",
        "line": 93,
        "column": 4,
        "endLine": 93,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "CacheDynamoEntityMixin",
        "line": 111,
        "column": 4,
        "endLine": 111,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "ReadOptimizedDynamoEntityMixin",
        "line": 129,
        "column": 4,
        "endLine": 129,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "StandardDynamoEntityMixin",
        "line": 147,
        "column": 4,
        "endLine": 147,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 49,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unused-import",
        "message": "Unused Any imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 49,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unused-import",
        "message": "Unused List imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins_v2",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 49,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins_v2.py",
        "symbol": "unused-import",
        "message": "Unused Type imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.mixins",
        "obj": "",
        "line": 514,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.mixins",
        "obj": "",
        "line": 551,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.mixins",
        "obj": "QueryByParentMixin._query_by_parent",
        "line": 497,
        "column": 4,
        "endLine": 497,
        "endColumn": 24,
        "path": "receipt_dynamo/data/base_operations/mixins.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (9/5)",
        "message-id": "R0917"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.mixins",
        "obj": "CommonValidationMixin",
        "line": 571,
        "column": 8,
        "endLine": 571,
        "endColumn": 61,
        "path": "receipt_dynamo/data/base_operations/mixins.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (shared_exceptions.EntityValidationError)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.mixins",
        "obj": "CommonValidationMixin._validate_image_id",
        "line": 586,
        "column": 8,
        "endLine": 586,
        "endColumn": 61,
        "path": "receipt_dynamo/data/base_operations/mixins.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (shared_exceptions.EntityValidationError)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.mixins",
        "obj": "CommonValidationMixin._validate_image_id",
        "line": 587,
        "column": 8,
        "endLine": 587,
        "endColumn": 54,
        "path": "receipt_dynamo/data/base_operations/mixins.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (entities.util.assert_valid_uuid)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.mixins",
        "obj": "CommonValidationMixin._validate_receipt_id",
        "line": 606,
        "column": 8,
        "endLine": 606,
        "endColumn": 61,
        "path": "receipt_dynamo/data/base_operations/mixins.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (shared_exceptions.EntityValidationError)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.mixins",
        "obj": "CommonValidationMixin._validate_pagination_key",
        "line": 627,
        "column": 8,
        "endLine": 627,
        "endColumn": 61,
        "path": "receipt_dynamo/data/base_operations/mixins.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (shared_exceptions.EntityValidationError)",
        "message-id": "C0415"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.error_config",
        "obj": "",
        "line": 131,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/error_config.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.error_config",
        "obj": "",
        "line": 236,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/error_config.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.error_config",
        "obj": "",
        "line": 266,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/error_config.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 51,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 53,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 57,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 60,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 61,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 62,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 64,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 67,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 70,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 87,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 94,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 96,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 100,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 102,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 106,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 109,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 110,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 111,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 113,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 115,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "message-id": "C0304"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 47,
        "column": 36,
        "endLine": 47,
        "endColumn": 87,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _ensure_validator_initialized of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 48,
        "column": 18,
        "endLine": 48,
        "endColumn": 51,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _add_entity of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 49,
        "column": 21,
        "endLine": 49,
        "endColumn": 57,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _update_entity of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 50,
        "column": 21,
        "endLine": 50,
        "endColumn": 57,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _delete_entity of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 53,
        "column": 35,
        "endLine": 53,
        "endColumn": 84,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _batch_write_with_retry_dict of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 54,
        "column": 29,
        "endLine": 54,
        "endColumn": 72,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _prepare_batch_request of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 55,
        "column": 26,
        "endLine": 55,
        "endColumn": 66,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _split_into_batches of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 56,
        "column": 26,
        "endLine": 56,
        "endColumn": 66,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _add_entities_batch of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 59,
        "column": 28,
        "endLine": 59,
        "endColumn": 78,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _transact_write_items of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 60,
        "column": 36,
        "endLine": 60,
        "endColumn": 94,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _prepare_transact_update_item of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 61,
        "column": 33,
        "endLine": 61,
        "endColumn": 88,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _prepare_transact_put_item of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 62,
        "column": 36,
        "endLine": 62,
        "endColumn": 94,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _transact_write_with_chunking of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 63,
        "column": 23,
        "endLine": 63,
        "endColumn": 68,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _update_entities of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 66,
        "column": 21,
        "endLine": 66,
        "endColumn": 52,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _query_by_type of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 69,
        "column": 23,
        "endLine": 69,
        "endColumn": 58,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _query_by_parent of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 72,
        "column": 25,
        "endLine": 72,
        "endColumn": 65,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _validate_image_id of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 73,
        "column": 27,
        "endLine": 73,
        "endColumn": 69,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _validate_receipt_id of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedFullDynamoEntityMixin",
        "line": 74,
        "column": 31,
        "endLine": 74,
        "endColumn": 77,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _validate_pagination_key of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 96,
        "column": 36,
        "endLine": 96,
        "endColumn": 87,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _ensure_validator_initialized of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 97,
        "column": 18,
        "endLine": 97,
        "endColumn": 51,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _add_entity of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 98,
        "column": 21,
        "endLine": 98,
        "endColumn": 57,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _update_entity of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 99,
        "column": 21,
        "endLine": 99,
        "endColumn": 57,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _delete_entity of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 102,
        "column": 35,
        "endLine": 102,
        "endColumn": 84,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _batch_write_with_retry_dict of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 103,
        "column": 29,
        "endLine": 103,
        "endColumn": 72,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _prepare_batch_request of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 104,
        "column": 26,
        "endLine": 104,
        "endColumn": 66,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _split_into_batches of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 105,
        "column": 26,
        "endLine": 105,
        "endColumn": 66,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _add_entities_batch of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 108,
        "column": 28,
        "endLine": 108,
        "endColumn": 78,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _transact_write_items of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 109,
        "column": 36,
        "endLine": 109,
        "endColumn": 94,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _prepare_transact_update_item of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 110,
        "column": 33,
        "endLine": 110,
        "endColumn": 88,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _prepare_transact_put_item of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 111,
        "column": 36,
        "endLine": 111,
        "endColumn": 94,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _transact_write_with_chunking of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 112,
        "column": 23,
        "endLine": 112,
        "endColumn": 68,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _update_entities of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "FlattenedStandardDynamoEntityMixin",
        "line": 115,
        "column": 21,
        "endLine": 115,
        "endColumn": 52,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "protected-access",
        "message": "Access to a protected member _query_by_type of a client class",
        "message-id": "W0212"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 82,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "unused-import",
        "message": "Unused Callable imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 82,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "unused-import",
        "message": "Unused Dict imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 82,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "unused-import",
        "message": "Unused List imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 82,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "unused-import",
        "message": "Unused Optional imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 82,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "unused-import",
        "message": "Unused Tuple imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 82,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "unused-import",
        "message": "Unused Type imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_mixins",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": 10,
        "endColumn": 50,
        "path": "receipt_dynamo/data/base_operations/flattened_mixins.py",
        "symbol": "unused-import",
        "message": "Unused handle_dynamodb_errors imported from error_handlers",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.standard_dynamo_mixin",
        "obj": "StandardDynamoMixin",
        "line": 47,
        "column": 4,
        "endLine": 47,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/standard_dynamo_mixin.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.error_context",
        "obj": "ErrorContextExtractor.extract_entity_context",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 30,
        "path": "receipt_dynamo/data/base_operations/error_context.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (10/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.error_context",
        "obj": "ErrorContextExtractor.extract_entity_type",
        "line": 50,
        "column": 4,
        "endLine": 50,
        "endColumn": 27,
        "path": "receipt_dynamo/data/base_operations/error_context.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 50,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 52,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 53,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 60,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 67,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 73,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 75,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 82,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 88,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 89,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 94,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 98,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 100,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 108,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 120,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 122,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 134,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 138,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 145,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 157,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 161,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 168,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 180,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 184,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 191,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 208,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 211,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 213,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 215,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 221,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 226,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 230,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 233,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 236,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 238,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 247,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 254,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 266,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 268,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 270,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 285,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 293,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 297,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 302,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 307,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 310,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 318,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 319,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 324,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 326,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 345,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "message-id": "C0303"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 367,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "message-id": "C0304"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "FlattenedStandardMixin._validate_image_id",
        "line": 96,
        "column": 8,
        "endLine": 96,
        "endColumn": 54,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (entities.util.assert_valid_uuid)",
        "message-id": "C0415"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "FlattenedStandardMixin._get_entity",
        "line": 197,
        "column": 8,
        "endLine": 197,
        "endColumn": 29,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'entity_class'",
        "message-id": "W0613"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "FlattenedStandardMixin._query_entities",
        "line": 271,
        "column": 4,
        "endLine": 271,
        "endColumn": 23,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (9/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "FlattenedStandardMixin._query_by_parent",
        "line": 347,
        "column": 4,
        "endLine": 347,
        "endColumn": 24,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 19,
        "endColumn": 1,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "unused-import",
        "message": "Unused Union imported from typing",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": 29,
        "endColumn": 1,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBError imported from shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": 29,
        "endColumn": 1,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBServerError imported from shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": 29,
        "endColumn": 1,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "unused-import",
        "message": "Unused DynamoDBThroughputError imported from shared_exceptions",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": 36,
        "endColumn": 1,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "unused-import",
        "message": "Unused DeleteRequestTypeDef imported from types",
        "message-id": "W0611"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.flattened_standard_mixin",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": 36,
        "endColumn": 1,
        "path": "receipt_dynamo/data/base_operations/flattened_standard_mixin.py",
        "symbol": "unused-import",
        "message": "Unused PutRequestTypeDef imported from types",
        "message-id": "W0611"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins",
        "obj": "",
        "line": 2,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins",
        "obj": "",
        "line": 73,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins.py",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "message-id": "C0304"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins",
        "obj": "CRUDOperationsMixin",
        "line": 30,
        "column": 4,
        "endLine": 30,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins",
        "obj": "QueryOperationsMixin",
        "line": 43,
        "column": 4,
        "endLine": 43,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins",
        "obj": "StandardDynamoOperationsMixin",
        "line": 46,
        "column": 0,
        "endLine": 46,
        "endColumn": 35,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins",
        "obj": "StandardDynamoOperationsMixin",
        "line": 60,
        "column": 4,
        "endLine": 60,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.data.base_operations.consolidated_mixins",
        "obj": "ReadOnlyDynamoOperationsMixin",
        "line": 73,
        "column": 4,
        "endLine": 73,
        "endColumn": 8,
        "path": "receipt_dynamo/data/base_operations/consolidated_mixins.py",
        "symbol": "unnecessary-pass",
        "message": "Unnecessary pass statement",
        "message-id": "W0107"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.error_handlers",
        "obj": "",
        "line": 210,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/error_handlers.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.error_handlers",
        "obj": "",
        "line": 346,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/error_handlers.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.error_handlers",
        "obj": "",
        "line": 370,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/error_handlers.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.error_handlers",
        "obj": "",
        "line": 371,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/error_handlers.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.data.base_operations.error_handlers",
        "obj": "",
        "line": 502,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/data/base_operations/error_handlers.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.error_handlers",
        "obj": "ErrorHandler._handle_resource_not_found",
        "line": 168,
        "column": 4,
        "endLine": 168,
        "endColumn": 34,
        "path": "receipt_dynamo/data/base_operations/error_handlers.py",
        "symbol": "too-many-statements",
        "message": "Too many statements (100/50)",
        "message-id": "R0915"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.base",
        "obj": "DynamoDBBaseOperations._get_entity",
        "line": 264,
        "column": 4,
        "endLine": 264,
        "endColumn": 19,
        "path": "receipt_dynamo/data/base_operations/base.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.base",
        "obj": "DynamoDBBaseOperations._get_entity",
        "line": 302,
        "column": 8,
        "endLine": 309,
        "endColumn": 23,
        "path": "receipt_dynamo/data/base_operations/base.py",
        "symbol": "no-else-return",
        "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
        "message-id": "R1705"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.data.base_operations.base",
        "obj": "DynamoDBBaseOperations._query_entities",
        "line": 348,
        "column": 4,
        "endLine": 348,
        "endColumn": 23,
        "path": "receipt_dynamo/data/base_operations/base.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (10/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "",
        "line": 68,
        "column": 13,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "fixme",
        "message": "TODO: Add max_concurrent_jobs and priority as needed",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "",
        "line": 181,
        "column": 13,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "fixme",
        "message": "TODO: Set position based on queue position logic if needed",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "",
        "line": 201,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "fixme",
        "message": "TODO: Implement get_queue_job in data layer",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "",
        "line": 216,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "fixme",
        "message": "TODO: Implement update_queue_job in data layer",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "",
        "line": 318,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "fixme",
        "message": "TODO: QueueJob entity doesn't have status tracking attributes",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "",
        "line": 340,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "fixme",
        "message": "TODO: QueueJob entity doesn't have status tracking attributes",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "",
        "line": 360,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "fixme",
        "message": "TODO: QueueJob entity doesn't have status tracking attributes",
        "message-id": "W0511"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "QueueService.create_queue",
        "line": 37,
        "column": 4,
        "endLine": 37,
        "endColumn": 20,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (7/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "QueueService.create_queue",
        "line": 40,
        "column": 8,
        "endLine": 40,
        "endColumn": 17,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'name'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "QueueService.create_queue",
        "line": 42,
        "column": 8,
        "endLine": 42,
        "endColumn": 23,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'created_by'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "QueueService.create_queue",
        "line": 43,
        "column": 8,
        "endLine": 43,
        "endColumn": 42,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'metadata'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "QueueService.create_queue",
        "line": 44,
        "column": 8,
        "endLine": 44,
        "endColumn": 38,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'tags'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "QueueService.list_queues_by_user",
        "line": 133,
        "column": 8,
        "endLine": 133,
        "endColumn": 20,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'user_id'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "QueueService.add_job_to_queue",
        "line": 157,
        "column": 8,
        "endLine": 157,
        "endColumn": 42,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'metadata'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.queue_service",
        "obj": "QueueService.claim_job",
        "line": 303,
        "column": 39,
        "endLine": 303,
        "endColumn": 55,
        "path": "receipt_dynamo/services/queue_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'instance_id'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "",
        "line": 73,
        "column": 27,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "fixme",
        "message": "TODO: Get actual GPU count based on instance type",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "",
        "line": 75,
        "column": 42,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "fixme",
        "message": "TODO: Get actual launch time",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "",
        "line": 78,
        "column": 29,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "fixme",
        "message": "TODO: Determine if this is a spot instance",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "",
        "line": 79,
        "column": 39,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "fixme",
        "message": "TODO: Get actual health status",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "",
        "line": 130,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "fixme",
        "message": "TODO: Instance entity doesn't have last_seen attribute",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "",
        "line": 149,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "fixme",
        "message": "TODO: Instance entity doesn't have last_seen attribute",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "",
        "line": 224,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "fixme",
        "message": "TODO: list_instances_by_type is not implemented in data layer",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "",
        "line": 350,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "fixme",
        "message": "TODO: InstanceJob entity doesn't have metadata attribute",
        "message-id": "W0511"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.register_instance",
        "line": 38,
        "column": 4,
        "endLine": 38,
        "endColumn": 25,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (10/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.register_instance",
        "line": 42,
        "column": 8,
        "endLine": 42,
        "endColumn": 19,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'region'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.register_instance",
        "line": 44,
        "column": 8,
        "endLine": 44,
        "endColumn": 21,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'hostname'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.register_instance",
        "line": 47,
        "column": 8,
        "endLine": 47,
        "endColumn": 42,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'metadata'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.register_instance",
        "line": 48,
        "column": 8,
        "endLine": 48,
        "endColumn": 38,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'tags'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.assign_job_to_instance",
        "line": 270,
        "column": 8,
        "endLine": 270,
        "endColumn": 42,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'metadata'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.update_instance_job_status",
        "line": 330,
        "column": 8,
        "endLine": 330,
        "endColumn": 30,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'message'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.list_jobs_for_instance",
        "line": 375,
        "column": 8,
        "endLine": 375,
        "endColumn": 29,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'status'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.instance_service",
        "obj": "InstanceService.list_instances_for_job",
        "line": 399,
        "column": 8,
        "endLine": 399,
        "endColumn": 29,
        "path": "receipt_dynamo/services/instance_service.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'status'",
        "message-id": "W0613"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.services.job_service",
        "obj": "JobService",
        "line": 21,
        "column": 0,
        "endLine": 21,
        "endColumn": 16,
        "path": "receipt_dynamo/services/job_service.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (19/7)",
        "message-id": "R0901"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.services.job_service",
        "obj": "JobService.create_job",
        "line": 43,
        "column": 4,
        "endLine": 43,
        "endColumn": 18,
        "path": "receipt_dynamo/services/job_service.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (8/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_service",
        "obj": "JobService.get_job",
        "line": 88,
        "column": 4,
        "endLine": 88,
        "endColumn": 15,
        "path": "receipt_dynamo/services/job_service.py",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method 'get_job'",
        "message-id": "W0246"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_service",
        "obj": "JobService.update_job",
        "line": 98,
        "column": 4,
        "endLine": 98,
        "endColumn": 18,
        "path": "receipt_dynamo/services/job_service.py",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method 'update_job'",
        "message-id": "W0246"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_service",
        "obj": "JobService.delete_job",
        "line": 102,
        "column": 4,
        "endLine": 102,
        "endColumn": 18,
        "path": "receipt_dynamo/services/job_service.py",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method 'delete_job'",
        "message-id": "W0246"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.resource_operations",
        "obj": "",
        "line": 49,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/job_operations/resource_operations.py",
        "symbol": "fixme",
        "message": "TODO: Implement get_job_resources in _JobResource base class",
        "message-id": "W0511"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.services.job_operations.resource_operations",
        "obj": "JobResourceOperations.add_job_resource_with_params",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 36,
        "path": "receipt_dynamo/services/job_operations/resource_operations.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.resource_operations",
        "obj": "JobResourceOperations.get_job_resources",
        "line": 47,
        "column": 32,
        "endLine": 47,
        "endColumn": 43,
        "path": "receipt_dynamo/services/job_operations/resource_operations.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'job_id'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.metric_operations",
        "obj": "",
        "line": 45,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/job_operations/metric_operations.py",
        "symbol": "fixme",
        "message": "TODO: Implement get_job_metrics in _JobMetric base class",
        "message-id": "W0511"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.services.job_operations.metric_operations",
        "obj": "JobMetricOperations.add_job_metric_with_params",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 34,
        "path": "receipt_dynamo/services/job_operations/metric_operations.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.metric_operations",
        "obj": "JobMetricOperations.add_job_metric_with_params",
        "line": 19,
        "column": 8,
        "endLine": 19,
        "endColumn": 38,
        "path": "receipt_dynamo/services/job_operations/metric_operations.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'tags'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.metric_operations",
        "obj": "JobMetricOperations.get_job_metrics",
        "line": 43,
        "column": 30,
        "endLine": 43,
        "endColumn": 41,
        "path": "receipt_dynamo/services/job_operations/metric_operations.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'job_id'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.status_operations",
        "obj": "",
        "line": 45,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/job_operations/status_operations.py",
        "symbol": "fixme",
        "message": "TODO: Implement get_job_status_history in _JobStatus base class",
        "message-id": "W0511"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.services.job_operations.status_operations",
        "obj": "JobStatusOperations",
        "line": 12,
        "column": 0,
        "endLine": 12,
        "endColumn": 25,
        "path": "receipt_dynamo/services/job_operations/status_operations.py",
        "symbol": "too-many-ancestors",
        "message": "Too many ancestors (8/7)",
        "message-id": "R0901"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.dependency_operations",
        "obj": "",
        "line": 44,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/job_operations/dependency_operations.py",
        "symbol": "fixme",
        "message": "TODO: Implement get_job_dependencies in _JobDependency base class",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.dependency_operations",
        "obj": "",
        "line": 49,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/job_operations/dependency_operations.py",
        "symbol": "fixme",
        "message": "TODO: Implement get_dependent_jobs in _JobDependency base class",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.dependency_operations",
        "obj": "",
        "line": 131,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/job_operations/dependency_operations.py",
        "symbol": "fixme",
        "message": "TODO: Implement actual artifact checking logic",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.dependency_operations",
        "obj": "JobDependencyOperations.add_job_dependency_with_params",
        "line": 18,
        "column": 8,
        "endLine": 18,
        "endColumn": 17,
        "path": "receipt_dynamo/services/job_operations/dependency_operations.py",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'type'",
        "message-id": "W0622"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.dependency_operations",
        "obj": "JobDependencyOperations.get_job_dependencies",
        "line": 42,
        "column": 35,
        "endLine": 42,
        "endColumn": 46,
        "path": "receipt_dynamo/services/job_operations/dependency_operations.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'job_id'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.dependency_operations",
        "obj": "JobDependencyOperations.get_dependent_jobs",
        "line": 47,
        "column": 33,
        "endLine": 47,
        "endColumn": 44,
        "path": "receipt_dynamo/services/job_operations/dependency_operations.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'job_id'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.dependency_operations",
        "obj": "JobDependencyOperations._check_artifact_exists",
        "line": 121,
        "column": 37,
        "endLine": 121,
        "endColumn": 45,
        "path": "receipt_dynamo/services/job_operations/dependency_operations.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'job'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.dependency_operations",
        "obj": "JobDependencyOperations._check_artifact_exists",
        "line": 121,
        "column": 47,
        "endLine": 121,
        "endColumn": 65,
        "path": "receipt_dynamo/services/job_operations/dependency_operations.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'artifact_path'",
        "message-id": "W0613"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.checkpoint_operations",
        "obj": "",
        "line": 42,
        "column": 28,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/job_operations/checkpoint_operations.py",
        "symbol": "fixme",
        "message": "TODO: Get actual checkpoint size",
        "message-id": "W0511"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.checkpoint_operations",
        "obj": "",
        "line": 52,
        "column": 9,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/services/job_operations/checkpoint_operations.py",
        "symbol": "fixme",
        "message": "TODO: Implement get_job_checkpoints in _JobCheckpoint base class",
        "message-id": "W0511"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.services.job_operations.checkpoint_operations",
        "obj": "JobCheckpointOperations.add_job_checkpoint_with_params",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 38,
        "path": "receipt_dynamo/services/job_operations/checkpoint_operations.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (8/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.services.job_operations.checkpoint_operations",
        "obj": "JobCheckpointOperations.get_job_checkpoints",
        "line": 50,
        "column": 34,
        "endLine": 50,
        "endColumn": 45,
        "path": "receipt_dynamo/services/job_operations/checkpoint_operations.py",
        "symbol": "unused-argument",
        "message": "Unused argument 'job_id'",
        "message-id": "W0613"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.label_count_cache",
        "obj": "LabelCountCache.__init__",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/label_count_cache.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (9/5)",
        "message-id": "R0917"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.entities.places_cache",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": 8,
        "endColumn": 12,
        "path": "receipt_dynamo/entities/places_cache.py",
        "symbol": "invalid-name",
        "message": "Class name \"SEARCH_TYPES\" doesn't conform to PascalCase naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.places_cache",
        "obj": "PlacesCache.__init__",
        "line": 36,
        "column": 4,
        "endLine": 36,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/places_cache.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (10/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.places_cache",
        "obj": "PlacesCache.__init__",
        "line": 71,
        "column": 16,
        "endLine": 71,
        "endColumn": 66,
        "path": "receipt_dynamo/entities/places_cache.py",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "message-id": "W1309"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.entities.places_cache",
        "obj": "PlacesCache._pad_search_value",
        "line": 131,
        "column": 12,
        "endLine": 131,
        "endColumn": 26,
        "path": "receipt_dynamo/entities/places_cache.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (hashlib)",
        "message-id": "C0415"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.instance",
        "obj": "Instance.__init__",
        "line": 31,
        "column": 4,
        "endLine": 31,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/instance.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (10/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.label_metadata",
        "obj": "LabelMetadata.__init__",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/label_metadata.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (9/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_category",
        "obj": "ReceiptValidationCategory.__init__",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_validation_category.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (10/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_category",
        "obj": "ReceiptValidationCategory._python_to_dynamo",
        "line": 109,
        "column": 4,
        "endLine": 109,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/receipt_validation_category.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_category",
        "obj": "ReceiptValidationCategory._dynamo_to_python",
        "line": 184,
        "column": 4,
        "endLine": 184,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/receipt_validation_category.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (9/6)",
        "message-id": "R0911"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.receipt_validation_category",
        "obj": "ReceiptValidationCategory._dynamo_to_python",
        "line": 209,
        "column": 12,
        "endLine": 209,
        "endColumn": 15,
        "path": "receipt_dynamo/entities/receipt_validation_category.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'key'",
        "message-id": "W0612"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_category",
        "obj": "dynamo_to_python",
        "line": 232,
        "column": 0,
        "endLine": 232,
        "endColumn": 20,
        "path": "receipt_dynamo/entities/receipt_validation_category.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (13/6)",
        "message-id": "R0911"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.receipt_validation_category",
        "obj": "dynamo_to_python",
        "line": 277,
        "column": 8,
        "endLine": 277,
        "endColumn": 11,
        "path": "receipt_dynamo/entities/receipt_validation_category.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'key'",
        "message-id": "W0612"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_category",
        "obj": "item_to_receipt_validation_category",
        "line": 282,
        "column": 0,
        "endLine": 282,
        "endColumn": 39,
        "path": "receipt_dynamo/entities/receipt_validation_category.py",
        "symbol": "too-many-statements",
        "message": "Too many statements (61/50)",
        "message-id": "R0915"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_label_analysis",
        "obj": "ReceiptLabelAnalysis.__init__",
        "line": 30,
        "column": 4,
        "endLine": 30,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_label_analysis.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (8/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_label_analysis",
        "obj": "item_to_receipt_label_analysis",
        "line": 320,
        "column": 4,
        "endLine": 398,
        "endColumn": 41,
        "path": "receipt_dynamo/entities/receipt_label_analysis.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (7/5)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.batch_summary",
        "obj": "BatchSummary.__init__",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/batch_summary.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (8/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.batch_summary",
        "obj": "BatchSummary.to_dict",
        "line": 129,
        "column": 15,
        "endLine": 129,
        "endColumn": 38,
        "path": "receipt_dynamo/entities/batch_summary.py",
        "symbol": "unnecessary-comprehension",
        "message": "Unnecessary use of a comprehension, use dict(self) instead.",
        "message-id": "R1721"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_status",
        "obj": "JobStatus.__init__",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/job_status.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (8/5)",
        "message-id": "R0917"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.entities.receipt_structure_analysis",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/receipt_structure_analysis.py",
        "symbol": "too-many-lines",
        "message": "Too many lines in module (1243/1000)",
        "message-id": "C0302"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.receipt_structure_analysis",
        "obj": "",
        "line": 1106,
        "column": 13,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/receipt_structure_analysis.py",
        "symbol": "fixme",
        "message": "TODO: Use proper logging instead of print",
        "message-id": "W0511"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_structure_analysis",
        "obj": "ReceiptSection.__init__",
        "line": 218,
        "column": 4,
        "endLine": 218,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_structure_analysis.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (9/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_structure_analysis",
        "obj": "ReceiptStructureAnalysis.__init__",
        "line": 477,
        "column": 4,
        "endLine": 477,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_structure_analysis.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (12/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_structure_analysis",
        "obj": "item_to_receipt_structure_analysis",
        "line": 989,
        "column": 4,
        "endLine": 1107,
        "endColumn": 20,
        "path": "receipt_dynamo/entities/receipt_structure_analysis.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (6/5)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_structure_analysis",
        "obj": "item_to_receipt_structure_analysis",
        "line": 989,
        "column": 4,
        "endLine": 1107,
        "endColumn": 20,
        "path": "receipt_dynamo/entities/receipt_structure_analysis.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (7/5)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_structure_analysis",
        "obj": "item_to_receipt_structure_analysis",
        "line": 989,
        "column": 4,
        "endLine": 1107,
        "endColumn": 20,
        "path": "receipt_dynamo/entities/receipt_structure_analysis.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (6/5)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_structure_analysis",
        "obj": "item_to_receipt_structure_analysis",
        "line": 950,
        "column": 0,
        "endLine": 950,
        "endColumn": 38,
        "path": "receipt_dynamo/entities/receipt_structure_analysis.py",
        "symbol": "too-many-statements",
        "message": "Too many statements (134/50)",
        "message-id": "R0915"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.entities.util",
        "obj": "",
        "line": 482,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/util.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "receipt_dynamo.entities.util",
        "obj": "assert_valid_uuid",
        "line": 239,
        "column": 4,
        "endLine": 239,
        "endColumn": 75,
        "path": "receipt_dynamo/entities/util.py",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (receipt_dynamo.data.shared_exceptions.EntityValidationError)",
        "message-id": "C0415"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_metric",
        "obj": "JobMetric.__init__",
        "line": 35,
        "column": 4,
        "endLine": 35,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/job_metric.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (8/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_metric",
        "obj": "JobMetric._to_dynamodb_value",
        "line": 210,
        "column": 4,
        "endLine": 210,
        "endColumn": 26,
        "path": "receipt_dynamo/entities/job_metric.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_metric",
        "obj": "_parse_dynamodb_value",
        "line": 394,
        "column": 0,
        "endLine": 394,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/job_metric.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job",
        "obj": "Job.__init__",
        "line": 33,
        "column": 4,
        "endLine": 33,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/job.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (11/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job",
        "obj": "Job._to_dynamodb_value",
        "line": 204,
        "column": 4,
        "endLine": 204,
        "endColumn": 26,
        "path": "receipt_dynamo/entities/job.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job",
        "obj": "_parse_dynamodb_value",
        "line": 425,
        "column": 0,
        "endLine": 425,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/job.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (8/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_dependency",
        "obj": "JobDependency.__init__",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/job_dependency.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.job_dependency",
        "obj": "JobDependency.__init__",
        "line": 32,
        "column": 8,
        "endLine": 32,
        "endColumn": 17,
        "path": "receipt_dynamo/entities/job_dependency.py",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'type'",
        "message-id": "W0622"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.job_dependency",
        "obj": "item_to_job_dependency",
        "line": 257,
        "column": 8,
        "endLine": 257,
        "endColumn": 12,
        "path": "receipt_dynamo/entities/job_dependency.py",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'type'",
        "message-id": "W0622"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_log",
        "obj": "JobLog.__init__",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/job_log.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (7/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_chatgpt_validation",
        "obj": "ReceiptChatGPTValidation.__init__",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_chatgpt_validation.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (11/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_chatgpt_validation",
        "obj": "ReceiptChatGPTValidation._python_to_dynamo",
        "line": 98,
        "column": 4,
        "endLine": 98,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/receipt_chatgpt_validation.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_chatgpt_validation",
        "obj": "ReceiptChatGPTValidation._dynamo_to_python",
        "line": 168,
        "column": 4,
        "endLine": 168,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/receipt_chatgpt_validation.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (8/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_summary",
        "obj": "ReceiptValidationSummary.__init__",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_validation_summary.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (11/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_summary",
        "obj": "ReceiptValidationSummary.__init__",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_validation_summary.py",
        "symbol": "too-many-statements",
        "message": "Too many statements (52/50)",
        "message-id": "R0915"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_word",
        "obj": "ReceiptWord.warp_transform",
        "line": 261,
        "column": 4,
        "endLine": 261,
        "endColumn": 22,
        "path": "receipt_dynamo/entities/receipt_word.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (14/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.queue_job",
        "obj": "QueueJob.__init__",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/queue_job.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_result",
        "obj": "ReceiptValidationResult.__init__",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_validation_result.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (13/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.receipt_validation_result",
        "obj": "ReceiptValidationResult.__init__",
        "line": 21,
        "column": 8,
        "endLine": 21,
        "endColumn": 17,
        "path": "receipt_dynamo/entities/receipt_validation_result.py",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'type'",
        "message-id": "W0622"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_result",
        "obj": "ReceiptValidationResult.__init__",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_validation_result.py",
        "symbol": "too-many-statements",
        "message": "Too many statements (53/50)",
        "message-id": "R0915"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_result",
        "obj": "ReceiptValidationResult._python_to_dynamo",
        "line": 137,
        "column": 4,
        "endLine": 137,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/receipt_validation_result.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_validation_result",
        "obj": "ReceiptValidationResult._dynamo_to_python",
        "line": 238,
        "column": 4,
        "endLine": 238,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/receipt_validation_result.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (9/6)",
        "message-id": "R0911"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.receipt_validation_result",
        "obj": "ReceiptValidationResult._dynamo_to_python",
        "line": 263,
        "column": 12,
        "endLine": 263,
        "endColumn": 15,
        "path": "receipt_dynamo/entities/receipt_validation_result.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'key'",
        "message-id": "W0612"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_letter",
        "obj": "ReceiptLetter.warp_transform",
        "line": 271,
        "column": 4,
        "endLine": 271,
        "endColumn": 22,
        "path": "receipt_dynamo/entities/receipt_letter.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (14/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.label_hygiene_result",
        "obj": "LabelHygieneResult.__init__",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/label_hygiene_result.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (11/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_section",
        "obj": "ReceiptSection.__init__",
        "line": 34,
        "column": 4,
        "endLine": 34,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_section.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.receipt_section",
        "obj": "ReceiptSection.__init__",
        "line": 80,
        "column": 12,
        "endLine": 80,
        "endColumn": 22,
        "path": "receipt_dynamo/entities/receipt_section.py",
        "symbol": "self-assigning-variable",
        "message": "Assigning the same variable 'created_at' to itself",
        "message-id": "W0127"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_line_item_analysis",
        "obj": "ReceiptLineItemAnalysis.__init__",
        "line": 43,
        "column": 4,
        "endLine": 43,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_line_item_analysis.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (18/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_line_item_analysis",
        "obj": "ReceiptLineItemAnalysis.__init__",
        "line": 43,
        "column": 4,
        "endLine": 43,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_line_item_analysis.py",
        "symbol": "too-many-statements",
        "message": "Too many statements (64/50)",
        "message-id": "R0915"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_line_item_analysis",
        "obj": "ReceiptLineItemAnalysis.to_item",
        "line": 239,
        "column": 4,
        "endLine": 239,
        "endColumn": 15,
        "path": "receipt_dynamo/entities/receipt_line_item_analysis.py",
        "symbol": "too-many-statements",
        "message": "Too many statements (51/50)",
        "message-id": "R0915"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_line",
        "obj": "ReceiptLine.warp_transform",
        "line": 223,
        "column": 4,
        "endLine": 223,
        "endColumn": 22,
        "path": "receipt_dynamo/entities/receipt_line.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (14/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.instance_job",
        "obj": "InstanceJob.__init__",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/instance_job.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.instance_job",
        "obj": "InstanceJob._to_dynamodb_value",
        "line": 156,
        "column": 4,
        "endLine": 156,
        "endColumn": 26,
        "path": "receipt_dynamo/entities/instance_job.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.instance_job",
        "obj": "_parse_dynamodb_value",
        "line": 347,
        "column": 0,
        "endLine": 347,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/instance_job.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (8/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_checkpoint",
        "obj": "JobCheckpoint.__init__",
        "line": 31,
        "column": 4,
        "endLine": 31,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/job_checkpoint.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (12/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_checkpoint",
        "obj": "JobCheckpoint._to_dynamodb_value",
        "line": 191,
        "column": 4,
        "endLine": 191,
        "endColumn": 26,
        "path": "receipt_dynamo/entities/job_checkpoint.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_checkpoint",
        "obj": "_parse_dynamodb_value",
        "line": 336,
        "column": 0,
        "endLine": 336,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/job_checkpoint.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (8/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.rwl_queue",
        "obj": "Queue.__init__",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/rwl_queue.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (7/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_resource",
        "obj": "JobResource.__init__",
        "line": 33,
        "column": 4,
        "endLine": 33,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/job_resource.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (11/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_resource",
        "obj": "JobResource._to_dynamodb_value",
        "line": 222,
        "column": 4,
        "endLine": 222,
        "endColumn": 26,
        "path": "receipt_dynamo/entities/job_resource.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.job_resource",
        "obj": "_parse_dynamodb_value",
        "line": 395,
        "column": 0,
        "endLine": 395,
        "endColumn": 25,
        "path": "receipt_dynamo/entities/job_resource.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_field",
        "obj": "ReceiptField.__init__",
        "line": 34,
        "column": 4,
        "endLine": 34,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/receipt_field.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (7/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.receipt_metadata",
        "obj": "ReceiptMetadata._get_high_quality_matched_fields",
        "line": 209,
        "column": 20,
        "endLine": 215,
        "endColumn": 55,
        "path": "receipt_dynamo/entities/receipt_metadata.py",
        "symbol": "too-many-boolean-expressions",
        "message": "Too many boolean expressions in if statement (6/5)",
        "message-id": "R0916"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.receipt_metadata",
        "obj": "ReceiptMetadata._get_high_quality_matched_fields",
        "line": 183,
        "column": 20,
        "endLine": 183,
        "endColumn": 21,
        "path": "receipt_dynamo/entities/receipt_metadata.py",
        "symbol": "unused-variable",
        "message": "Unused variable 'i'",
        "message-id": "W0612"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.receipt_metadata",
        "obj": "ReceiptMetadata.gsi3_key",
        "line": 294,
        "column": 28,
        "endLine": 294,
        "endColumn": 50,
        "path": "receipt_dynamo/entities/receipt_metadata.py",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "message-id": "W1309"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.ai_usage_metric",
        "obj": "AIUsageMetric._to_dynamodb_value",
        "line": 202,
        "column": 11,
        "endLine": 202,
        "endColumn": 61,
        "path": "receipt_dynamo/entities/ai_usage_metric.py",
        "symbol": "consider-merging-isinstance",
        "message": "Consider merging these isinstance calls to isinstance(value, (float, int))",
        "message-id": "R1701"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.ai_usage_metric",
        "obj": "AIUsageMetric._to_dynamodb_value",
        "line": 196,
        "column": 4,
        "endLine": 196,
        "endColumn": 26,
        "path": "receipt_dynamo/entities/ai_usage_metric.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.ai_usage_metric",
        "obj": "AIUsageMetric._from_dynamodb_value",
        "line": 215,
        "column": 4,
        "endLine": 215,
        "endColumn": 28,
        "path": "receipt_dynamo/entities/ai_usage_metric.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.ai_usage_metric",
        "obj": "AIUsageMetric.query_by_service_date",
        "line": 291,
        "column": 24,
        "endLine": 291,
        "endColumn": 74,
        "path": "receipt_dynamo/entities/ai_usage_metric.py",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "message-id": "W1309"
    },
    {
        "type": "warning",
        "module": "receipt_dynamo.entities.embedding_batch_result",
        "obj": "validate_pinecone_id_format",
        "line": 39,
        "column": 11,
        "endLine": 39,
        "endColumn": 20,
        "path": "receipt_dynamo/entities/embedding_batch_result.py",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "message-id": "W0718"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.embedding_batch_result",
        "obj": "validate_pinecone_id_format",
        "line": 12,
        "column": 0,
        "endLine": 12,
        "endColumn": 31,
        "path": "receipt_dynamo/entities/embedding_batch_result.py",
        "symbol": "too-many-return-statements",
        "message": "Too many return statements (7/6)",
        "message-id": "R0911"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.embedding_batch_result",
        "obj": "EmbeddingBatchResult.__init__",
        "line": 45,
        "column": 4,
        "endLine": 45,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/embedding_batch_result.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (10/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.geometry_base",
        "obj": "GeometryMixin.warp_affine",
        "line": 246,
        "column": 4,
        "endLine": 246,
        "endColumn": 19,
        "path": "receipt_dynamo/entities/geometry_base.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (7/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.geometry_base",
        "obj": "GeometryMixin.warp_affine_normalized_forward",
        "line": 287,
        "column": 4,
        "endLine": 287,
        "endColumn": 38,
        "path": "receipt_dynamo/entities/geometry_base.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (12/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.geometry_base",
        "obj": "GeometryMixin.warp_transform",
        "line": 350,
        "column": 4,
        "endLine": 350,
        "endColumn": 22,
        "path": "receipt_dynamo/entities/geometry_base.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (14/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "CompletionBatchResult.__init__",
        "line": 18,
        "column": 4,
        "endLine": 18,
        "endColumn": 16,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (10/5)",
        "message-id": "R0917"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.__init__:[134:219]\n==receipt_dynamo:[76:161]\n    \"AIUsageMetric\",\n    \"BatchSummary\",\n    \"CompletionBatchResult\",\n    \"EmbeddingBatchResult\",\n    \"Image\",\n    \"ImageDetails\",\n    \"Instance\",\n    \"InstanceJob\",\n    \"Job\",\n    \"JobCheckpoint\",\n    \"JobDependency\",\n    \"JobLog\",\n    \"JobMetric\",\n    \"JobResource\",\n    \"JobStatus\",\n    \"LabelCountCache\",\n    \"LabelHygieneResult\",\n    \"LabelMetadata\",\n    \"Letter\",\n    \"Line\",\n    \"OCRJob\",\n    \"OCRRoutingDecision\",\n    \"PlacesCache\",\n    \"Queue\",\n    \"QueueJob\",\n    \"Receipt\",\n    \"ReceiptAnalysis\",\n    \"ReceiptChatGPTValidation\",\n    \"ReceiptDetails\",\n    \"ReceiptField\",\n    \"ReceiptLabelAnalysis\",\n    \"ReceiptLetter\",\n    \"ReceiptLine\",\n    \"ReceiptLineItemAnalysis\",\n    \"ReceiptMetadata\",\n    \"ReceiptSection\",\n    \"ReceiptStructureAnalysis\",\n    \"ReceiptValidationCategory\",\n    \"ReceiptValidationResult\",\n    \"ReceiptValidationSummary\",\n    \"ReceiptWord\",\n    \"ReceiptWordLabel\",\n    \"Word\",\n    # Item conversion functions\n    \"item_to_ai_usage_metric\",\n    \"item_to_batch_summary\",\n    \"item_to_completion_batch_result\",\n    \"item_to_embedding_batch_result\",\n    \"item_to_image\",\n    \"item_to_instance\",\n    \"item_to_instance_job\",\n    \"item_to_job\",\n    \"item_to_job_checkpoint\",\n    \"item_to_job_dependency\",\n    \"item_to_job_log\",\n    \"item_to_job_metric\",\n    \"item_to_job_resource\",\n    \"item_to_job_status\",\n    \"item_to_label_count_cache\",\n    \"item_to_label_hygiene_result\",\n    \"item_to_label_metadata\",\n    \"item_to_letter\",\n    \"item_to_line\",\n    \"item_to_ocr_job\",\n    \"item_to_ocr_routing_decision\",\n    \"item_to_places_cache\",\n    \"item_to_queue\",\n    \"item_to_queue_job\",\n    \"item_to_receipt\",\n    \"item_to_receipt_chat_gpt_validation\",\n    \"item_to_receipt_field\",\n    \"item_to_receipt_label_analysis\",\n    \"item_to_receipt_letter\",\n    \"item_to_receipt_line\",\n    \"item_to_receipt_line_item_analysis\",\n    \"item_to_receipt_metadata\",\n    \"item_to_receipt_section\",\n    \"item_to_receipt_structure_analysis\",\n    \"item_to_receipt_validation_category\",\n    \"item_to_receipt_validation_result\",\n    \"item_to_receipt_validation_summary\",\n    \"item_to_receipt_word\",\n    \"item_to_receipt_word_label\",\n    \"item_to_word\",\n    # Utility functions",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.image:[223:290]\n==receipt_dynamo.entities.receipt:[257:324]\n            \"sha256\": {\"S\": self.sha256} if self.sha256 else {\"NULL\": True},\n            \"cdn_s3_bucket\": (\n                {\"S\": self.cdn_s3_bucket}\n                if self.cdn_s3_bucket\n                else {\"NULL\": True}\n            ),\n            \"cdn_s3_key\": (\n                {\"S\": self.cdn_s3_key} if self.cdn_s3_key else {\"NULL\": True}\n            ),\n            \"cdn_webp_s3_key\": (\n                {\"S\": self.cdn_webp_s3_key}\n                if self.cdn_webp_s3_key\n                else {\"NULL\": True}\n            ),\n            \"cdn_avif_s3_key\": (\n                {\"S\": self.cdn_avif_s3_key}\n                if self.cdn_avif_s3_key\n                else {\"NULL\": True}\n            ),\n            # Thumbnail versions\n            \"cdn_thumbnail_s3_key\": (\n                {\"S\": self.cdn_thumbnail_s3_key}\n                if self.cdn_thumbnail_s3_key\n                else {\"NULL\": True}\n            ),\n            \"cdn_thumbnail_webp_s3_key\": (\n                {\"S\": self.cdn_thumbnail_webp_s3_key}\n                if self.cdn_thumbnail_webp_s3_key\n                else {\"NULL\": True}\n            ),\n            \"cdn_thumbnail_avif_s3_key\": (\n                {\"S\": self.cdn_thumbnail_avif_s3_key}\n                if self.cdn_thumbnail_avif_s3_key\n                else {\"NULL\": True}\n            ),\n            # Small versions\n            \"cdn_small_s3_key\": (\n                {\"S\": self.cdn_small_s3_key}\n                if self.cdn_small_s3_key\n                else {\"NULL\": True}\n            ),\n            \"cdn_small_webp_s3_key\": (\n                {\"S\": self.cdn_small_webp_s3_key}\n                if self.cdn_small_webp_s3_key\n                else {\"NULL\": True}\n            ),\n            \"cdn_small_avif_s3_key\": (\n                {\"S\": self.cdn_small_avif_s3_key}\n                if self.cdn_small_avif_s3_key\n                else {\"NULL\": True}\n            ),\n            # Medium versions\n            \"cdn_medium_s3_key\": (\n                {\"S\": self.cdn_medium_s3_key}\n                if self.cdn_medium_s3_key\n                else {\"NULL\": True}\n            ),\n            \"cdn_medium_webp_s3_key\": (\n                {\"S\": self.cdn_medium_webp_s3_key}\n                if self.cdn_medium_webp_s3_key\n                else {\"NULL\": True}\n            ),\n            \"cdn_medium_avif_s3_key\": (\n                {\"S\": self.cdn_medium_avif_s3_key}\n                if self.cdn_medium_avif_s3_key\n                else {\"NULL\": True}\n            ),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.image:[85:148]\n==receipt_dynamo.entities.receipt:[107:176]\n        if self.sha256 and not isinstance(self.sha256, str):\n            raise ValueError(\"sha256 must be a string\")\n\n        if self.cdn_s3_bucket and not isinstance(self.cdn_s3_bucket, str):\n            raise ValueError(\"cdn_s3_bucket must be a string\")\n\n        if self.cdn_s3_key and not isinstance(self.cdn_s3_key, str):\n            raise ValueError(\"cdn_s3_key must be a string\")\n\n        if self.cdn_webp_s3_key and not isinstance(self.cdn_webp_s3_key, str):\n            raise ValueError(\"cdn_webp_s3_key must be a string\")\n\n        if self.cdn_avif_s3_key and not isinstance(self.cdn_avif_s3_key, str):\n            raise ValueError(\"cdn_avif_s3_key must be a string\")\n\n        # Validate thumbnail fields\n        if self.cdn_thumbnail_s3_key and not isinstance(\n            self.cdn_thumbnail_s3_key, str\n        ):\n            raise ValueError(\"cdn_thumbnail_s3_key must be a string\")\n\n        if self.cdn_thumbnail_webp_s3_key and not isinstance(\n            self.cdn_thumbnail_webp_s3_key, str\n        ):\n            raise ValueError(\"cdn_thumbnail_webp_s3_key must be a string\")\n\n        if self.cdn_thumbnail_avif_s3_key and not isinstance(\n            self.cdn_thumbnail_avif_s3_key, str\n        ):\n            raise ValueError(\"cdn_thumbnail_avif_s3_key must be a string\")\n\n        # Validate small fields\n        if self.cdn_small_s3_key and not isinstance(\n            self.cdn_small_s3_key, str\n        ):\n            raise ValueError(\"cdn_small_s3_key must be a string\")\n\n        if self.cdn_small_webp_s3_key and not isinstance(\n            self.cdn_small_webp_s3_key, str\n        ):\n            raise ValueError(\"cdn_small_webp_s3_key must be a string\")\n\n        if self.cdn_small_avif_s3_key and not isinstance(\n            self.cdn_small_avif_s3_key, str\n        ):\n            raise ValueError(\"cdn_small_avif_s3_key must be a string\")\n\n        # Validate medium fields\n        if self.cdn_medium_s3_key and not isinstance(\n            self.cdn_medium_s3_key, str\n        ):\n            raise ValueError(\"cdn_medium_s3_key must be a string\")\n\n        if self.cdn_medium_webp_s3_key and not isinstance(\n            self.cdn_medium_webp_s3_key, str\n        ):\n            raise ValueError(\"cdn_medium_webp_s3_key must be a string\")\n\n        if self.cdn_medium_avif_s3_key and not isinstance(\n            self.cdn_medium_avif_s3_key, str\n        ):\n            raise ValueError(\"cdn_medium_avif_s3_key must be a string\")\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance_job:[322:373]\n==receipt_dynamo.entities.job:[400:451]\n    result: Dict[str, Any] = {}\n    for k, v in dynamodb_map.items():\n        if \"M\" in v:\n            result[k] = _parse_dynamodb_map(v[\"M\"])\n        elif \"L\" in v:\n            result[k] = [_parse_dynamodb_value(item) for item in v[\"L\"]]\n        elif \"S\" in v:\n            result[k] = v[\"S\"]\n        elif \"N\" in v:\n            # Try to convert to int first, then float if that fails\n            try:\n                result[k] = int(v[\"N\"])\n            except ValueError:\n                result[k] = float(v[\"N\"])\n        elif \"BOOL\" in v:\n            result[k] = v[\"BOOL\"]\n        elif \"NULL\" in v:\n            result[k] = None\n        else:\n            # Default fallback\n            result[k] = str(v)\n    return result\n\n\ndef _parse_dynamodb_value(dynamodb_value: Dict) -> Any:\n    \"\"\"Parses a DynamoDB value to a Python value.\n\n    Args:\n        dynamodb_value (Dict): The DynamoDB value to parse.\n\n    Returns:\n        Any: The parsed Python value.\n    \"\"\"\n    if \"M\" in dynamodb_value:\n        return _parse_dynamodb_map(dynamodb_value[\"M\"])\n    if \"L\" in dynamodb_value:\n        return [_parse_dynamodb_value(item) for item in dynamodb_value[\"L\"]]\n    if \"S\" in dynamodb_value:\n        return dynamodb_value[\"S\"]\n    if \"N\" in dynamodb_value:\n        # Try to convert to int first, then float if that fails\n        try:\n            return int(dynamodb_value[\"N\"])\n        except ValueError:\n            return float(dynamodb_value[\"N\"])\n    if \"BOOL\" in dynamodb_value:\n        return dynamodb_value[\"BOOL\"]\n    if \"NULL\" in dynamodb_value:\n        return None\n    # Default fallback\n    return str(dynamodb_value)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance_job:[122:185]\n==receipt_dynamo.entities.job_resource:[188:251]\n            }\n\n        return item\n\n    def _dict_to_dynamodb_map(self, d: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Converts a Python dictionary to a DynamoDB map.\n\n        Args:\n            d (Dict): The dictionary to convert.\n\n        Returns:\n            Dict: The DynamoDB map representation.\n        \"\"\"\n        result: Dict[str, Any] = {}\n        for k, v in d.items():\n            if isinstance(v, dict):\n                result[k] = {\"M\": self._dict_to_dynamodb_map(v)}\n            elif isinstance(v, list):\n                result[k] = {\n                    \"L\": [self._to_dynamodb_value(item) for item in v]\n                }\n            elif isinstance(v, str):\n                result[k] = {\"S\": v}\n            elif isinstance(v, (int, float)):\n                result[k] = {\"N\": str(v)}\n            elif isinstance(v, bool):\n                result[k] = {\"BOOL\": v}\n            elif v is None:\n                result[k] = {\"NULL\": True}\n            else:\n                result[k] = {\"S\": str(v)}\n        return result\n\n    def _to_dynamodb_value(self, v: Any) -> Dict[str, Any]:\n        \"\"\"Converts a Python value to a DynamoDB value.\n\n        Args:\n            v (Any): The value to convert.\n\n        Returns:\n            Dict: The DynamoDB value representation.\n        \"\"\"\n        if isinstance(v, dict):\n            return {\"M\": self._dict_to_dynamodb_map(v)}\n        if isinstance(v, list):\n            return {\"L\": [self._to_dynamodb_value(item) for item in v]}\n        if isinstance(v, str):\n            return {\"S\": v}\n        if isinstance(v, (int, float)):\n            return {\"N\": str(v)}\n        if isinstance(v, bool):\n            return {\"BOOL\": v}\n        if v is None:\n            return {\"NULL\": True}\n        return {\"S\": str(v)}\n\n    def __repr__(self) -> str:\n        \"\"\"Returns a string representation of the JobResource object.\n\n        Returns:\n            str: A string representation of the JobResource object.\n        \"\"\"\n        return (",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[172:233]\n==receipt_dynamo.entities.job_metric:[178:239]\n        return item\n\n    def _dict_to_dynamodb_map(self, d: Dict) -> Dict:\n        \"\"\"Converts a Python dictionary to a DynamoDB map.\n\n        Args:\n            d (Dict): The dictionary to convert.\n\n        Returns:\n            Dict: The DynamoDB map representation.\n        \"\"\"\n        result: Dict[str, Any] = {}\n        for k, v in d.items():\n            if isinstance(v, dict):\n                result[k] = {\"M\": self._dict_to_dynamodb_map(v)}\n            elif isinstance(v, list):\n                result[k] = {\n                    \"L\": [self._to_dynamodb_value(item) for item in v]\n                }\n            elif isinstance(v, str):\n                result[k] = {\"S\": v}\n            elif isinstance(v, (int, float)):\n                result[k] = {\"N\": str(v)}\n            elif isinstance(v, bool):\n                result[k] = {\"BOOL\": v}\n            elif v is None:\n                result[k] = {\"NULL\": True}\n            else:\n                result[k] = {\"S\": str(v)}\n        return result\n\n    def _to_dynamodb_value(self, v: Any) -> Dict:\n        \"\"\"Converts a Python value to a DynamoDB value.\n\n        Args:\n            v (Any): The value to convert.\n\n        Returns:\n            Dict: The DynamoDB value representation.\n        \"\"\"\n        if isinstance(v, dict):\n            return {\"M\": self._dict_to_dynamodb_map(v)}\n        if isinstance(v, list):\n            return {\"L\": [self._to_dynamodb_value(item) for item in v]}\n        if isinstance(v, str):\n            return {\"S\": v}\n        if isinstance(v, (int, float)):\n            return {\"N\": str(v)}\n        if isinstance(v, bool):\n            return {\"BOOL\": v}\n        if v is None:\n            return {\"NULL\": True}\n        return {\"S\": str(v)}\n\n    def __repr__(self) -> str:\n        \"\"\"Returns a string representation of the Job object.\n\n        Returns:\n            str: A string representation of the Job object.\n        \"\"\"\n        return (",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[360:417]\n==receipt_dynamo.entities.receipt_line:[304:361]\n                )\n\n            x_old_px = (b1 * a22 - b2 * a12) / det\n            y_old_px = (a11 * b2 - a21 * b1) / det\n\n            # 3) Convert old pixel coords -> old normalized coords in [0..1]\n            corner[\"x\"] = x_old_px / src_width\n            corner[\"y\"] = y_old_px / src_height\n\n            if flip_y:\n                # If the old/original system also had Y=0 at top, do the final\n                # flip:\n                corner[\"y\"] = 1.0 - corner[\"y\"]\n\n        # 4) Recompute bounding box + angle\n        xs = [pt[\"x\"] for pt in corners]\n        ys = [pt[\"y\"] for pt in corners]\n        self.bounding_box[\"x\"] = min(xs)\n        self.bounding_box[\"y\"] = min(ys)\n        self.bounding_box[\"width\"] = max(xs) - min(xs)\n        self.bounding_box[\"height\"] = max(ys) - min(ys)\n\n        dx = self.top_right[\"x\"] - self.top_left[\"x\"]\n        dy = self.top_right[\"y\"] - self.top_left[\"y\"]\n        angle_radians = atan2(dy, dx)\n        self.angle_radians = angle_radians\n        self.angle_degrees = angle_radians * 180.0 / pi\n\n\ndef item_to_receipt_letter(item: Dict[str, Any]) -> ReceiptLetter:\n    \"\"\"\n    Converts a DynamoDB item to a ReceiptLetter object.\n\n    Args:\n        item (dict): The DynamoDB item to convert.\n\n    Returns:\n        ReceiptLetter: The ReceiptLetter object represented by the DynamoDB\n        item.\n\n    Raises:\n        ValueError: When the item format is invalid or required keys are\n        missing.\n    \"\"\"\n    required_keys = {\n        \"PK\",\n        \"SK\",\n        \"text\",\n        \"bounding_box\",\n        \"top_right\",\n        \"top_left\",\n        \"bottom_right\",\n        \"bottom_left\",\n        \"angle_degrees\",\n        \"angle_radians\",\n        \"confidence\",\n    }",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[234:278]\n==receipt_dynamo.entities.line:[186:228]\n                self.text,\n                tuple(self.bounding_box.items()),\n                tuple(self.top_right.items()),\n                tuple(self.top_left.items()),\n                tuple(self.bottom_right.items()),\n                tuple(self.bottom_left.items()),\n                self.angle_degrees,\n                self.angle_radians,\n                self.confidence,\n            )\n        )\n\n\ndef item_to_letter(item: Dict[str, Any]) -> Letter:\n    \"\"\"Converts a DynamoDB item to a Letter object.\n\n    Args:\n        item (dict): The DynamoDB item to convert.\n\n    Returns:\n        Letter: The Letter object represented by the DynamoDB item.\n\n    Raises:\n        ValueError: If the item is missing required keys or has malformed\n            fields.\n    \"\"\"\n    required_keys = {\n        \"PK\",\n        \"SK\",\n        \"text\",\n        \"bounding_box\",\n        \"top_right\",\n        \"top_left\",\n        \"bottom_right\",\n        \"bottom_left\",\n        \"angle_degrees\",\n        \"angle_radians\",\n        \"confidence\",\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - set(item.keys())\n        raise ValueError(f\"Item is missing required keys: {missing_keys}\")\n\n    try:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_dependency:[244:276]\n==receipt_dynamo.data._job_log:[103:152]\n                ]\n            }\n\n            response = self._client.batch_write_item(\n                RequestItems=request_items\n            )\n\n            # Handle unprocessed items with exponential backoff\n            unprocessed_items = response.get(\"UnprocessedItems\", {})\n            retry_count = 0\n            max_retries = 3\n\n            while unprocessed_items and retry_count < max_retries:\n                retry_count += 1\n                response = self._client.batch_write_item(\n                    RequestItems=unprocessed_items\n                )\n                unprocessed_items = response.get(\"UnprocessedItems\", {})\n\n            if unprocessed_items:\n                raise ClientError(\n                    {\n                        \"Error\": {\n                            \"Code\": \"ProvisionedThroughputExceededException\",\n                            \"Message\": (\n                                f\"Could not process all items after \"\n                                f\"{max_retries} retries\"\n                            ),\n                        }\n                    },\n                    \"BatchWriteItem\",\n                )\n\n    @handle_dynamodb_errors(\"get_job_log\")\n    def get_job_log(self, job_id: str, timestamp: str) -> JobLog:\n        \"\"\"Gets a job log entry from the DynamoDB table.\n\n        Args:\n            job_id (str): The ID of the job.\n            timestamp (str): The timestamp of the log entry.\n\n        Returns:\n            JobLog: The job log from the DynamoDB table.\n\n        Raises:\n            ValueError: If job_id or timestamp is None, or the job log is\n                not found.\n            ClientError: If a DynamoDB error occurs.\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_word:[527:552]\n==receipt_dynamo.entities.word:[402:427]\n            line_id=int(item[\"SK\"][\"S\"].split(\"#\")[1]),\n            word_id=int(item[\"SK\"][\"S\"].split(\"#\")[3]),\n            text=item[\"text\"][\"S\"],\n            bounding_box=deserialize_bounding_box(item[\"bounding_box\"]),\n            top_right=deserialize_coordinate_point(item[\"top_right\"]),\n            top_left=deserialize_coordinate_point(item[\"top_left\"]),\n            bottom_right=deserialize_coordinate_point(item[\"bottom_right\"]),\n            bottom_left=deserialize_coordinate_point(item[\"bottom_left\"]),\n            angle_degrees=float(item[\"angle_degrees\"][\"N\"]),\n            angle_radians=float(item[\"angle_radians\"][\"N\"]),\n            confidence=deserialize_confidence(item[\"confidence\"]),\n            extracted_data=(\n                None\n                if \"NULL\" in item.get(\"extracted_data\", {})\n                else {\n                    \"type\": item.get(\"extracted_data\", {})\n                    .get(\"M\", {})\n                    .get(\"type\", {})\n                    .get(\"S\"),\n                    \"value\": item.get(\"extracted_data\", {})\n                    .get(\"M\", {})\n                    .get(\"value\", {})\n                    .get(\"S\"),\n                }\n            ),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[267:358]\n==receipt_dynamo.entities.receipt_line:[219:302]\n            )\n        )\n\n    def warp_transform(\n        self,\n        a: float,\n        b: float,\n        c: float,\n        d: float,\n        e: float,\n        f: float,\n        g: float,\n        h: float,\n        src_width: int,\n        src_height: int,\n        dst_width: int,\n        dst_height: int,\n        flip_y: bool = False,\n    ):\n        \"\"\"\n        Receipt-specific inverse perspective transform from 'new' space back to\n        'old' space.\n\n        This implementation uses the 2x2 linear system approach optimized for\n        receipt coordinate systems, independent of the GeometryMixin's\n        vision-based implementation.\n\n        Args:\n            a, b, c, d, e, f, g, h (float): The perspective coefficients that\n                mapped the original image -> new image.\n                We will invert them here so we can map new coords ->\n                old coords.\n            src_width (int): The original (old) image width in pixels.\n            src_height (int): The original (old) image height in pixels.\n            dst_width (int): The new (warped) image width in pixels.\n            dst_height (int): The new (warped) image height in pixels.\n            flip_y (bool): If True, we treat the new coordinate system as\n                flipped in Y (e.g. some OCR engines treat top=0). Mirrors the\n                logic in warp_affine_normalized_forward(...).\n        \"\"\"\n        # For each corner in the new space, we want to find\n        # (x_old_px, y_old_px).\n        # The forward perspective mapping was:\n        #   x_new = (a*x_old + b*y_old + c) / (1 + g*x_old + h*y_old)\n        #   y_new = (d*x_old + e*y_old + f) / (1 + g*x_old + h*y_old)\n        #\n        # We invert it by treating (x_new, y_new) as known, and solving\n        # for (x_old, y_old).  The code below does that in a 2\u00d72 linear system.\n\n        corners = [\n            self.top_left,\n            self.top_right,\n            self.bottom_left,\n            self.bottom_right,\n        ]\n\n        for corner in corners:\n            # 1) Convert normalized new coords -> pixel coords in the 'new'\n            # (warped) image\n            x_new_px = corner[\"x\"] * dst_width\n            y_new_px = corner[\"y\"] * dst_height\n\n            if flip_y:\n                # If the new system\u2019s Y=0 was at the top, then from the\n                # perspective of a typical \"bottom=0\" system, we flip:\n                y_new_px = dst_height - y_new_px\n\n            # 2) Solve the perspective equations for old pixel coords\n            # (X_old, Y_old).\n            # We have the system:\n            #   x_new_px = (a*X_old + b*Y_old + c) / (1 + g*X_old + h*Y_old)\n            #   y_new_px = (d*X_old + e*Y_old + f) / (1 + g*X_old + h*Y_old)\n            #\n            # Put it in the form:\n            #    (g*x_new_px - a)*X_old + (h*x_new_px - b)*Y_old = c - x_new_px\n            #    (g*y_new_px - d)*X_old + (h*y_new_px - e)*Y_old = f - y_new_px\n\n            a11 = g * x_new_px - a\n            a12 = h * x_new_px - b\n            b1 = c - x_new_px\n\n            a21 = g * y_new_px - d\n            a22 = h * y_new_px - e\n            b2 = f - y_new_px\n\n            # Solve the 2\u00d72 linear system via determinant\n            det = a11 * a22 - a12 * a21\n            if abs(det) < 1e-12:\n                # Degenerate or singular.  You can raise an exception or skip.\n                # For robust code, handle it gracefully:\n                raise ValueError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line:[159:180]\n==receipt_dynamo.entities.word:[142:163]\n            \"text\": {\"S\": self.text},\n            \"bounding_box\": serialize_bounding_box(self.bounding_box),\n            \"top_right\": serialize_coordinate_point(self.top_right),\n            \"top_left\": serialize_coordinate_point(self.top_left),\n            \"bottom_right\": serialize_coordinate_point(self.bottom_right),\n            \"bottom_left\": serialize_coordinate_point(self.bottom_left),\n            \"angle_degrees\": {\n                \"N\": _format_float(\n                    self.angle_degrees,\n                    18,\n                    20,\n                )\n            },\n            \"angle_radians\": {\n                \"N\": _format_float(\n                    self.angle_radians,\n                    18,\n                    20,\n                )\n            },\n            \"confidence\": serialize_confidence(self.confidence),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data.base_operations.__init__:[51:73]\n==receipt_dynamo.data.base_operations.types:[66:90]\n    \"DynamoDBClient\",\n    \"DynamoClientProtocol\",\n    # Input types\n    \"QueryInputTypeDef\",\n    \"GetItemInputTypeDef\",\n    \"PutItemInputTypeDef\",\n    \"DeleteItemInputTypeDef\",\n    \"BatchWriteItemInputTypeDef\",\n    \"TransactWriteItemsInputTypeDef\",\n    \"UpdateItemInputTypeDef\",\n    \"BatchGetItemInputTypeDef\",\n    \"ScanInputTypeDef\",\n    # Request types\n    \"WriteRequestTypeDef\",\n    \"PutRequestTypeDef\",\n    \"DeleteRequestTypeDef\",\n    \"TransactWriteItemTypeDef\",\n    \"KeysAndAttributesTypeDef\",\n    \"AttributeValueTypeDef\",\n    # Operation types\n    \"PutTypeDef\",\n    \"DeleteTypeDef\",\n    \"UpdateTypeDef\",\n    \"ConditionCheckTypeDef\",",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[316:358]\n==receipt_dynamo.entities.receipt_word:[307:349]\n        corners = [\n            self.top_left,\n            self.top_right,\n            self.bottom_left,\n            self.bottom_right,\n        ]\n\n        for corner in corners:\n            # 1) Convert normalized new coords -> pixel coords in the 'new'\n            # (warped) image\n            x_new_px = corner[\"x\"] * dst_width\n            y_new_px = corner[\"y\"] * dst_height\n\n            if flip_y:\n                # If the new system's Y=0 was at the top, then from the\n                # perspective of a typical \"bottom=0\" system, we flip:\n                y_new_px = dst_height - y_new_px\n\n            # 2) Solve the perspective equations for old pixel coords\n            # (X_old, Y_old).\n            # We have the system:\n            #   x_new_px = (a*X_old + b*Y_old + c) / (1 + g*X_old + h*Y_old)\n            #   y_new_px = (d*X_old + e*Y_old + f) / (1 + g*X_old + h*Y_old)\n            #\n            # Put it in the form:\n            #    (g*x_new_px - a)*X_old + (h*x_new_px - b)*Y_old = c - x_new_px\n            #    (g*y_new_px - d)*X_old + (h*y_new_px - e)*Y_old = f - y_new_px\n\n            a11 = g * x_new_px - a\n            a12 = h * x_new_px - b\n            b1 = c - x_new_px\n\n            a21 = g * y_new_px - d\n            a22 = h * y_new_px - e\n            b2 = f - y_new_px\n\n            # Solve the 2\u00d72 linear system via determinant\n            det = a11 * a22 - a12 * a21\n            if abs(det) < 1e-12:\n                # Degenerate or singular.  You can raise an exception or skip.\n                # For robust code, handle it gracefully:\n                raise ValueError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.ocr_job:[176:196]\n==receipt_dynamo.entities.ocr_routing_decision:[151:172]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\"\n            f\"\\nadditional keys: {additional_keys}\"\n        )\n\n    try:\n        sk_parts = item[\"SK\"][\"S\"].split(\"#\")\n        image_id = item[\"PK\"][\"S\"].split(\"#\")[1]\n        job_id = sk_parts[1]\n        s3_bucket = item[\"s3_bucket\"][\"S\"]\n        s3_key = item[\"s3_key\"][\"S\"]\n        created_at = datetime.fromisoformat(item[\"created_at\"][\"S\"])\n        updated_at = (\n            datetime.fromisoformat(item[\"updated_at\"][\"S\"])\n            if \"updated_at\" in item and \"S\" in item[\"updated_at\"]\n            else None\n        )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job_metric:[405:439]\n==receipt_dynamo.entities.job_resource:[406:440]\n    if \"S\" in dynamodb_value:\n        return dynamodb_value[\"S\"]\n    if \"N\" in dynamodb_value:\n        try:\n            return int(dynamodb_value[\"N\"])\n        except ValueError:\n            return float(dynamodb_value[\"N\"])\n    if \"BOOL\" in dynamodb_value:\n        return dynamodb_value[\"BOOL\"]\n    if \"NULL\" in dynamodb_value:\n        return None\n    if \"M\" in dynamodb_value:\n        return _parse_dynamodb_map(dynamodb_value[\"M\"])\n    if \"L\" in dynamodb_value:\n        return [_parse_dynamodb_value(item) for item in dynamodb_value[\"L\"]]\n    raise ValueError(f\"Unknown DynamoDB value format: {dynamodb_value}\")\n\n\ndef _parse_dynamodb_map(dynamodb_map: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Parse a DynamoDB-formatted map back to a Python dictionary.\n\n    Args:\n        dynamodb_map (Dict): A DynamoDB-formatted map.\n\n    Returns:\n        Dict: The equivalent Python dictionary.\n\n    Raises:\n        ValueError: If the DynamoDB map format is invalid.\n    \"\"\"\n    result: Dict[str, Any] = {}\n    for k, v in dynamodb_map.items():\n        result[k] = _parse_dynamodb_value(v)\n    return result",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[243:278]\n==receipt_dynamo.entities.word:[365:400]\n            )\n        )\n\n\ndef item_to_word(item: Dict[str, Any]) -> Word:\n    \"\"\"Converts a DynamoDB item to a Word object.\n\n    Args:\n        item (dict): The DynamoDB item to convert.\n\n    Returns:\n        Word: The Word object represented by the DynamoDB item.\n\n    Raises:\n        ValueError: When the item is missing required keys or has malformed\n        fields.\n    \"\"\"\n    required_keys = {\n        \"PK\",\n        \"SK\",\n        \"text\",\n        \"bounding_box\",\n        \"top_right\",\n        \"top_left\",\n        \"bottom_right\",\n        \"bottom_left\",\n        \"angle_degrees\",\n        \"angle_radians\",\n        \"confidence\",\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - set(item.keys())\n        raise ValueError(f\"Item is missing required keys: {missing_keys}\")\n\n    try:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[195:228]\n==receipt_dynamo.entities.receipt_word:[481:518]\n            )\n        )\n\n\ndef item_to_receipt_word(item: Dict[str, Any]) -> ReceiptWord:\n    \"\"\"\n    Converts a DynamoDB item to a ReceiptWord object.\n\n    Args:\n        item (dict): The DynamoDB item to convert.\n\n    Returns:\n        ReceiptWord: The ReceiptWord object represented by the DynamoDB item.\n\n    Raises:\n        ValueError: When the item format is invalid or required keys are\n            missing.\n    \"\"\"\n    required_keys = {\n        \"PK\",\n        \"SK\",\n        \"text\",\n        \"bounding_box\",\n        \"top_right\",\n        \"top_left\",\n        \"bottom_right\",\n        \"bottom_left\",\n        \"angle_degrees\",\n        \"angle_radians\",\n        \"confidence\",\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - set(item.keys())\n        raise ValueError(f\"Item is missing required keys: {missing_keys}\")\n    try:\n        # Safely extract embedding_status string from DynamoDB item (default to\n        # NONE)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[225:246]\n==receipt_dynamo.data._job_resource:[219:240]\n        if job_id is None:\n            raise EntityValidationError(\"job_id cannot be None\")\n        assert_valid_uuid(job_id)\n\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n\n        return self._query_entities(\n            index_name=None,\n            key_condition_expression=\"PK = :pk AND begins_with(SK, :sk)\",\n            expression_attribute_names=None,\n            expression_attribute_values={\n                \":pk\": {\"S\": f\"JOB#{job_id}\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line:[75:98]\n==receipt_dynamo.entities.receipt_word:[95:118]\n            raise ValueError(\"id must be positive\")\n\n        if not isinstance(self.text, str):\n            raise ValueError(\"text must be a string\")\n\n        assert_valid_bounding_box(self.bounding_box)\n        assert_valid_point(self.top_right)\n        assert_valid_point(self.top_left)\n        assert_valid_point(self.bottom_right)\n        assert_valid_point(self.bottom_left)\n\n        if not isinstance(self.angle_degrees, (float, int)):\n            raise ValueError(\"angle_degrees must be a float or int\")\n        self.angle_degrees = float(self.angle_degrees)\n\n        if not isinstance(self.angle_radians, (float, int)):\n            raise ValueError(\"angle_radians must be a float or int\")\n        self.angle_radians = float(self.angle_radians)\n\n        if isinstance(self.confidence, int):\n            self.confidence = float(self.confidence)\n        if not isinstance(self.confidence, float):\n            raise ValueError(\"confidence must be a float\")",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[360:404]\n==receipt_dynamo.entities.receipt_word:[351:387]\n                )\n\n            x_old_px = (b1 * a22 - b2 * a12) / det\n            y_old_px = (a11 * b2 - a21 * b1) / det\n\n            # 3) Convert old pixel coords -> old normalized coords in [0..1]\n            corner[\"x\"] = x_old_px / src_width\n            corner[\"y\"] = y_old_px / src_height\n\n            if flip_y:\n                # If the old/original system also had Y=0 at top, do the final\n                # flip:\n                corner[\"y\"] = 1.0 - corner[\"y\"]\n\n        # 4) Recompute bounding box + angle\n        xs = [pt[\"x\"] for pt in corners]\n        ys = [pt[\"y\"] for pt in corners]\n        self.bounding_box[\"x\"] = min(xs)\n        self.bounding_box[\"y\"] = min(ys)\n        self.bounding_box[\"width\"] = max(xs) - min(xs)\n        self.bounding_box[\"height\"] = max(ys) - min(ys)\n\n        dx = self.top_right[\"x\"] - self.top_left[\"x\"]\n        dy = self.top_right[\"y\"] - self.top_left[\"y\"]\n        angle_radians = atan2(dy, dx)\n        self.angle_radians = angle_radians\n        self.angle_degrees = angle_radians * 180.0 / pi\n\n\ndef item_to_receipt_letter(item: Dict[str, Any]) -> ReceiptLetter:\n    \"\"\"\n    Converts a DynamoDB item to a ReceiptLetter object.\n\n    Args:\n        item (dict): The DynamoDB item to convert.\n\n    Returns:\n        ReceiptLetter: The ReceiptLetter object represented by the DynamoDB\n        item.\n\n    Raises:\n        ValueError: When the item format is invalid or required keys are\n        missing.\n    \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_word:[462:479]\n==receipt_dynamo.entities.word:[348:365]\n                self.image_id,\n                self.line_id,\n                self.word_id,\n                self.text,\n                tuple(self.bounding_box.items()),\n                tuple(self.top_right.items()),\n                tuple(self.top_left.items()),\n                tuple(self.bottom_right.items()),\n                tuple(self.bottom_left.items()),\n                self.angle_degrees,\n                self.angle_radians,\n                self.confidence,\n                (\n                    tuple(self.extracted_data.items())\n                    if self.extracted_data\n                    else None\n                ),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[103:132]\n==receipt_dynamo.entities.receipt_word:[100:121]\n        assert_valid_bounding_box(self.bounding_box)\n        assert_valid_point(self.top_right)\n        assert_valid_point(self.top_left)\n        assert_valid_point(self.bottom_right)\n        assert_valid_point(self.bottom_left)\n\n        if not isinstance(self.angle_degrees, (float, int)):\n            raise ValueError(\"angle_degrees must be a float or int\")\n        self.angle_degrees = float(self.angle_degrees)\n\n        if not isinstance(self.angle_radians, (float, int)):\n            raise ValueError(\"angle_radians must be a float or int\")\n        self.angle_radians = float(self.angle_radians)\n\n        if isinstance(self.confidence, int):\n            self.confidence = float(self.confidence)\n        if not isinstance(self.confidence, float):\n            raise ValueError(\"confidence must be a float\")\n        if self.confidence <= 0.0 or self.confidence > 1.0:\n            raise ValueError(\"confidence must be between 0 and 1\")\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_category:[105:130]\n==receipt_dynamo.entities.receipt_validation_result:[133:158]\n            },\n        }\n\n    def _python_to_dynamo(self, value: Any) -> Dict[str, Any]:\n        \"\"\"Convert a Python value to a DynamoDB typed value.\"\"\"\n        if value is None:\n            return {\"NULL\": True}\n        if isinstance(value, str):\n            return {\"S\": value}\n        if isinstance(value, (int, float)):\n            return {\"N\": str(value)}\n        if isinstance(value, bool):\n            return {\"BOOL\": value}\n        if isinstance(value, dict):\n            return {\n                \"M\": {k: self._python_to_dynamo(v) for k, v in value.items()}\n            }\n        if isinstance(value, list):\n            return {\"L\": [self._python_to_dynamo(item) for item in value]}\n        # Convert any other type to string\n        return {\"S\": str(value)}\n\n    def to_item(self) -> Dict[str, Any]:\n        \"\"\"Convert to a DynamoDB item.\"\"\"\n        # Start with the keys which are already properly formatted",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.image:[302:318]\n==receipt_dynamo.entities.receipt:[345:361]\n            f\"sha256={_repr_str(self.sha256)}, \"\n            f\"cdn_s3_bucket={_repr_str(self.cdn_s3_bucket)}, \"\n            f\"cdn_s3_key={_repr_str(self.cdn_s3_key)}, \"\n            f\"cdn_webp_s3_key={_repr_str(self.cdn_webp_s3_key)}, \"\n            f\"cdn_avif_s3_key={_repr_str(self.cdn_avif_s3_key)}, \"\n            f\"cdn_thumbnail_s3_key={_repr_str(self.cdn_thumbnail_s3_key)}, \"\n            f\"cdn_thumbnail_webp_s3_key=\"\n            f\"{_repr_str(self.cdn_thumbnail_webp_s3_key)}, \"\n            f\"cdn_thumbnail_avif_s3_key=\"\n            f\"{_repr_str(self.cdn_thumbnail_avif_s3_key)}, \"\n            f\"cdn_small_s3_key={_repr_str(self.cdn_small_s3_key)}, \"\n            f\"cdn_small_webp_s3_key={_repr_str(self.cdn_small_webp_s3_key)}, \"\n            f\"cdn_small_avif_s3_key={_repr_str(self.cdn_small_avif_s3_key)}, \"\n            f\"cdn_medium_s3_key={_repr_str(self.cdn_medium_s3_key)}, \"\n            f\"cdn_medium_webp_s3_key=\"\n            f\"{_repr_str(self.cdn_medium_webp_s3_key)}, \"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_category:[178:199]\n==receipt_dynamo.entities.receipt_validation_result:[232:253]\n            validation_timestamp=validation_timestamp,\n            metadata=metadata,\n        )\n\n    @staticmethod\n    def _dynamo_to_python(dynamo_value: Dict[str, Any]) -> Any:\n        \"\"\"Convert a DynamoDB typed value to a Python value.\"\"\"\n        if \"NULL\" in dynamo_value:\n            return None\n        if \"S\" in dynamo_value:\n            return dynamo_value[\"S\"]\n        if \"N\" in dynamo_value:\n            # Try to convert to int if possible, otherwise float\n            try:\n                return int(dynamo_value[\"N\"])\n            except ValueError:\n                return float(dynamo_value[\"N\"])\n        if \"BOOL\" in dynamo_value:\n            return dynamo_value[\"BOOL\"]\n        if \"M\" in dynamo_value:\n            return {",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[103:121]\n==receipt_dynamo.entities.receipt_line:[80:98]\n        assert_valid_bounding_box(self.bounding_box)\n        assert_valid_point(self.top_right)\n        assert_valid_point(self.top_left)\n        assert_valid_point(self.bottom_right)\n        assert_valid_point(self.bottom_left)\n\n        if not isinstance(self.angle_degrees, (float, int)):\n            raise ValueError(\"angle_degrees must be a float or int\")\n        self.angle_degrees = float(self.angle_degrees)\n\n        if not isinstance(self.angle_radians, (float, int)):\n            raise ValueError(\"angle_radians must be a float or int\")\n        self.angle_radians = float(self.angle_radians)\n\n        if isinstance(self.confidence, int):\n            self.confidence = float(self.confidence)\n        if not isinstance(self.confidence, float):\n            raise ValueError(\"confidence must be a float\")",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[230:260]\n==receipt_dynamo.entities.receipt_letter:[254:316]\n                self.image_id,\n                self.line_id,\n                self.word_id,\n                self.letter_id,\n                self.text,\n                tuple(self.bounding_box.items()),\n                tuple(self.top_right.items()),\n                tuple(self.top_left.items()),\n                tuple(self.bottom_right.items()),\n                tuple(self.bottom_left.items()),\n                self.angle_degrees,\n                self.angle_radians,\n                self.confidence,\n            )\n        )\n\n    def warp_transform(\n        self,\n        a: float,\n        b: float,\n        c: float,\n        d: float,\n        e: float,\n        f: float,\n        g: float,\n        h: float,\n        src_width: int,\n        src_height: int,\n        dst_width: int,\n        dst_height: int,\n        flip_y: bool = False,\n    ):\n        \"\"\"\n        Receipt-specific inverse perspective transform from 'new' space back to\n        'old' space.\n\n        This implementation uses the 2x2 linear system approach optimized for\n        receipt coordinate systems, independent of the GeometryMixin's\n        vision-based implementation.\n\n        Args:\n            a, b, c, d, e, f, g, h (float): The perspective coefficients that\n                mapped the original image -> new image.\n                We will invert them here so we can map new coords ->\n                old coords.\n            src_width (int): The original (old) image width in pixels.\n            src_height (int): The original (old) image height in pixels.\n            dst_width (int): The new (warped) image width in pixels.\n            dst_height (int): The new (warped) image height in pixels.\n            flip_y (bool): If True, we treat the new coordinate system as\n                flipped in Y (e.g. some OCR engines treat top=0). Mirrors the\n                logic in warp_affine_normalized_forward(...).\n        \"\"\"\n        # For each corner in the new space, we want to find\n        # (x_old_px, y_old_px).\n        # The forward perspective mapping was:\n        #   x_new = (a*x_old + b*y_old + c) / (1 + g*x_old + h*y_old)\n        #   y_new = (d*x_old + e*y_old + f) / (1 + g*x_old + h*y_old)\n        #\n        # We invert it by treating (x_new, y_new) as known, and solving\n        # for (x_old, y_old).  The code below does that in a 2\u00d72 linear system.\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[75:94]\n==receipt_dynamo.entities.receipt_letter:[98:117]\n        if not isinstance(self.text, str):\n            raise ValueError(\"text must be a string\")\n        if len(self.text) != 1:\n            raise ValueError(\"text must be exactly one character\")\n\n        assert_valid_bounding_box(self.bounding_box)\n        assert_valid_point(self.top_right)\n        assert_valid_point(self.top_left)\n        assert_valid_point(self.bottom_right)\n        assert_valid_point(self.bottom_left)\n\n        if not isinstance(self.angle_degrees, (float, int)):\n            raise ValueError(\"angle_degrees must be a float or int\")\n        self.angle_degrees = float(self.angle_degrees)\n\n        if not isinstance(self.angle_radians, (float, int)):\n            raise ValueError(\"angle_radians must be a float or int\")\n        self.angle_radians = float(self.angle_radians)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[168:186]\n==receipt_dynamo.entities.word:[332:350]\n            f\"text={_repr_str(self.text)}, \"\n            f\"bounding_box={self.bounding_box}, \"\n            f\"top_right={self.top_right}, \"\n            f\"top_left={self.top_left}, \"\n            f\"bottom_right={self.bottom_right}, \"\n            f\"bottom_left={self.bottom_left}, \"\n            f\"angle_degrees={self.angle_degrees}, \"\n            f\"angle_radians={self.angle_radians}, \"\n            f\"confidence={self.confidence}\"\n            f\")\"\n        )\n\n    def __hash__(self) -> int:\n        \"\"\"Returns the hash value of the Word object.\"\"\"\n        return hash(\n            (\n                self.image_id,\n                self.line_id,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[74:97]\n==receipt_dynamo.entities.receipt_word:[97:116]\n        if not isinstance(self.text, str):\n            raise ValueError(\"text must be a string\")\n\n        assert_valid_bounding_box(self.bounding_box)\n        assert_valid_point(self.top_right)\n        assert_valid_point(self.top_left)\n        assert_valid_point(self.bottom_right)\n        assert_valid_point(self.bottom_left)\n\n        if not isinstance(self.angle_degrees, (float, int)):\n            raise ValueError(\"angle_degrees must be a float or int\")\n        self.angle_degrees = float(self.angle_degrees)\n\n        if not isinstance(self.angle_radians, (float, int)):\n            raise ValueError(\"angle_radians must be a float or int\")\n        self.angle_radians = float(self.angle_radians)\n\n        if isinstance(self.confidence, int):\n            self.confidence = float(self.confidence)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data.base_operations.base:[471:489]\n==receipt_dynamo.data.base_operations.flattened_standard_mixin:[102:127]\n        if limit is not None:\n            if not isinstance(limit, int):\n                raise EntityValidationError(\"Limit must be an integer\")\n            if limit <= 0:\n                raise EntityValidationError(\"Limit must be greater than 0\")\n\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            # Validate DynamoDB LastEvaluatedKey structure\n            required_keys = {\"PK\", \"SK\"}\n            if not required_keys.issubset(last_evaluated_key.keys()):\n                raise EntityValidationError(\n                    f\"LastEvaluatedKey must contain keys: {required_keys}\"\n                )\n            # Validate proper DynamoDB attribute value format",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.image:[48:65]\n==receipt_dynamo.entities.receipt:[66:86]\n    sha256: Optional[str] = None\n    cdn_s3_bucket: Optional[str] = None\n    cdn_s3_key: Optional[str] = None\n    cdn_webp_s3_key: Optional[str] = None\n    cdn_avif_s3_key: Optional[str] = None\n    # Thumbnail versions\n    cdn_thumbnail_s3_key: Optional[str] = None\n    cdn_thumbnail_webp_s3_key: Optional[str] = None\n    cdn_thumbnail_avif_s3_key: Optional[str] = None\n    # Small versions\n    cdn_small_s3_key: Optional[str] = None\n    cdn_small_webp_s3_key: Optional[str] = None\n    cdn_small_avif_s3_key: Optional[str] = None\n    # Medium versions\n    cdn_medium_s3_key: Optional[str] = None\n    cdn_medium_webp_s3_key: Optional[str] = None\n    cdn_medium_avif_s3_key: Optional[str] = None",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[164:183]\n==receipt_dynamo.entities.receipt_validation_category:[180:199]\n        )\n\n    @staticmethod\n    def _dynamo_to_python(dynamo_value: Dict[str, Any]) -> Any:\n        \"\"\"Convert a DynamoDB typed value to a Python value.\"\"\"\n        if \"NULL\" in dynamo_value:\n            return None\n        if \"S\" in dynamo_value:\n            return dynamo_value[\"S\"]\n        if \"N\" in dynamo_value:\n            # Try to convert to int if possible, otherwise float\n            try:\n                return int(dynamo_value[\"N\"])\n            except ValueError:\n                return float(dynamo_value[\"N\"])\n        if \"BOOL\" in dynamo_value:\n            return dynamo_value[\"BOOL\"]\n        if \"M\" in dynamo_value:\n            return {",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_resource:[191:234]\n==receipt_dynamo.data._job_status:[140:183]\n            ) from e\n\n    def list_job_statuses(\n        self,\n        job_id: str,\n        limit: Optional[int] = None,\n        last_evaluated_key: dict | None = None,\n    ) -> tuple[list[JobStatus], dict | None]:\n        \"\"\"\n        Retrieve status updates for a job from the database.\n\n        Parameters:\n            job_id (str): The ID of the job to get status updates for.\n            limit (int, optional): The maximum number of status updates to\n                return.\n            last_evaluated_key (dict, optional): A key that marks the\n                starting point for the query.\n\n        Returns:\n            tuple:\n                - A list of JobStatus objects for the specified job.\n                - A dict representing the LastEvaluatedKey from the final\n                  query page, or None if no further pages.\n\n        Raises:\n            ValueError: If parameters are invalid.\n            Exception: If the underlying database query fails.\n        \"\"\"\n        if job_id is None:\n            raise EntityValidationError(\"job_id cannot be None\")\n        assert_valid_uuid(job_id)\n\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_metric:[195:210]\n==receipt_dynamo.data._receipt_field:[371:386]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n\n        return self._query_entities(\n            index_name=\"GSI1\",\n            key_condition_expression=\"GSI1PK = :pk\",\n            expression_attribute_names=None,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.completion_batch_result:[104:128]\n==receipt_dynamo.entities.embedding_batch_result:[109:128]\n        }\n\n    def gsi2_key(self) -> Dict[str, Any]:\n        return {\n            \"GSI2PK\": {\"S\": f\"BATCH#{self.batch_id}\"},\n            \"GSI2SK\": {\"S\": f\"STATUS#{self.status}\"},\n        }\n\n    def gsi3_key(self) -> Dict[str, Any]:\n        return {\n            \"GSI3PK\": {\n                \"S\": f\"IMAGE#{self.image_id}#RECEIPT#{self.receipt_id:05d}\"\n            },\n            \"GSI3SK\": {\"S\": f\"BATCH#{self.batch_id}#STATUS#{self.status}\"},\n        }\n\n    def to_item(self) -> Dict[str, Any]:\n        return {\n            **self.key,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[208:228]\n==receipt_dynamo.entities.receipt_letter:[181:203]\n            and self.line_id == other.line_id\n            and self.word_id == other.word_id\n            and self.letter_id == other.letter_id\n            and self.text == other.text\n            and self.bounding_box == other.bounding_box\n            and self.top_right == other.top_right\n            and self.top_left == other.top_left\n            and self.bottom_right == other.bottom_right\n            and self.bottom_left == other.bottom_left\n            and self.angle_degrees == other.angle_degrees\n            and self.angle_radians == other.angle_radians\n            and self.confidence == other.confidence\n        )\n\n    def __hash__(self) -> int:\n        \"\"\"Returns the hash value of the Letter object.\n\n        Returns:\n            int: The hash value of the Letter object.\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[53:69]\n==receipt_dynamo.entities.receipt_letter:[60:76]\n    image_id: str\n    line_id: int\n    word_id: int\n    letter_id: int\n    text: str\n    bounding_box: Dict[str, Any]\n    top_right: Dict[str, Any]\n    top_left: Dict[str, Any]\n    bottom_right: Dict[str, Any]\n    bottom_left: Dict[str, Any]\n    angle_degrees: float\n    angle_radians: float\n    confidence: float\n\n    def __post_init__(self) -> None:\n        \"\"\"Validate and normalize initialization arguments.\"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_word:[62:75]\n==receipt_dynamo.entities.word:[61:77]\n    image_id: str\n    line_id: int\n    word_id: int\n    text: str\n    bounding_box: Dict[str, Any]\n    top_right: Dict[str, Any]\n    top_left: Dict[str, Any]\n    bottom_right: Dict[str, Any]\n    bottom_left: Dict[str, Any]\n    angle_degrees: float\n    angle_radians: float\n    confidence: float\n    extracted_data: Optional[Dict[str, Any]] = None",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line:[347:361]\n==receipt_dynamo.entities.receipt_word:[499:512]\n    required_keys = {\n        \"PK\",\n        \"SK\",\n        \"text\",\n        \"bounding_box\",\n        \"top_right\",\n        \"top_left\",\n        \"bottom_right\",\n        \"bottom_left\",\n        \"angle_degrees\",\n        \"angle_radians\",\n        \"confidence\",\n        # \"embedding_status\",\n    }",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[211:224]\n==receipt_dynamo.entities.receipt_letter:[404:417]\n    required_keys = {\n        \"PK\",\n        \"SK\",\n        \"text\",\n        \"bounding_box\",\n        \"top_right\",\n        \"top_left\",\n        \"bottom_right\",\n        \"bottom_left\",\n        \"angle_degrees\",\n        \"angle_radians\",\n        \"confidence\",\n    }",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[168:184]\n==receipt_dynamo.entities.receipt_letter:[232:253]\n            f\"text={_repr_str(self.text)}, \"\n            f\"bounding_box={self.bounding_box}, \"\n            f\"top_right={self.top_right}, \"\n            f\"top_left={self.top_left}, \"\n            f\"bottom_right={self.bottom_right}, \"\n            f\"bottom_left={self.bottom_left}, \"\n            f\"angle_degrees={self.angle_degrees}, \"\n            f\"angle_radians={self.angle_radians}, \"\n            f\"confidence={self.confidence}\"\n            f\")\"\n        )\n\n    def __hash__(self) -> int:\n        \"\"\"Returns the hash value of the Line object.\"\"\"\n        return hash(\n            (",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[77:97]\n==receipt_dynamo.entities.receipt_letter:[103:119]\n        assert_valid_bounding_box(self.bounding_box)\n\n        assert_valid_point(self.top_right)\n\n        assert_valid_point(self.top_left)\n\n        assert_valid_point(self.bottom_right)\n\n        assert_valid_point(self.bottom_left)\n\n        if not isinstance(self.angle_degrees, (float, int)):\n            raise ValueError(\"angle_degrees must be a float or int\")\n        self.angle_degrees = float(self.angle_degrees)\n\n        if not isinstance(self.angle_radians, (float, int)):\n            raise ValueError(\"angle_radians must be a float or int\")\n        self.angle_radians = float(self.angle_radians)\n\n        if isinstance(self.confidence, int):\n            self.confidence = float(self.confidence)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_section:[421:434]\n==receipt_dynamo.data._receipt_word:[420:433]\n                ) from e\n            elif error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e\n            elif error_code == \"ValidationException\":\n                raise EntityValidationError(\n                    f\"One or more parameters given were invalid: {e}\"\n                ) from e\n            elif error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e\n            else:\n                raise OperationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_metric:[127:144]\n==receipt_dynamo.data._job_status:[168:183]\n        if job_id is None:\n            raise EntityValidationError(\"job_id cannot be None\")\n        assert_valid_uuid(job_id)\n\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[236:250]\n==receipt_dynamo.data._receipt_validation_result:[239:252]\n        if not isinstance(receipt_id, int):\n            raise EntityValidationError(\n                f\"receipt_id must be an integer, got \"\n                f\"{type(receipt_id).__name__}\"\n            )\n        if not isinstance(image_id, str):\n            raise EntityValidationError(\n                f\"image_id must be a string, got {type(image_id).__name__}\"\n            )\n        if not isinstance(field_name, str):\n            raise EntityValidationError(\n                f\"field_name must be a string, got {type(field_name).__name__}\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[71:85]\n==receipt_dynamo.entities.rwl_queue:[56:70]\n        if not isinstance(description, str):\n            raise ValueError(\"description must be a string\")\n        self.description = description\n\n        self.created_at: str\n        if isinstance(created_at, datetime):\n            self.created_at = created_at.isoformat()\n        elif isinstance(created_at, str):\n            self.created_at = created_at\n        else:\n            raise ValueError(\n                \"created_at must be a datetime object or a string\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_category:[25:40]\n==receipt_dynamo.entities.receipt_validation_result:[29:44]\n        if not isinstance(receipt_id, int):\n            raise ValueError(\"receipt_id must be an integer\")\n        if receipt_id <= 0:\n            raise ValueError(\"receipt_id must be positive\")\n        self.receipt_id: int = receipt_id\n\n        assert_valid_uuid(image_id)\n        self.image_id = image_id\n\n        if not isinstance(field_name, str):\n            raise ValueError(\"field_name must be a string\")\n        if not field_name:\n            raise ValueError(\"field_name must not be empty\")\n        self.field_name = field_name\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[169:182]\n==receipt_dynamo.entities.receipt_validation_category:[246:259]\n    if \"NULL\" in dynamo_value:\n        return None\n    if \"S\" in dynamo_value:\n        return dynamo_value[\"S\"]\n    if \"N\" in dynamo_value:\n        # Try to convert to int if possible, otherwise float\n        try:\n            return int(dynamo_value[\"N\"])\n        except ValueError:\n            return float(dynamo_value[\"N\"])\n    if \"BOOL\" in dynamo_value:\n        return dynamo_value[\"BOOL\"]\n    if \"M\" in dynamo_value:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line:[323:335]\n==receipt_dynamo.data._receipt_section:[421:433]\n                ) from e\n            elif error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e\n            elif error_code == \"ValidationException\":\n                raise EntityValidationError(\n                    f\"One or more parameters given were invalid: {e}\"\n                ) from e\n            elif error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e\n            else:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance_job:[359:372]\n==receipt_dynamo.entities.job_resource:[406:417]\n    if \"S\" in dynamodb_value:\n        return dynamodb_value[\"S\"]\n    if \"N\" in dynamodb_value:\n        # Try to convert to int first, then float if that fails\n        try:\n            return int(dynamodb_value[\"N\"])\n        except ValueError:\n            return float(dynamodb_value[\"N\"])\n    if \"BOOL\" in dynamodb_value:\n        return dynamodb_value[\"BOOL\"]\n    if \"NULL\" in dynamodb_value:\n        return None\n    # Default fallback",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.image:[70:85]\n==receipt_dynamo.entities.receipt:[88:102]\n        validate_positive_dimensions(self.width, self.height)\n\n        if isinstance(self.timestamp_added, datetime):\n            self.timestamp_added = self.timestamp_added.isoformat()\n        elif not isinstance(self.timestamp_added, str):\n            raise ValueError(\n                \"timestamp_added must be a datetime object or a string\"\n            )\n\n        if self.raw_s3_bucket and not isinstance(self.raw_s3_bucket, str):\n            raise ValueError(\"raw_s3_bucket must be a string\")\n\n        if self.raw_s3_key and not isinstance(self.raw_s3_key, str):\n            raise ValueError(\"raw_s3_key must be a string\")\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[283:294]\n==receipt_dynamo.entities.receipt_letter:[427:438]\n            text=item[\"text\"][\"S\"],\n            bounding_box=deserialize_bounding_box(item[\"bounding_box\"]),\n            top_right=deserialize_coordinate_point(item[\"top_right\"]),\n            top_left=deserialize_coordinate_point(item[\"top_left\"]),\n            bottom_right=deserialize_coordinate_point(item[\"bottom_right\"]),\n            bottom_left=deserialize_coordinate_point(item[\"bottom_left\"]),\n            angle_degrees=float(item[\"angle_degrees\"][\"N\"]),\n            angle_radians=float(item[\"angle_radians\"][\"N\"]),\n            confidence=deserialize_confidence(item[\"confidence\"]),\n        )\n    except (KeyError, ValueError) as e:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[281:292]\n==receipt_dynamo.entities.receipt_word:[527:538]\n            line_id=int(item[\"SK\"][\"S\"].split(\"#\")[1]),\n            word_id=int(item[\"SK\"][\"S\"].split(\"#\")[3]),\n            text=item[\"text\"][\"S\"],\n            bounding_box=deserialize_bounding_box(item[\"bounding_box\"]),\n            top_right=deserialize_coordinate_point(item[\"top_right\"]),\n            top_left=deserialize_coordinate_point(item[\"top_left\"]),\n            bottom_right=deserialize_coordinate_point(item[\"bottom_right\"]),\n            bottom_left=deserialize_coordinate_point(item[\"bottom_left\"]),\n            angle_degrees=float(item[\"angle_degrees\"][\"N\"]),\n            angle_radians=float(item[\"angle_radians\"][\"N\"]),\n            confidence=deserialize_confidence(item[\"confidence\"]),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[184:195]\n==receipt_dynamo.entities.receipt_line:[207:218]\n                self.image_id,\n                self.line_id,\n                self.text,\n                tuple(self.bounding_box.items()),\n                tuple(self.top_right.items()),\n                tuple(self.top_left.items()),\n                tuple(self.bottom_right.items()),\n                tuple(self.bottom_left.items()),\n                self.angle_degrees,\n                self.angle_radians,\n                self.confidence,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[53:67]\n==receipt_dynamo.entities.receipt_line:[50:61]\n    image_id: str\n    line_id: int\n    text: str\n    bounding_box: Dict[str, Any]\n    top_right: Dict[str, Any]\n    top_left: Dict[str, Any]\n    bottom_right: Dict[str, Any]\n    bottom_left: Dict[str, Any]\n    angle_degrees: float\n    angle_radians: float\n    confidence: float",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[80:94]\n==receipt_dynamo.entities.line:[77:95]\n        assert_valid_bounding_box(self.bounding_box)\n        assert_valid_point(self.top_right)\n        assert_valid_point(self.top_left)\n        assert_valid_point(self.bottom_right)\n        assert_valid_point(self.bottom_left)\n\n        if not isinstance(self.angle_degrees, (float, int)):\n            raise ValueError(\"angle_degrees must be a float or int\")\n        self.angle_degrees = float(self.angle_degrees)\n\n        if not isinstance(self.angle_radians, (float, int)):\n            raise ValueError(\"angle_radians must be a float or int\")\n        self.angle_radians = float(self.angle_radians)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[186:211]\n==receipt_dynamo.entities.receipt_letter:[258:316]\n                self.text,\n                tuple(self.bounding_box.items()),\n                tuple(self.top_right.items()),\n                tuple(self.top_left.items()),\n                tuple(self.bottom_right.items()),\n                tuple(self.bottom_left.items()),\n                self.angle_degrees,\n                self.angle_radians,\n                self.confidence,\n            )\n        )\n\n    def warp_transform(\n        self,\n        a: float,\n        b: float,\n        c: float,\n        d: float,\n        e: float,\n        f: float,\n        g: float,\n        h: float,\n        src_width: int,\n        src_height: int,\n        dst_width: int,\n        dst_height: int,\n        flip_y: bool = False,\n    ):\n        \"\"\"\n        Receipt-specific inverse perspective transform from 'new' space back to\n        'old' space.\n\n        This implementation uses the 2x2 linear system approach optimized for\n        receipt coordinate systems, independent of the GeometryMixin's\n        vision-based implementation.\n\n        Args:\n            a, b, c, d, e, f, g, h (float): The perspective coefficients that\n                mapped the original image -> new image.\n                We will invert them here so we can map new coords ->\n                old coords.\n            src_width (int): The original (old) image width in pixels.\n            src_height (int): The original (old) image height in pixels.\n            dst_width (int): The new (warped) image width in pixels.\n            dst_height (int): The new (warped) image height in pixels.\n            flip_y (bool): If True, we treat the new coordinate system as\n                flipped in Y (e.g. some OCR engines treat top=0). Mirrors the\n                logic in warp_affine_normalized_forward(...).\n        \"\"\"\n        # For each corner in the new space, we want to find\n        # (x_old_px, y_old_px).\n        # The forward perspective mapping was:\n        #   x_new = (a*x_old + b*y_old + c) / (1 + g*x_old + h*y_old)\n        #   y_new = (d*x_old + e*y_old + f) / (1 + g*x_old + h*y_old)\n        #\n        # We invert it by treating (x_new, y_new) as known, and solving\n        # for (x_old, y_old).  The code below does that in a 2\u00d72 linear system.\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[437:450]\n==receipt_dynamo.entities.job_metric:[405:416]\n    if \"S\" in dynamodb_value:\n        return dynamodb_value[\"S\"]\n    if \"N\" in dynamodb_value:\n        try:\n            return int(dynamodb_value[\"N\"])\n        except ValueError:\n            return float(dynamodb_value[\"N\"])\n    if \"BOOL\" in dynamodb_value:\n        return dynamodb_value[\"BOOL\"]\n    if \"NULL\" in dynamodb_value:\n        return None",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[89:101]\n==receipt_dynamo.entities.job_status:[58:70]\n        valid_statuses = [\n            \"pending\",\n            \"running\",\n            \"succeeded\",\n            \"failed\",\n            \"cancelled\",\n            \"interrupted\",\n        ]\n        if not isinstance(status, str) or status.lower() not in valid_statuses:\n            raise ValueError(f\"status must be one of {valid_statuses}\")\n        self.status: str = status.lower()\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_category:[70:89]\n==receipt_dynamo.entities.receipt_validation_result:[95:114]\n        self.metadata = metadata or {}\n\n    @property\n    def key(self) -> Dict[str, Dict[str, str]]:\n        \"\"\"Return the DynamoDB key for this item.\"\"\"\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\n                \"S\": (\n                    f\"RECEIPT#{self.receipt_id:05d}#ANALYSIS#VALIDATION#\"\n                    f\"CATEGORY#{self.field_name}\"\n                )\n            },\n        }\n\n    @property\n    def gsi1_key(self) -> Dict[str, Dict[str, str]]:\n        \"\"\"Return the GSI1 key for this item.\"\"\"\n        return {",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[109:125]\n==receipt_dynamo.entities.receipt_validation_category:[118:134]\n        if isinstance(value, dict):\n            return {\n                \"M\": {k: self._python_to_dynamo(v) for k, v in value.items()}\n            }\n        if isinstance(value, list):\n            return {\"L\": [self._python_to_dynamo(item) for item in value]}\n        # Convert any other type to string\n        return {\"S\": str(value)}\n\n    def to_item(self) -> Dict[str, Any]:\n        \"\"\"Convert to a DynamoDB item.\"\"\"\n        # Start with the keys which are already properly formatted\n        item = {\n            **self.key,\n            **self.gsi1_key,\n            **self.gsi3_key,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._batch_summary:[31:50]\n==receipt_dynamo.data._completion_batch_result:[25:54]\nif TYPE_CHECKING:\n    from receipt_dynamo.data.base_operations import (\n        QueryInputTypeDef,\n    )\n\n\ndef validate_last_evaluated_key(lek: Dict[str, Any]) -> None:\n    required_keys = {\"PK\", \"SK\"}\n    if not required_keys.issubset(lek.keys()):\n        raise EntityValidationError(\n            f\"LastEvaluatedKey must contain keys: {required_keys}\"\n        )\n    for key in required_keys:\n        if not isinstance(lek[key], dict) or \"S\" not in lek[key]:\n            raise EntityValidationError(\n                f\"LastEvaluatedKey[{key}] must be a dict containing a key 'S'\"\n            )\n\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._places_cache:[202:213]\n==receipt_dynamo.data._receipt_metadata:[640:651]\n                    ) from e\n                elif error_code == \"InternalServerError\":\n                    raise EntityValidationError(\"internal server error\") from e\n                elif error_code == \"ProvisionedThroughputExceededException\":\n                    raise EntityValidationError(\n                        \"provisioned throughput exceeded\"\n                    ) from e\n                elif error_code == \"ResourceNotFoundException\":\n                    raise EntityNotFoundError(\"table not found\") from e\n                else:\n                    raise EntityValidationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._embedding_batch_result:[26:50]\n==receipt_dynamo.data._job:[19:38]\nif TYPE_CHECKING:\n    from receipt_dynamo.data.base_operations import (\n        DeleteTypeDef,\n        PutRequestTypeDef,\n        PutTypeDef,\n        QueryInputTypeDef,\n        TransactWriteItemTypeDef,\n        WriteRequestTypeDef,\n    )\n\n\ndef validate_last_evaluated_key(lek: Dict[str, Any]) -> None:\n    required_keys = {\"PK\", \"SK\"}\n    if not required_keys.issubset(lek.keys()):\n        raise EntityValidationError(\n            f\"LastEvaluatedKey must contain keys: {required_keys}\"\n        )\n    for key in required_keys:\n        if not isinstance(lek[key], dict) or \"S\" not in lek[key]:\n            raise EntityValidationError(\n                f\"LastEvaluatedKey[{key}] must be a dict containing a key 'S'\"\n            )\n\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_resource:[23:40]\n==receipt_dynamo.data._job_status:[22:39]\nif TYPE_CHECKING:\n    from receipt_dynamo.data.base_operations import QueryInputTypeDef\n\n\ndef validate_last_evaluated_key(lek: Dict[str, Any]) -> None:\n    required_keys = {\"PK\", \"SK\"}\n    if not required_keys.issubset(lek.keys()):\n        raise EntityValidationError(\n            f\"LastEvaluatedKey must contain keys: {required_keys}\"\n        )\n    for key in required_keys:\n        if not isinstance(lek[key], dict) or \"S\" not in lek[key]:\n            raise EntityValidationError(\n                f\"LastEvaluatedKey[{key}] must be a dict containing a key 'S'\"\n            )\n\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[229:241]\n==receipt_dynamo.data._job_metric:[195:207]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n\n        return self._query_entities(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_resource:[223:235]\n==receipt_dynamo.data._receipt_field:[434:446]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n\n        return self._query_entities(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_metric:[254:266]\n==receipt_dynamo.data._receipt_field:[371:383]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n\n        return self._query_entities(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[345:357]\n==receipt_dynamo.data._receipt_validation_result:[455:467]\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n\n        return self._query_entities(\n            index_name=\"GSI1\",\n            key_condition_expression=\"#gsi1pk = :pk\",\n            expression_attribute_names={\"#gsi1pk\": \"GSI1PK\"},\n            expression_attribute_values={",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[309:353]\n==receipt_dynamo.data._receipt_validation_summary:[236:280]\n            limit=limit,\n            last_evaluated_key=last_evaluated_key,\n        )\n\n    @handle_dynamodb_errors(\"list_receipt_validation_summaries_by_status\")\n    def list_receipt_validation_summaries_by_status(\n        self,\n        status: str,\n        limit: Optional[int] = None,\n        last_evaluated_key: Optional[Dict] = None,\n    ) -> Tuple[List[ReceiptValidationSummary], Optional[Dict]]:\n        \"\"\"Returns ReceiptValidationSummaries with a specific status.\n\n        Args:\n            status (str): The status to filter by.\n            limit (Optional[int], optional): The maximum number of items to\n                return. Defaults to None.\n            last_evaluated_key (Optional[Dict], optional): The key to start\n                from for pagination. Defaults to None.\n\n        Returns:\n            tuple[list[ReceiptValidationSummary], dict | None]: A tuple\n                containing the list of ReceiptValidationSummaries and the\n                last evaluated key for pagination.\n\n        Raises:\n            ValueError: If the parameters are invalid.\n            Exception: If the ReceiptValidationSummaries cannot be retrieved\n                from DynamoDB.\n        \"\"\"\n        if not isinstance(status, str):\n            raise EntityValidationError(\n                f\"status must be a string, got {type(status).__name__}\"\n            )\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n\n        return self._query_entities(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[269:307]\n==receipt_dynamo.data._receipt_validation_summary:[196:234]\n            )\n\n        return result\n\n    @handle_dynamodb_errors(\"list_receipt_validation_summaries\")\n    def list_receipt_validation_summaries(\n        self,\n        limit: Optional[int] = None,\n        last_evaluated_key: Optional[Dict] = None,\n    ) -> Tuple[List[ReceiptValidationSummary], Optional[Dict]]:\n        \"\"\"Returns ReceiptValidationSummaries and the last evaluated key.\n\n        Args:\n            limit (Optional[int], optional): The maximum number of items to\n                return. Defaults to None.\n            last_evaluated_key (Optional[Dict], optional): The key to start\n                from for pagination. Defaults to None.\n\n        Returns:\n            tuple[list[ReceiptValidationSummary], dict | None]: A tuple\n                containing the list of ReceiptValidationSummaries and the\n                last evaluated key for pagination.\n\n        Raises:\n            ValueError: If the limit or last_evaluated_key are invalid.\n            Exception: If the ReceiptValidationSummaries cannot be retrieved\n                from DynamoDB.\n        \"\"\"\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n\n        return self._query_by_type(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_word:[263:280]\n==receipt_dynamo.data._word:[232:249]\n            }\n\n            # Perform BatchGet\n            response = self._client.batch_get_item(**request)\n\n            # Combine all found items\n            batch_items = response[\"Responses\"].get(self.table_name, [])\n            results.extend(batch_items)\n\n            # Retry unprocessed keys if any\n            unprocessed = response.get(\"UnprocessedKeys\", {})\n            while unprocessed.get(self.table_name, {}).get(\n                \"Keys\"\n            ):  # type: ignore[call-overload]\n                response = self._client.batch_get_item(\n                    RequestItems=unprocessed\n                )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance_job:[273:285]\n==receipt_dynamo.entities.job_resource:[350:361]\n        \"status\",\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:\n        # Parse instance_id and job_id from the PK and SK",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[283:293]\n==receipt_dynamo.entities.receipt_line:[369:380]\n            text=item[\"text\"][\"S\"],\n            bounding_box=deserialize_bounding_box(item[\"bounding_box\"]),\n            top_right=deserialize_coordinate_point(item[\"top_right\"]),\n            top_left=deserialize_coordinate_point(item[\"top_left\"]),\n            bottom_right=deserialize_coordinate_point(item[\"bottom_right\"]),\n            bottom_left=deserialize_coordinate_point(item[\"bottom_left\"]),\n            angle_degrees=float(item[\"angle_degrees\"][\"N\"]),\n            angle_radians=float(item[\"angle_radians\"][\"N\"]),\n            confidence=deserialize_confidence(item[\"confidence\"]),\n        )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[165:178]\n==receipt_dynamo.entities.receipt_letter:[207:225]\n        yield \"letter_id\", self.letter_id\n        yield \"text\", self.text\n        yield \"bounding_box\", self.bounding_box\n        yield \"top_right\", self.top_right\n        yield \"top_left\", self.top_left\n        yield \"bottom_right\", self.bottom_right\n        yield \"bottom_left\", self.bottom_left\n        yield \"angle_degrees\", self.angle_degrees\n        yield \"angle_radians\", self.angle_radians\n        yield \"confidence\", self.confidence\n\n    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Returns a dictionary representation of the Letter object.\"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[76:89]\n==receipt_dynamo.entities.receipt_word:[80:93]\n        if not isinstance(self.receipt_id, int):\n            raise ValueError(\"receipt_id must be an integer\")\n        if self.receipt_id <= 0:\n            raise ValueError(\"receipt_id must be positive\")\n\n        assert_valid_uuid(self.image_id)\n\n        if not isinstance(self.line_id, int):\n            raise ValueError(\"line_id must be an integer\")\n        if self.line_id < 0:\n            raise ValueError(\"line_id must be positive\")\n\n        if not isinstance(self.word_id, int):",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt:[425:435]\n==receipt_dynamo.entities.receipt_word_label:[333:343]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            \"Invalid item format\\n\"\n            f\"missing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n    try:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[144:162]\n==receipt_dynamo.entities.line:[169:182]\n            f\"bounding_box={self.bounding_box}, \"\n            f\"top_right={self.top_right}, \"\n            f\"top_left={self.top_left}, \"\n            f\"bottom_right={self.bottom_right}, \"\n            f\"bottom_left={self.bottom_left}, \"\n            f\"angle_degrees={self.angle_degrees}, \"\n            f\"angle_radians={self.angle_radians}, \"\n            f\"confidence={self.confidence}\"\n            f\")\"\n        )\n\n    def __iter__(self) -> Generator[Tuple[str, Any], None, None]:\n        \"\"\"Returns an iterator over the Letter object's attributes.\n\n        Yields:\n            Tuple[str, Any]: A tuple containing the attribute name and its\n                value.\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[57:71]\n==receipt_dynamo.entities.line:[55:69]\n    text: str\n    bounding_box: Dict[str, Any]\n    top_right: Dict[str, Any]\n    top_left: Dict[str, Any]\n    bottom_right: Dict[str, Any]\n    bottom_left: Dict[str, Any]\n    angle_degrees: float\n    angle_radians: float\n    confidence: float\n\n    def __post_init__(self) -> None:\n        \"\"\"Validate and normalize initialization arguments.\"\"\"\n        assert_valid_uuid(self.image_id)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[231:241]\n==receipt_dynamo.entities.receipt_letter:[427:437]\n            text=item[\"text\"][\"S\"],\n            bounding_box=deserialize_bounding_box(item[\"bounding_box\"]),\n            top_right=deserialize_coordinate_point(item[\"top_right\"]),\n            top_left=deserialize_coordinate_point(item[\"top_left\"]),\n            bottom_right=deserialize_coordinate_point(item[\"bottom_right\"]),\n            bottom_left=deserialize_coordinate_point(item[\"bottom_left\"]),\n            angle_degrees=float(item[\"angle_degrees\"][\"N\"]),\n            angle_radians=float(item[\"angle_radians\"][\"N\"]),\n            confidence=deserialize_confidence(item[\"confidence\"]),\n        )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[136:153]\n==receipt_dynamo.entities.receipt_letter:[155:176]\n            \"text\": {\"S\": self.text},\n            \"bounding_box\": serialize_bounding_box(self.bounding_box),\n            \"top_right\": serialize_coordinate_point(self.top_right),\n            \"top_left\": serialize_coordinate_point(self.top_left),\n            \"bottom_right\": serialize_coordinate_point(self.bottom_right),\n            \"bottom_left\": serialize_coordinate_point(self.bottom_left),\n            \"angle_degrees\": {\"N\": _format_float(self.angle_degrees, 18, 20)},\n            \"angle_radians\": {\"N\": _format_float(self.angle_radians, 18, 20)},\n            \"confidence\": serialize_confidence(self.confidence),\n        }\n\n    def __eq__(self, other: object) -> bool:\n        \"\"\"\n        Determines whether two ReceiptLetter objects are equal.\n\n        Args:\n            other (object): The object to compare.\n\n        Returns:\n            bool: True if the ReceiptLetter objects are equal, False otherwise.\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[407:418]\n==receipt_dynamo.entities.job_checkpoint:[317:328]\n            result[k] = v[\"S\"]\n        elif \"N\" in v:\n            # Try to convert to int first, then float if that fails\n            try:\n                result[k] = int(v[\"N\"])\n            except ValueError:\n                result[k] = float(v[\"N\"])\n        elif \"BOOL\" in v:\n            result[k] = v[\"BOOL\"]\n        elif \"NULL\" in v:\n            result[k] = None",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[339:353]\n==receipt_dynamo.entities.job_status:[250:264]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:\n        # Parse job_id from the PK\n        job_id = item[\"PK\"][\"S\"].split(\"#\")[1]\n\n        # Extract basic fields",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.batch_summary:[186:196]\n==receipt_dynamo.entities.embedding_batch_result:[216:229]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n    try:\n        batch_id = item[\"PK\"][\"S\"].split(\"#\")[1]",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance:[262:276]\n==receipt_dynamo.entities.instance_job:[274:286]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:\n        # Parse instance_id from the PK\n        instance_id = item[\"PK\"][\"S\"].split(\"#\")[1]\n\n        # Extract basic fields",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data.base_operations.consolidated_mixins:[19:45]\n==receipt_dynamo.data.base_operations.consolidated_mixins_v2:[24:59]\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n):\n    \"\"\"\n    Consolidated mixin for all write operations.\n\n    These three mixins are ALWAYS used together in the codebase:\n    - SingleEntityCRUDMixin: add, update, delete single items\n    - BatchOperationsMixin: batch writes with retry\n    - TransactionalOperationsMixin: transactional writes\n\n    Examples: _Receipt, _Job, _Image, _ReceiptLine, etc.\n    \"\"\"\n    pass\n\n\n# Pattern 2: Query Operations (often used together)\nclass QueryOperationsMixin(\n    QueryByTypeMixin,\n    QueryByParentMixin,\n):\n    \"\"\"\n    Consolidated mixin for query operations.\n\n    Combines:\n    - QueryByTypeMixin: GSITYPE queries\n    - QueryByParentMixin: Parent-child relationship queries\n\n    Note: Not all entities need both, but they're related enough to group.\n    \"\"\"\n    pass\n\n\n# Pattern 3: Full DynamoDB Entity (most common pattern)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._completion_batch_result:[106:121]\n==receipt_dynamo.data._receipt_section:[225:235]\n                ]\n                response = self._client.batch_write_item(\n                    RequestItems={self.table_name: request_items}\n                )\n                unprocessed = response.get(\"UnprocessedItems\", {})\n                while unprocessed.get(self.table_name):\n                    response = self._client.batch_write_item(\n                        RequestItems=unprocessed\n                    )\n                    unprocessed = response.get(\"UnprocessedItems\", {})",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line:[157:167]\n==receipt_dynamo.data._receipt_word:[190:200]\n                )\n            if not isinstance(index[0], str):\n                raise EntityValidationError(\n                    \"First element of tuple must be a string.\"\n                )\n            assert_valid_uuid(index[0])\n            if not isinstance(index[1], int):\n                raise EntityValidationError(\n                    \"Second element of tuple must be an integer.\"\n                )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_chatgpt_validation:[280:318]\n==receipt_dynamo.data._receipt_line_item_analysis:[238:271]\n            )\n\n        return result\n\n    @handle_dynamodb_errors(\"list_receipt_chat_gpt_validations\")\n    def list_receipt_chat_gpt_validations(\n        self,\n        limit: Optional[int] = None,\n        last_evaluated_key: dict | None = None,\n    ) -> tuple[list[ReceiptChatGPTValidation], dict | None]:\n        \"\"\"Returns all ReceiptChatGPTValidations from the table.\n\n        Args:\n            limit (int, optional):\n                The maximum number of results to return. Defaults to None.\n            last_evaluated_key (dict, optional):\n                The last evaluated key from a previous request.\n                Defaults to None.\n\n        Raises:\n            ValueError: If any parameters are invalid.\n            Exception: If the receipt ChatGPT validations cannot be\n                retrieved from DynamoDB.\n\n        Returns:\n            tuple[list[ReceiptChatGPTValidation], dict | None]:\n                A tuple containing a list of validations and the last\n                evaluated key (or None if no more results).\n        \"\"\"\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None.\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None.\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[362:373]\n==receipt_dynamo.data._receipt_field:[434:445]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_status:[172:183]\n==receipt_dynamo.data._receipt_field:[371:382]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_metric:[131:144]\n==receipt_dynamo.data._receipt_field:[318:330]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"Limit must be an integer\")\n        if limit is not None and limit <= 0:\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            validate_last_evaluated_key(last_evaluated_key)\n\n        # Use the QueryByTypeMixin for standardized GSITYPE queries",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_field:[31:43]\n==receipt_dynamo.data._receipt_label_analysis:[44:56]\n    required_keys = {\"PK\", \"SK\"}\n    if not required_keys.issubset(lek.keys()):\n        raise EntityValidationError(\n            f\"LastEvaluatedKey must contain keys: {required_keys}\"\n        )\n    for key in required_keys:\n        if not isinstance(lek[key], dict) or \"S\" not in lek[key]:\n            raise EntityValidationError(\n                f\"LastEvaluatedKey[{key}] must be a dict containing a key 'S'\"\n            )\n\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_label_analysis:[326:336]\n==receipt_dynamo.data._receipt_validation_category:[416:426]\n            index_name=None,\n            key_condition_expression=(\n                \"#pk = :pk AND begins_with(#sk, :sk_prefix)\"\n            ),\n            expression_attribute_names={\n                \"#pk\": \"PK\",\n                \"#sk\": \"SK\",\n            },\n            expression_attribute_values={\n                \":pk\": {\"S\": f\"IMAGE#{image_id}\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.embedding_batch_result:[216:226]\n==receipt_dynamo.entities.receipt_field:[252:262]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n    try:\n        # Parse SK to get image_id and receipt_id",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job_resource:[351:361]\n==receipt_dynamo.entities.rwl_queue:[215:226]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line_item_analysis:[679:689]\n==receipt_dynamo.entities.receipt_metadata:[437:448]\n    }\n\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            \"Invalid item format\\nmissing keys: \"\n            f\"{missing_keys}\\nadditional keys: {additional_keys}\"\n        )\n    try:\n        # Parse primary key components",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[234:243]\n==receipt_dynamo.entities.word:[351:360]\n                self.text,\n                tuple(self.bounding_box.items()),\n                tuple(self.top_right.items()),\n                tuple(self.top_left.items()),\n                tuple(self.bottom_right.items()),\n                tuple(self.bottom_left.items()),\n                self.angle_degrees,\n                self.angle_radians,\n                self.confidence,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[57:69]\n==receipt_dynamo.entities.word:[64:73]\n    text: str\n    bounding_box: Dict[str, Any]\n    top_right: Dict[str, Any]\n    top_left: Dict[str, Any]\n    bottom_right: Dict[str, Any]\n    bottom_left: Dict[str, Any]\n    angle_degrees: float\n    angle_radians: float\n    confidence: float",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[427:436]\n==receipt_dynamo.entities.word:[404:413]\n            text=item[\"text\"][\"S\"],\n            bounding_box=deserialize_bounding_box(item[\"bounding_box\"]),\n            top_right=deserialize_coordinate_point(item[\"top_right\"]),\n            top_left=deserialize_coordinate_point(item[\"top_left\"]),\n            bottom_right=deserialize_coordinate_point(item[\"bottom_right\"]),\n            bottom_left=deserialize_coordinate_point(item[\"bottom_left\"]),\n            angle_degrees=float(item[\"angle_degrees\"][\"N\"]),\n            angle_radians=float(item[\"angle_radians\"][\"N\"]),\n            confidence=deserialize_confidence(item[\"confidence\"]),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[258:267]\n==receipt_dynamo.entities.receipt_line:[209:218]\n                self.text,\n                tuple(self.bounding_box.items()),\n                tuple(self.top_right.items()),\n                tuple(self.top_left.items()),\n                tuple(self.bottom_right.items()),\n                tuple(self.bottom_left.items()),\n                self.angle_degrees,\n                self.angle_radians,\n                self.confidence,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[64:76]\n==receipt_dynamo.entities.receipt_line:[52:61]\n    text: str\n    bounding_box: Dict[str, Any]\n    top_right: Dict[str, Any]\n    top_left: Dict[str, Any]\n    bottom_right: Dict[str, Any]\n    bottom_left: Dict[str, Any]\n    angle_degrees: float\n    angle_radians: float\n    confidence: float",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.queue_job:[196:209]\n==receipt_dynamo.entities.rwl_queue:[216:229]\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:\n        # Parse queue_name from the PK\n        queue_name = item[\"PK\"][\"S\"].split(\"#\")[1]\n\n        # Parse job_id from the SK",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance_job:[90:114]\n==receipt_dynamo.entities.queue_job:[87:111]\n            \"SK\": {\"S\": f\"JOB#{self.job_id}\"},\n        }\n\n    def gsi1_key(self) -> Dict[str, Any]:\n        \"\"\"Generates the GSI1 key for the instance-job relationship.\n\n        Returns:\n            dict: The GSI1 key for the instance-job relationship.\n        \"\"\"\n        return {\n            \"GSI1PK\": {\"S\": \"JOB\"},\n            \"GSI1SK\": {\"S\": f\"JOB#{self.job_id}#INSTANCE#{self.instance_id}\"},\n        }\n\n    def to_item(self) -> Dict[str, Any]:\n        \"\"\"Converts the InstanceJob object to a DynamoDB item.\n\n        Returns:\n            dict: A dictionary representing the InstanceJob object as a\n                DynamoDB item.\n        \"\"\"\n        item = {\n            **self.key,\n            **self.gsi1_key(),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line:[189:198]\n==receipt_dynamo.entities.receipt_word:[393:402]\n            f\"text='{self.text}', \"\n            f\"bounding_box={self.bounding_box}, \"\n            f\"top_right={self.top_right}, \"\n            f\"top_left={self.top_left}, \"\n            f\"bottom_right={self.bottom_right}, \"\n            f\"bottom_left={self.bottom_left}, \"\n            f\"angle_degrees={self.angle_degrees}, \"\n            f\"angle_radians={self.angle_radians}, \"\n            f\"confidence={self.confidence}, \"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line:[129:143]\n==receipt_dynamo.entities.receipt_word:[169:183]\n            },\n        }\n\n    def gsi1_key(self) -> Dict[str, Any]:\n        \"\"\"\n        Generates the secondary index key for the receipt line.\n        \"\"\"\n        return {\n            \"GSI1PK\": {\"S\": f\"EMBEDDING_STATUS#{self.embedding_status}\"},\n            \"GSI1SK\": {\n                \"S\": (\n                    f\"IMAGE#{self.image_id}#\"\n                    f\"RECEIPT#{self.receipt_id:05d}#\"\n                    f\"LINE#{self.line_id:05d}\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job_checkpoint:[320:329]\n==receipt_dynamo.entities.receipt_validation_summary:[241:250]\n            try:\n                result[k] = int(v[\"N\"])\n            except ValueError:\n                result[k] = float(v[\"N\"])\n        elif \"BOOL\" in v:\n            result[k] = v[\"BOOL\"]\n        elif \"NULL\" in v:\n            result[k] = None\n        elif \"M\" in v:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance_job:[274:285]\n==receipt_dynamo.entities.job_log:[214:225]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:\n        # Parse instance_id and job_id from the PK and SK",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[231:240]\n==receipt_dynamo.entities.receipt_word:[529:538]\n            text=item[\"text\"][\"S\"],\n            bounding_box=deserialize_bounding_box(item[\"bounding_box\"]),\n            top_right=deserialize_coordinate_point(item[\"top_right\"]),\n            top_left=deserialize_coordinate_point(item[\"top_left\"]),\n            bottom_right=deserialize_coordinate_point(item[\"bottom_right\"]),\n            bottom_left=deserialize_coordinate_point(item[\"bottom_left\"]),\n            angle_degrees=float(item[\"angle_degrees\"][\"N\"]),\n            angle_radians=float(item[\"angle_radians\"][\"N\"]),\n            confidence=deserialize_confidence(item[\"confidence\"]),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[186:195]\n==receipt_dynamo.entities.receipt_word:[465:474]\n                self.text,\n                tuple(self.bounding_box.items()),\n                tuple(self.top_right.items()),\n                tuple(self.top_left.items()),\n                tuple(self.bottom_right.items()),\n                tuple(self.bottom_left.items()),\n                self.angle_degrees,\n                self.angle_radians,\n                self.confidence,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[136:145]\n==receipt_dynamo.entities.receipt_word:[237:246]\n            \"text\": {\"S\": self.text},\n            \"bounding_box\": serialize_bounding_box(self.bounding_box),\n            \"top_right\": serialize_coordinate_point(self.top_right),\n            \"top_left\": serialize_coordinate_point(self.top_left),\n            \"bottom_right\": serialize_coordinate_point(self.bottom_right),\n            \"bottom_left\": serialize_coordinate_point(self.bottom_left),\n            \"angle_degrees\": {\"N\": _format_float(self.angle_degrees, 18, 20)},\n            \"angle_radians\": {\"N\": _format_float(self.angle_radians, 18, 20)},\n            \"confidence\": serialize_confidence(self.confidence),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[55:67]\n==receipt_dynamo.entities.receipt_word:[65:74]\n    text: str\n    bounding_box: Dict[str, Any]\n    top_right: Dict[str, Any]\n    top_left: Dict[str, Any]\n    bottom_right: Dict[str, Any]\n    bottom_left: Dict[str, Any]\n    angle_degrees: float\n    angle_radians: float\n    confidence: float",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[339:350]\n==receipt_dynamo.entities.label_hygiene_result:[186:195]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n    try:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[75:85]\n==receipt_dynamo.entities.job_dependency:[67:77]\n        self.created_at: str\n        if isinstance(created_at, datetime):\n            self.created_at = created_at.isoformat()\n        elif isinstance(created_at, str):\n            self.created_at = created_at\n        else:\n            raise ValueError(\n                \"created_at must be a datetime object or a string\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.ocr_job:[150:173]\n==receipt_dynamo.entities.ocr_routing_decision:[125:148]\n            )\n        )\n\n\ndef item_to_ocr_job(item: Dict[str, Any]) -> OCRJob:\n    \"\"\"Converts a DynamoDB item to a OCRJob object.\n\n    Args:\n        item (dict): The DynamoDB item to convert.\n\n    Returns:\n        OCRJob: The OCRJob object.\n\n    Raises:\n        ValueError: When the item format is invalid.\n    \"\"\"\n    required_keys = {\n        \"PK\",\n        \"SK\",\n        \"TYPE\",\n        \"s3_bucket\",\n        \"s3_key\",\n        \"created_at\",",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.ocr_job:[136:147]\n==receipt_dynamo.entities.ocr_routing_decision:[111:123]\n        )\n\n    def __hash__(self) -> int:\n        return hash(\n            (\n                self.image_id,\n                self.job_id,\n                self.s3_bucket,\n                self.s3_key,\n                self.created_at,\n                self.updated_at,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job_checkpoint:[184:203]\n==receipt_dynamo.entities.job_metric:[203:222]\n            elif v is None:\n                result[k] = {\"NULL\": True}\n            else:\n                result[k] = {\"S\": str(v)}\n        return result\n\n    def _to_dynamodb_value(self, v: Any) -> Dict[str, Any]:\n        \"\"\"Converts a Python value to a DynamoDB value.\n\n        Args:\n            v (Any): The value to convert.\n\n        Returns:\n            Dict: The DynamoDB value representation.\n        \"\"\"\n        if isinstance(v, dict):\n            return {\"M\": self._dict_to_dynamodb_map(v)}\n        if isinstance(v, list):\n            return {\"L\": [self._to_dynamodb_value(item) for item in v]}",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job_checkpoint:[159:178]\n==receipt_dynamo.entities.job_metric:[178:197]\n        return item\n\n    def _dict_to_dynamodb_map(self, d: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Converts a Python dictionary to a DynamoDB map.\n\n        Args:\n            d (Dict): The dictionary to convert.\n\n        Returns:\n            Dict: The DynamoDB map representation.\n        \"\"\"\n        result: Dict[str, Any] = {}\n        for k, v in d.items():\n            if isinstance(v, dict):\n                result[k] = {\"M\": self._dict_to_dynamodb_map(v)}\n            elif isinstance(v, list):\n                result[k] = {\n                    \"L\": [self._to_dynamodb_value(item) for item in v]\n                }",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.batch_summary:[186:195]\n==receipt_dynamo.entities.job_status:[250:261]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n    try:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_field:[97:114]\n==receipt_dynamo.entities.receipt_label_analysis:[74:85]\n        self.timestamp_added: str\n\n        if isinstance(timestamp_added, datetime):\n            self.timestamp_added = timestamp_added.isoformat()\n        elif isinstance(timestamp_added, str):\n            self.timestamp_added = timestamp_added\n        else:\n            raise ValueError(\n                \"timestamp_added must be a datetime object or a string\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.batch_summary:[84:93]\n==receipt_dynamo.entities.label_metadata:[94:103]\n                \"L\": [\n                    {\n                        \"M\": {\n                            \"image_id\": {\"S\": image_id},\n                            \"receipt_id\": {\"N\": str(receipt_id)},\n                        }\n                    }\n                    for image_id, receipt_id in self.receipt_refs\n                ]",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance:[262:273]\n==receipt_dynamo.entities.label_metadata:[133:143]\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:\n        # Parse instance_id from the PK",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_structure_analysis:[272:281]\n==receipt_dynamo.data._receipt_validation_result:[394:403]\n            index_name=None,\n            key_condition_expression=\"#pk = :pk AND begins_with(#sk, :sk_prefix)\",\n            expression_attribute_names={\n                \"#pk\": \"PK\",\n                \"#sk\": \"SK\",\n            },\n            expression_attribute_values={\n                \":pk\": {\"S\": f\"IMAGE#{image_id}\"},\n                \":sk_prefix\": {",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_structure_analysis:[271:280]\n==receipt_dynamo.data._receipt_word_label:[468:477]\n        results, _ = self._query_entities(\n            index_name=None,\n            key_condition_expression=\"#pk = :pk AND begins_with(#sk, :sk_prefix)\",\n            expression_attribute_names={\n                \"#pk\": \"PK\",\n                \"#sk\": \"SK\",\n            },\n            expression_attribute_values={\n                \":pk\": {\"S\": f\"IMAGE#{image_id}\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._places_cache:[295:305]\n==receipt_dynamo.data._receipt_word:[300:310]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None.\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None.\"\n            )\n\n        return self._query_by_type(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_section:[338:375]\n==receipt_dynamo.data._receipt_word:[291:309]\n            ) from e\n\n    @handle_dynamodb_errors(\"list_receipt_words\")\n    def list_receipt_words(\n        self,\n        limit: Optional[int] = None,\n        last_evaluated_key: dict | None = None,\n    ) -> Tuple[list[ReceiptWord], Optional[Dict[str, Any]]]:\n        \"\"\"Returns all ReceiptWords from the table.\"\"\"\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None.\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None.\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_chatgpt_validation:[355:364]\n==receipt_dynamo.data._receipt_letter:[350:359]\n        results, _ = self._query_entities(\n            index_name=None,\n            key_condition_expression=\"PK = :pkVal AND begins_with(SK, :skPrefix)\",\n            expression_attribute_names=None,\n            expression_attribute_values={\n                \":pkVal\": {\"S\": f\"IMAGE#{image_id}\"},\n                \":skPrefix\": {\n                    \"S\": (\n                        f\"RECEIPT#{receipt_id:05d}\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job:[319:328]\n==receipt_dynamo.entities.job_status:[58:67]\n        valid_statuses = [\n            \"pending\",\n            \"running\",\n            \"succeeded\",\n            \"failed\",\n            \"cancelled\",\n            \"interrupted\",\n        ]\n        if not isinstance(status, str) or status.lower() not in valid_statuses:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._image:[348:357]\n==receipt_dynamo.data.base_operations.mixins:[467:478]\n        return self._query_entities(\n            index_name=\"GSITYPE\",\n            key_condition_expression=\"#t = :val\",\n            expression_attribute_names={\"#t\": \"TYPE\"},\n            expression_attribute_values={\":val\": {\"S\": entity_type}},\n            converter_func=converter_func,\n            limit=limit,\n            last_evaluated_key=last_evaluated_key,\n        )\n\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line:[212:221]\n==receipt_dynamo.data._receipt_word:[253:266]\n            for i in range(0, len(keys), CHUNK_SIZE):\n                chunk = keys[i : i + CHUNK_SIZE]\n\n                # Prepare parameters for BatchGetItem\n                request: BatchGetItemInputTypeDef = {\n                    \"RequestItems\": {\n                        self.table_name: {\n                            \"Keys\": chunk,\n                        }\n                    }\n                }\n\n                # Perform BatchGet",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line:[137:154]\n==receipt_dynamo.data._receipt_word:[171:187]\n            )\n\n        return result\n\n    @handle_dynamodb_errors(\"get_receipt_lines_by_indices\")\n    def get_receipt_lines_by_indices(\n        self, indices: list[tuple[str, int, int]]\n    ) -> list[ReceiptLine]:\n        \"\"\"Retrieves multiple ReceiptLines by their indices.\"\"\"\n        if indices is None:\n            raise EntityValidationError(\"indices cannot be None\")\n        if not isinstance(indices, list):\n            raise EntityValidationError(\"indices must be a list of tuples.\")\n        if not all(isinstance(index, tuple) for index in indices):\n            raise EntityValidationError(\"indices must be a list of tuples.\")\n\n        for index in indices:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[325:334]\n==receipt_dynamo.data._job_resource:[181:190]\n                ) from e\n            elif error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e\n            elif error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e\n            else:\n                raise OperationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[25:38]\n==receipt_dynamo.data._job_status:[22:35]\nif TYPE_CHECKING:\n    from receipt_dynamo.data.base_operations import QueryInputTypeDef\n\n\ndef validate_last_evaluated_key(lek: Dict[str, Any]) -> None:\n    required_keys = {\"PK\", \"SK\"}\n    if not required_keys.issubset(lek.keys()):\n        raise EntityValidationError(\n            f\"LastEvaluatedKey must contain keys: {required_keys}\"\n        )\n    for key in required_keys:\n        if not isinstance(lek[key], dict) or \"S\" not in lek[key]:\n            raise EntityValidationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_status:[209:220]\n==receipt_dynamo.data._ocr_job:[257:268]\n                    last_evaluated_key = response.get(\"LastEvaluatedKey\", None)\n                    break\n\n                if \"LastEvaluatedKey\" in response:\n                    query_params[\"ExclusiveStartKey\"] = response[\n                        \"LastEvaluatedKey\"\n                    ]\n                else:\n                    last_evaluated_key = None\n                    break\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line:[252:261]\n==receipt_dynamo.data._receipt_line_item_analysis:[262:272]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None.\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None.\"\n            )\n\n        return self._query_by_type(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._label_count_cache:[78:89]\n==receipt_dynamo.data._receipt_section:[225:234]\n                ]\n                response = self._client.batch_write_item(\n                    RequestItems={self.table_name: request_items}\n                )\n                unprocessed = response.get(\"UnprocessedItems\", {})\n                while unprocessed.get(self.table_name):\n                    response = self._client.batch_write_item(\n                        RequestItems=unprocessed\n                    )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[420:429]\n==receipt_dynamo.data._receipt_validation_result:[396:405]\n            expression_attribute_names={\n                \"#pk\": \"PK\",\n                \"#sk\": \"SK\",\n            },\n            expression_attribute_values={\n                \":pk\": {\"S\": f\"IMAGE#{image_id}\"},\n                \":sk_prefix\": {\n                    \"S\": (\n                        f\"RECEIPT#{receipt_id:05d}#ANALYSIS#VALIDATION#\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[392:401]\n==receipt_dynamo.data._receipt_validation_result:[239:248]\n        if not isinstance(receipt_id, int):\n            raise EntityValidationError(\n                f\"receipt_id must be an integer, got \"\n                f\"{type(receipt_id).__name__}\"\n            )\n        if not isinstance(image_id, str):\n            raise EntityValidationError(\n                f\"image_id must be a string, got {type(image_id).__name__}\"\n            )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_structure_analysis:[320:330]\n==receipt_dynamo.data._receipt_validation_category:[297:307]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n\n        return self._query_by_type(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[236:245]\n==receipt_dynamo.data._receipt_validation_summary:[170:180]\n        if not isinstance(receipt_id, int):\n            raise EntityValidationError(\n                f\"receipt_id must be an integer, got \"\n                f\"{type(receipt_id).__name__}\"\n            )\n        if not isinstance(image_id, str):\n            raise EntityValidationError(\n                f\"image_id must be a string, got {type(image_id).__name__}\"\n            )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.completion_batch_result:[190:200]\n==receipt_dynamo.entities.embedding_batch_result:[184:194]\n        )\n\n    def __hash__(self) -> int:\n        return hash(\n            (\n                self.batch_id,\n                self.image_id,\n                self.receipt_id,\n                self.line_id,\n                self.word_id,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.completion_batch_result:[157:169]\n==receipt_dynamo.entities.embedding_batch_result:[154:166]\n            \")\"\n        )\n\n    def __str__(self) -> str:\n        return self.__repr__()\n\n    def __iter__(self) -> Generator[Tuple[str, Any], None, None]:\n        yield \"batch_id\", self.batch_id\n        yield \"image_id\", self.image_id\n        yield \"receipt_id\", self.receipt_id\n        yield \"line_id\", self.line_id\n        yield \"word_id\", self.word_id",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.geometry_base:[272:281]\n==receipt_dynamo.entities.receipt_line:[319:328]\n        xs = [pt[\"x\"] for pt in corners]\n        ys = [pt[\"y\"] for pt in corners]\n        self.bounding_box[\"x\"] = min(xs)\n        self.bounding_box[\"y\"] = min(ys)\n        self.bounding_box[\"width\"] = max(xs) - min(xs)\n        self.bounding_box[\"height\"] = max(ys) - min(ys)\n\n        dx = self.top_right[\"x\"] - self.top_left[\"x\"]\n        dy = self.top_right[\"y\"] - self.top_left[\"y\"]",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.letter:[143:151]\n==receipt_dynamo.entities.receipt_word:[393:401]\n            f\"text='{self.text}', \"\n            f\"bounding_box={self.bounding_box}, \"\n            f\"top_right={self.top_right}, \"\n            f\"top_left={self.top_left}, \"\n            f\"bottom_right={self.bottom_right}, \"\n            f\"bottom_left={self.bottom_left}, \"\n            f\"angle_degrees={self.angle_degrees}, \"\n            f\"angle_radians={self.angle_radians}, \"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance_job:[332:340]\n==receipt_dynamo.entities.receipt_validation_summary:[414:422]\n                            try:\n                                result[k] = int(v[\"N\"])\n                            except ValueError:\n                                result[k] = float(v[\"N\"])\n                    elif \"BOOL\" in v:\n                        result[k] = v[\"BOOL\"]\n                    elif \"NULL\" in v:\n                        result[k] = None",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_word:[184:200]\n==receipt_dynamo.entities.receipt_word_label:[134:150]\n                )\n            },\n        }\n\n    def gsi2_key(self) -> Dict[str, Any]:\n        \"\"\"\n        Generates the secondary index key for the receipt word.\n\n        Returns:\n            dict: The secondary index key for the receipt word.\n        \"\"\"\n        return {\n            \"GSI2PK\": {\"S\": \"RECEIPT\"},\n            \"GSI2SK\": {\n                \"S\": (\n                    f\"IMAGE#{self.image_id}#\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[410:418]\n==receipt_dynamo.entities.receipt_validation_summary:[241:249]\n            try:\n                result[k] = int(v[\"N\"])\n            except ValueError:\n                result[k] = float(v[\"N\"])\n        elif \"BOOL\" in v:\n            result[k] = v[\"BOOL\"]\n        elif \"NULL\" in v:\n            result[k] = None",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.ocr_job:[80:88]\n==receipt_dynamo.entities.ocr_routing_decision:[90:98]\n            \"s3_bucket\": {\"S\": self.s3_bucket},\n            \"s3_key\": {\"S\": self.s3_key},\n            \"created_at\": {\"S\": self.created_at.isoformat()},\n            \"updated_at\": (\n                {\"S\": self.updated_at.isoformat()}\n                if self.updated_at is not None\n                else {\"NULL\": True}\n            ),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt:[190:212]\n==receipt_dynamo.entities.receipt_label_analysis:[134:157]\n        }\n\n    def gsi2_key(self) -> Dict[str, Dict[str, str]]:\n        \"\"\"Returns the GSI2 key for DynamoDB.\n\n        Returns:\n            dict: A dictionary containing the GSI2 key attributes.\n        \"\"\"\n        return {\n            \"GSI2PK\": {\"S\": \"RECEIPT\"},\n            \"GSI2SK\": {\n                \"S\": f\"IMAGE#{self.image_id}#RECEIPT#{self.receipt_id:05d}\"\n            },\n        }\n\n    def to_item(self) -> Dict[str, Any]:\n        \"\"\"Converts the ReceiptLabelAnalysis object to a DynamoDB item.\n\n        Returns:\n            dict: A dictionary representing the ReceiptLabelAnalysis object as\n                a DynamoDB item.\n        \"\"\"\n        return {",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[64:76]\n==receipt_dynamo.entities.receipt_validation_category:[68:80]\n        if not isinstance(metadata, dict):\n            raise ValueError(\"metadata must be a dictionary\")\n        self.metadata = metadata or {}\n\n    @property\n    def key(self) -> Dict[str, Dict[str, str]]:\n        \"\"\"Return the DynamoDB key for this item.\"\"\"\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\n                \"S\": (\n                    f\"RECEIPT#{self.receipt_id}#ANALYSIS#VALIDATION#\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance:[263:273]\n==receipt_dynamo.entities.queue_job:[196:206]\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:\n        # Parse queue_name from the PK",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_result:[394:402]\n==receipt_dynamo.data._receipt_word_label:[469:477]\n            index_name=None,\n            key_condition_expression=\"#pk = :pk AND begins_with(#sk, :sk_prefix)\",\n            expression_attribute_names={\n                \"#pk\": \"PK\",\n                \"#sk\": \"SK\",\n            },\n            expression_attribute_values={\n                \":pk\": {\"S\": f\"IMAGE#{image_id}\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_structure_analysis:[193:201]\n==receipt_dynamo.data._receipt_word:[223:231]\n                        \"PK\": {\"S\": f\"IMAGE#{analysis.image_id}\"},\n                        \"SK\": {\n                            \"S\": (\n                                f\"RECEIPT#{analysis.receipt_id:05d}\"\n                                f\"#ANALYSIS#STRUCTURE#{analysis.version}\"\n                            )\n                        },\n                    }",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._places_cache:[295:304]\n==receipt_dynamo.data._receipt_section:[366:375]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None.\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None.\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line:[230:238]\n==receipt_dynamo.data._receipt_word:[277:286]\n                    response = self._client.batch_get_item(\n                        RequestItems=unprocessed\n                    )\n                    batch_items = response[\"Responses\"].get(\n                        self.table_name, []\n                    )\n                    results.extend(batch_items)\n                    unprocessed = response.get(\"UnprocessedKeys\", {})",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_chatgpt_validation:[309:318]\n==receipt_dynamo.data._receipt_line:[252:260]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None.\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None.\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[405:415]\n==receipt_dynamo.data._ocr_job:[258:268]\n                    break\n\n                if \"LastEvaluatedKey\" in response:\n                    query_params[\"ExclusiveStartKey\"] = response[\n                        \"LastEvaluatedKey\"\n                    ]\n                else:\n                    last_evaluated_key = None\n                    break\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line_item_analysis:[144:168]\n==receipt_dynamo.data._receipt_structure_analysis:[143:168]\n        )\n\n        request_items = [\n            WriteRequestTypeDef(\n                PutRequest=PutRequestTypeDef(Item=analysis.to_item())\n            )\n            for analysis in analyses\n        ]\n        self._batch_write_with_retry(request_items)\n\n    @handle_dynamodb_errors(\"delete_receipt_line_item_analysis\")\n    def delete_receipt_line_item_analysis(\n        self, analysis: ReceiptLineItemAnalysis\n    ):\n        \"\"\"Deletes a single ReceiptLineItemAnalysis.\n\n        Args:\n            analysis (ReceiptLineItemAnalysis):\n                The ReceiptLineItemAnalysis to delete.\n\n        Raises:\n            ValueError: If the analysis is invalid.\n            Exception: If the analysis cannot be deleted from DynamoDB.\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line_item_analysis:[95:121]\n==receipt_dynamo.data._receipt_structure_analysis:[94:119]\n        )\n\n        request_items = [\n            WriteRequestTypeDef(\n                PutRequest=PutRequestTypeDef(Item=analysis.to_item())\n            )\n            for analysis in analyses\n        ]\n        self._batch_write_with_retry(request_items)\n\n    @handle_dynamodb_errors(\"update_receipt_line_item_analysis\")\n    def update_receipt_line_item_analysis(\n        self, analysis: ReceiptLineItemAnalysis\n    ):\n        \"\"\"Updates an existing ReceiptLineItemAnalysis in the database.\n\n        Args:\n            analysis (ReceiptLineItemAnalysis):\n                The ReceiptLineItemAnalysis to update.\n\n        Raises:\n            ValueError:\n                If the analysis is None or not an instance of\n                ReceiptLineItemAnalysis.\n            Exception: If the analysis cannot be updated in DynamoDB.\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_chatgpt_validation:[405:414]\n==receipt_dynamo.data._receipt_line_item_analysis:[262:271]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None.\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None.\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._batch_summary:[192:201]\n==receipt_dynamo.data._ocr_routing_decision:[232:241]\n                    TransactWriteItemTypeDef(\n                        Delete=DeleteTypeDef(\n                            TableName=self.table_name,\n                            Key=item.key,\n                            ConditionExpression=(\n                                \"attribute_exists(PK) AND attribute_exists(SK)\"\n                            ),\n                        )\n                    )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[30:38]\n==receipt_dynamo.data._receipt_field:[31:39]\n    required_keys = {\"PK\", \"SK\"}\n    if not required_keys.issubset(lek.keys()):\n        raise EntityValidationError(\n            f\"LastEvaluatedKey must contain keys: {required_keys}\"\n        )\n    for key in required_keys:\n        if not isinstance(lek[key], dict) or \"S\" not in lek[key]:\n            raise EntityValidationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_structure_analysis:[320:329]\n==receipt_dynamo.data._receipt_validation_category:[401:410]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[343:352]\n==receipt_dynamo.data._receipt_validation_summary:[224:233]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[297:306]\n==receipt_dynamo.data._receipt_validation_summary:[270:279]\n        if limit is not None and not isinstance(limit, int):\n            raise EntityValidationError(\"limit must be an integer or None\")\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_label_analysis:[471:480]\n==receipt_dynamo.data.base_operations.base:[471:480]\n        if limit is not None:\n            if not isinstance(limit, int):\n                raise EntityValidationError(\"Limit must be an integer\")\n            if limit <= 0:\n                raise EntityValidationError(\"Limit must be greater than 0\")\n\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_label_analysis:[368:377]\n==receipt_dynamo.data.base_operations.flattened_standard_mixin:[102:111]\n        if limit is not None:\n            if not isinstance(limit, int):\n                raise EntityValidationError(\"Limit must be an integer\")\n            if limit <= 0:\n                raise EntityValidationError(\"Limit must be greater than 0\")\n\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._image:[321:330]\n==receipt_dynamo.data._receipt_label_analysis:[415:424]\n        if limit is None:\n            # If no limit is provided, paginate until all items are retrieved\n            while (\n                \"LastEvaluatedKey\" in response and response[\"LastEvaluatedKey\"]\n            ):\n                query_params[\"ExclusiveStartKey\"] = response[\n                    \"LastEvaluatedKey\"\n                ]\n                response = self._client.query(**query_params)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_metric:[19:27]\n==receipt_dynamo.data._receipt_label_analysis:[44:52]\n    required_keys = {\"PK\", \"SK\"}\n    if not required_keys.issubset(lek.keys()):\n        raise EntityValidationError(\n            f\"LastEvaluatedKey must contain keys: {required_keys}\"\n        )\n    for key in required_keys:\n        if not isinstance(lek[key], dict) or \"S\" not in lek[key]:\n            raise EntityValidationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._line:[131:147]\n==receipt_dynamo.data._word:[144:156]\n        self._client.delete_item(\n            TableName=self.table_name,\n            Key={\n                \"PK\": {\"S\": f\"IMAGE#{image_id}\"},\n                \"SK\": {\"S\": f\"LINE#{line_id:05d}#WORD#{word_id:05d}\"},\n            },\n            ConditionExpression=\"attribute_exists(PK)\",\n        )\n\n    @handle_dynamodb_errors(\"delete_words\")\n    def delete_words(self, words: List[Word]):\n        \"\"\"Deletes a list of words from the database\"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.completion_batch_result:[179:186]\n==receipt_dynamo.entities.embedding_batch_result:[173:180]\n            return False\n        return (\n            self.batch_id == other.batch_id\n            and self.image_id == other.image_id\n            and self.receipt_id == other.receipt_id\n            and self.line_id == other.line_id\n            and self.word_id == other.word_id",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_field:[64:73]\n==receipt_dynamo.entities.receipt_line_item_analysis:[97:106]\n        assert_valid_uuid(image_id)\n        self.image_id = image_id\n\n        if not isinstance(receipt_id, int):\n            raise ValueError(\"receipt_id must be an integer\")\n        if receipt_id <= 0:\n            raise ValueError(\"receipt_id must be positive\")\n        self.receipt_id: int = receipt_id\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.geometry_base:[316:323]\n==receipt_dynamo.entities.receipt_letter:[316:326]\n        corners = [\n            self.top_left,\n            self.top_right,\n            self.bottom_left,\n            self.bottom_right,\n        ]\n        for corner in corners:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[241:256]\n==receipt_dynamo.entities.receipt_line:[199:209]\n            f\")\"\n        )\n\n    def __hash__(self) -> int:\n        \"\"\"\n        Generates a hash value for the ReceiptLetter object.\n\n        Returns:\n            int: The hash value for the ReceiptLetter object.\n        \"\"\"\n        return hash(\n            (\n                self.receipt_id,\n                self.image_id,\n                self.line_id,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[233:240]\n==receipt_dynamo.entities.receipt_line:[190:197]\n            f\"bounding_box={self.bounding_box}, \"\n            f\"top_right={self.top_right}, \"\n            f\"top_left={self.top_left}, \"\n            f\"bottom_right={self.bottom_right}, \"\n            f\"bottom_left={self.bottom_left}, \"\n            f\"angle_degrees={self.angle_degrees}, \"\n            f\"angle_radians={self.angle_radians}, \"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.queue_job:[66:74]\n==receipt_dynamo.entities.rwl_queue:[74:82]\n        valid_priorities = [\"low\", \"medium\", \"high\", \"critical\"]\n        if (\n            not isinstance(priority, str)\n            or priority.lower() not in valid_priorities\n        ):\n            raise ValueError(f\"priority must be one of {valid_priorities}\")\n        self.priority = priority.lower()\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.geometry_base:[260:267]\n==receipt_dynamo.entities.receipt_word:[307:317]\n        corners = [\n            self.top_left,\n            self.top_right,\n            self.bottom_left,\n            self.bottom_right,\n        ]\n\n        for corner in corners:\n            # 1) Convert normalized new coords -> pixel coords in the 'new'\n            # (warped) image",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[132:139]\n==receipt_dynamo.entities.receipt_word:[161:168]\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\n                \"S\": (\n                    f\"RECEIPT#{self.receipt_id:05d}#\"\n                    f\"LINE#{self.line_id:05d}#\"\n                    f\"WORD#{self.word_id:05d}\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line_item_analysis:[440:460]\n==receipt_dynamo.entities.receipt_validation_summary:[340:360]\n        if \"processing_metrics\" not in self.metadata:\n            self.metadata[\"processing_metrics\"] = {}\n\n        self.metadata[\"processing_metrics\"][metric_name] = value\n\n    def add_history_event(\n        self, event_type: str, details: Optional[Dict[str, Any]] = None\n    ) -> None:\n        \"\"\"Adds a history event to the metadata.\n\n        Args:\n            event_type (str): The type of event.\n            details (Dict, optional): Additional details about the event.\n                Defaults to None.\n        \"\"\"\n        if \"processing_history\" not in self.metadata:\n            self.metadata[\"processing_history\"] = []\n\n        event = {\n            \"event_type\": event_type,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_result:[29:38]\n==receipt_dynamo.entities.receipt_validation_summary:[49:58]\n        if not isinstance(receipt_id, int):\n            raise ValueError(\"receipt_id must be an integer\")\n        if receipt_id <= 0:\n            raise ValueError(\"receipt_id must be positive\")\n        self.receipt_id: int = receipt_id\n\n        assert_valid_uuid(image_id)\n        self.image_id = image_id\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[109:121]\n==receipt_dynamo.entities.receipt_validation_result:[146:158]\n        if isinstance(value, dict):\n            return {\n                \"M\": {k: self._python_to_dynamo(v) for k, v in value.items()}\n            }\n        if isinstance(value, list):\n            return {\"L\": [self._python_to_dynamo(item) for item in value]}\n        # Convert any other type to string\n        return {\"S\": str(value)}\n\n    def to_item(self) -> Dict[str, Any]:\n        \"\"\"Convert to a DynamoDB item.\"\"\"\n        # Start with the keys which are already properly formatted",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_field:[250:257]\n==receipt_dynamo.entities.receipt_word_label:[331:338]\n        \"reasoning\",\n        \"timestamp_added\",\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[169:176]\n==receipt_dynamo.entities.receipt_word:[394:401]\n            f\"bounding_box={self.bounding_box}, \"\n            f\"top_right={self.top_right}, \"\n            f\"top_left={self.top_left}, \"\n            f\"bottom_right={self.bottom_right}, \"\n            f\"bottom_left={self.bottom_left}, \"\n            f\"angle_degrees={self.angle_degrees}, \"\n            f\"angle_radians={self.angle_radians}, \"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[27:36]\n==receipt_dynamo.entities.receipt_validation_category:[25:34]\n        if not isinstance(receipt_id, int):\n            raise ValueError(\"receipt_id must be an integer\")\n        if receipt_id <= 0:\n            raise ValueError(\"receipt_id must be positive\")\n        self.receipt_id: int = receipt_id\n\n        assert_valid_uuid(image_id)\n        self.image_id = image_id\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data.base_operations.base:[331:340]\n==receipt_dynamo.data.base_operations.mixins:[174:183]\n            )\n\n            unprocessed_items = response.get(\"UnprocessedItems\", {})\n            if not unprocessed_items:\n                break\n\n            if attempt < max_retries:\n                time.sleep(backoff)\n                backoff *= 2  # Exponential backoff",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._embedding_batch_result:[51:73]\n==receipt_dynamo.data._line:[28:71]\n    DynamoDBBaseOperations,\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,\n    CommonValidationMixin,\n):\n    \"\"\"\n    A class used to represent a Line in the database.\n\n    Methods\n    -------\n    add_line(line: Line)\n        Adds a line to the database.\n    add_lines(lines: list[Line])\n        Adds multiple lines to the database.\n    update_line(line: Line)\n        Updates a line in the database.\n    update_lines(lines: list[Line])\n        Updates multiple lines in the database.\n    delete_line(image_id: str, line_id: int)\n        Deletes a line from the database.\n    delete_lines(lines: list[Line])\n        Deletes multiple lines from the database.\n    get_line(image_id: str, line_id: int) -> Line\n        Gets a line from the database.\n    list_lines(limit: Optional[int] = None, last_evaluated_key: Optional[Dict]\n        = None) -> Tuple[list[Line], Optional[Dict]]\n        Lists all lines from the database.\n    list_lines_from_image(image_id: str) -> list[Line]\n        Lists all lines from a specific image.\n    \"\"\"\n\n    @handle_dynamodb_errors(\"add_line\")\n    def add_line(self, line: Line):\n        \"\"\"Adds a line to the database\n\n        Args:\n            line (Line): The line to add to the database\n\n        Raises:\n            ValueError: When a line with the same ID already exists\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._batch_summary:[189:197]\n==receipt_dynamo.data._receipt_metadata:[252:260]\n        )\n\n        transact_items = [\n            TransactWriteItemTypeDef(\n                Delete=DeleteTypeDef(\n                    TableName=self.table_name,\n                    Key=item.key,\n                    ConditionExpression=(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._batch_summary:[136:144]\n==receipt_dynamo.data._receipt_metadata:[195:203]\n        )\n        # Create transactional update items\n        transact_items = [\n            TransactWriteItemTypeDef(\n                Put=PutTypeDef(\n                    TableName=self.table_name,\n                    Item=item.to_item(),\n                    ConditionExpression=(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._embedding_batch_result:[52:74]\n==receipt_dynamo.data._receipt_metadata:[35:109]\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,\n    CommonValidationMixin,\n):\n    \"\"\"\n    A class providing methods to interact with \"ReceiptMetadata\" entities in\n    DynamoDB. This class is typically used within a DynamoClient to access and\n    manage receipt metadata records.\n\n    Attributes\n    ----------\n    _client : boto3.client\n        The Boto3 DynamoDB client (must be set externally).\n    table_name : str\n        The name of the DynamoDB table (must be set externally).\n\n    Methods\n    -------\n    add_receipt_metadata(receipt_metadata: ReceiptMetadata):\n        Adds a single ReceiptMetadata item to the database, ensuring unique ID.\n    add_receipt_metadatas(receipt_metadatas: List[ReceiptMetadata]):\n        Adds multiple ReceiptMetadata items to the database in chunks of up to\n        25 items.\n    update_receipt_metadata(receipt_metadata: ReceiptMetadata):\n        Updates an existing ReceiptMetadata item in the database.\n    update_receipt_metadatas(receipt_metadatas: List[ReceiptMetadata]):\n        Updates multiple ReceiptMetadata items using transactions.\n    delete_receipt_metadata(receipt_metadata: ReceiptMetadata):\n        Deletes a single ReceiptMetadata item from the database.\n    delete_receipt_metadatas(receipt_metadatas: List[ReceiptMetadata]):\n        Deletes multiple ReceiptMetadata items using transactions.\n    get_receipt_metadata(image_id: str, receipt_id: int) -> ReceiptMetadata:\n        Retrieves a single ReceiptMetadata item by image and receipt IDs.\n    get_receipt_metadatas_by_indices(\n        indices: list[tuple[str, int]]\n    ) -> list[ReceiptMetadata]:\n        Retrieves multiple ReceiptMetadata items by their indices.\n    get_receipt_metadatas(keys: list[dict]) -> list[ReceiptMetadata]:\n        Retrieves multiple ReceiptMetadata items using batch get.\n    list_receipt_metadatas(...) -> Tuple[List[ReceiptMetadata], dict | None]:\n        Lists ReceiptMetadata records with optional pagination.\n    get_receipt_metadatas_by_merchant(\n        ...\n    ) -> Tuple[List[ReceiptMetadata], dict | None]:\n        Retrieves ReceiptMetadata records by merchant name.\n    list_receipt_metadatas_with_place_id(\n        ...\n    ) -> Tuple[List[ReceiptMetadata], dict | None]:\n        Retrieves ReceiptMetadata records that have a specific place_id.\n    get_receipt_metadatas_by_confidence(\n        ...\n    ) -> Tuple[List[ReceiptMetadata], dict | None]:\n        Retrieves ReceiptMetadata records by confidence score.\n    \"\"\"\n\n    @handle_dynamodb_errors(\"add_receipt_metadata\")\n    def add_receipt_metadata(self, receipt_metadata: ReceiptMetadata) -> None:\n        \"\"\"\n        Adds a single ReceiptMetadata record to DynamoDB.\n\n        Parameters\n        ----------\n        receipt_metadata : ReceiptMetadata\n            The ReceiptMetadata instance to add.\n\n        Raises\n        ------\n        ValueError\n            If receipt_metadata is None, not a ReceiptMetadata, or if the\n            record already exists.\n        \"\"\"\n        self._validate_entity(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_section:[394:403]\n==receipt_dynamo.data._receipt_word_label:[533:542]\n        )\n\n        if limit is None:\n            # Paginate through all labels\n            while \"LastEvaluatedKey\" in response:\n                query_params[\"ExclusiveStartKey\"] = response[\n                    \"LastEvaluatedKey\"\n                ]\n                response = self._client.query(**query_params)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_metadata:[618:626]\n==receipt_dynamo.data._receipt_section:[384:392]\n                },\n            }\n            if last_evaluated_key is not None:\n                query_params[\"ExclusiveStartKey\"] = last_evaluated_key\n            if limit is not None:\n                query_params[\"Limit\"] = limit\n\n            response = self._client.query(**query_params)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_chatgpt_validation:[327:355]\n==receipt_dynamo.data._receipt_letter:[305:341]\n            limit=limit,\n            last_evaluated_key=last_evaluated_key,\n        )\n\n    @handle_dynamodb_errors(\"list_receipt_chat_gpt_validations_for_receipt\")\n    def list_receipt_chat_gpt_validations_for_receipt(\n        self, receipt_id: int, image_id: str\n    ) -> list[ReceiptChatGPTValidation]:\n        \"\"\"Returns all ReceiptChatGPTValidations for a given receipt.\n\n        Args:\n            receipt_id (int): The receipt ID.\n            image_id (str): The image ID.\n\n        Raises:\n            ValueError: If any parameters are invalid.\n            Exception: If the receipt ChatGPT validations cannot be\n                retrieved from DynamoDB.\n\n        Returns:\n            list[ReceiptChatGPTValidation]:\n                A list of ChatGPT validations for the specified receipt.\n        \"\"\"\n        self._validate_receipt_id(receipt_id)\n        if not isinstance(receipt_id, int):\n            raise EntityValidationError(\"receipt_id must be an integer.\")\n        self._validate_image_id(image_id)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_result:[455:463]\n==receipt_dynamo.data._receipt_validation_summary:[272:280]\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n\n        return self._query_entities(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_result:[263:271]\n==receipt_dynamo.data._receipt_validation_summary:[180:188]\n        try:\n            assert_valid_uuid(image_id)\n        except ValueError as e:\n            raise EntityValidationError(f\"Invalid image_id format: {e}\") from e\n\n        result = self._get_entity(\n            primary_key=f\"IMAGE#{image_id}\",\n            sort_key=f\"RECEIPT#{receipt_id:05d}#ANALYSIS#VALIDATION#CATEGORY#{field_name}#RESULT#{result_index}\",",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line:[192:199]\n==receipt_dynamo.data._receipt_metadata:[382:389]\n        for key in keys:\n            if not {\"PK\", \"SK\"}.issubset(key.keys()):\n                raise EntityValidationError(\"keys must contain 'PK' and 'SK'\")\n            if not key[\"PK\"][\"S\"].startswith(\"IMAGE#\"):\n                raise EntityValidationError(\"PK must start with 'IMAGE#'\")\n            if not key[\"SK\"][\"S\"].startswith(\"RECEIPT#\"):\n                raise EntityValidationError(\"SK must start with 'RECEIPT#'\")",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line_item_analysis:[274:298]\n==receipt_dynamo.data._receipt_word_label:[446:466]\n            limit=limit,\n            last_evaluated_key=last_evaluated_key,\n        )\n\n    @handle_dynamodb_errors(\"list_receipt_word_labels_for_image\")\n    def list_receipt_word_labels_for_image(\n        self, image_id: str\n    ) -> List[ReceiptWordLabel]:\n        \"\"\"Lists all receipt word labels for a given image\n\n        Args:\n            image_id (str): The image ID\n\n        Returns:\n            List[ReceiptWordLabel]: The receipt word labels for the image\n        \"\"\"\n        if not isinstance(image_id, str):\n            raise EntityValidationError(\n                f\"image_id must be a string, got {type(image_id).__name__}\"\n            )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_letter:[295:303]\n==receipt_dynamo.data._receipt_line_item_analysis:[264:272]\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None.\"\n            )\n\n        return self._query_by_type(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_status:[78:85]\n==receipt_dynamo.data._ocr_routing_decision:[69:76]\n                ) from e\n            if error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e\n            if error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_metric:[50:75]\n==receipt_dynamo.data._job_resource:[58:80]\n            condition_expression=(\n                \"attribute_not_exists(PK) OR attribute_not_exists(SK)\"\n            ),\n        )\n\n    @handle_dynamodb_errors(\"get_job_resource\")\n    def get_job_resource(self, job_id: str, resource_id: str) -> JobResource:\n        \"\"\"Gets a specific job resource by job ID and resource ID\n\n        Args:\n            job_id (str): The ID of the job\n            resource_id (str): The ID of the resource\n\n        Returns:\n            JobResource: The requested job resource\n\n        Raises:\n            ValueError: If the job resource does not exist\n        \"\"\"\n        if job_id is None:\n            raise EntityValidationError(\"job_id cannot be None\")\n        assert_valid_uuid(job_id)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[403:411]\n==receipt_dynamo.data._receipt_validation_result:[381:389]\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n\n        try:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_validation_category:[299:307]\n==receipt_dynamo.data._receipt_validation_result:[311:319]\n        if last_evaluated_key is not None and not isinstance(\n            last_evaluated_key, dict\n        ):\n            raise EntityValidationError(\n                \"last_evaluated_key must be a dictionary or None\"\n            )\n\n        return self._query_by_type(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_label_analysis:[417:424]\n==receipt_dynamo.data.base_operations.base:[413:420]\n            while (\n                \"LastEvaluatedKey\" in response and response[\"LastEvaluatedKey\"]\n            ):\n                query_params[\"ExclusiveStartKey\"] = response[\n                    \"LastEvaluatedKey\"\n                ]\n                response = self._client.query(**query_params)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_label_analysis:[58:86]\n==receipt_dynamo.data.base_operations.standard_dynamo_mixin:[18:46]\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,\n    QueryByParentMixin,\n    CommonValidationMixin,\n):\n    \"\"\"\n    A comprehensive mixin providing all standard DynamoDB operations.\n\n    This single mixin provides:\n    - Single entity CRUD operations (add, update, delete, get)\n    - Batch operations with retry logic\n    - Transactional operations with chunking\n    - Query operations (by type, by parent)\n    - Common validation methods\n\n    By using this single mixin, all DynamoDB accessor classes have:\n    1. Consistent functionality\n    2. Simpler inheritance (just DynamoDBBaseOperations + StandardDynamoMixin)\n    3. All necessary methods for typical DynamoDB operations\n\n    Example usage:\n        class _Receipt(DynamoDBBaseOperations, StandardDynamoMixin):\n            # All standard operations are now available\n            pass\n    \"\"\"\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._image:[309:319]\n==receipt_dynamo.data._receipt_label_analysis:[499:509]\n            },\n        }\n\n        if last_evaluated_key is not None:\n            query_params[\"ExclusiveStartKey\"] = last_evaluated_key\n\n        if limit is not None:\n            query_params[\"Limit\"] = limit\n\n        response = self._client.query(**query_params)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.completion_batch_result:[120:131]\n==receipt_dynamo.entities.image:[203:217]\n        }\n\n    def to_item(self) -> Dict[str, Any]:\n        \"\"\"Converts the Image object to a DynamoDB item.\n\n        Returns:\n            dict: A dictionary representing the Image object as a DynamoDB\n                item.\n        \"\"\"\n        return {\n            **self.key,\n            **self.gsi1_key,\n            **self.gsi2_key,\n            **self.gsi3_key,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.label_hygiene_result:[185:191]\n==receipt_dynamo.entities.receipt_metadata:[436:443]\n        \"timestamp\",\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.geometry_base:[487:494]\n==receipt_dynamo.entities.receipt_letter:[375:382]\n        xs = [pt[\"x\"] for pt in corners]\n        ys = [pt[\"y\"] for pt in corners]\n        self.bounding_box[\"x\"] = min(xs)\n        self.bounding_box[\"y\"] = min(ys)\n        self.bounding_box[\"width\"] = max(xs) - min(xs)\n        self.bounding_box[\"height\"] = max(ys) - min(ys)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.geometry_base:[336:344]\n==receipt_dynamo.entities.receipt_letter:[375:384]\n        xs = [pt[\"x\"] for pt in corners]\n        ys = [pt[\"y\"] for pt in corners]\n        self.bounding_box[\"x\"] = min(xs)\n        self.bounding_box[\"y\"] = min(ys)\n        self.bounding_box[\"width\"] = max(xs) - min(xs)\n        self.bounding_box[\"height\"] = max(ys) - min(ys)\n        dx = self.top_right[\"x\"] - self.top_left[\"x\"]\n        dy = self.top_right[\"y\"] - self.top_left[\"y\"]",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.geometry_base:[387:393]\n==receipt_dynamo.entities.receipt_word:[307:314]\n        corners = [\n            self.top_left,\n            self.top_right,\n            self.bottom_left,\n            self.bottom_right,\n        ]",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.geometry_base:[272:281]\n==receipt_dynamo.entities.receipt_word:[366:375]\n        xs = [pt[\"x\"] for pt in corners]\n        ys = [pt[\"y\"] for pt in corners]\n        self.bounding_box[\"x\"] = min(xs)\n        self.bounding_box[\"y\"] = min(ys)\n        self.bounding_box[\"width\"] = max(xs) - min(xs)\n        self.bounding_box[\"height\"] = max(ys) - min(ys)\n\n        dx = self.top_right[\"x\"] - self.top_left[\"x\"]\n        dy = self.top_right[\"y\"] - self.top_left[\"y\"]",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.geometry_base:[237:260]\n==receipt_dynamo.entities.receipt_word:[366:373]\n        xs = [pt[\"x\"] for pt in corners]\n        ys = [pt[\"y\"] for pt in corners]\n        self.bounding_box[\"x\"] = min(xs)\n        self.bounding_box[\"y\"] = min(ys)\n        self.bounding_box[\"width\"] = max(xs) - min(xs)\n        self.bounding_box[\"height\"] = max(ys) - min(ys)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_word:[237:243]\n==receipt_dynamo.entities.word:[142:148]\n            \"text\": {\"S\": self.text},\n            \"bounding_box\": serialize_bounding_box(self.bounding_box),\n            \"top_right\": serialize_coordinate_point(self.top_right),\n            \"top_left\": serialize_coordinate_point(self.top_left),\n            \"bottom_right\": serialize_coordinate_point(self.bottom_right),\n            \"bottom_left\": serialize_coordinate_point(self.bottom_left),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line:[65:73]\n==receipt_dynamo.entities.receipt_word:[80:88]\n        if not isinstance(self.receipt_id, int):\n            raise ValueError(\"receipt_id must be an integer\")\n        if self.receipt_id <= 0:\n            raise ValueError(\"receipt_id must be positive\")\n\n        assert_valid_uuid(self.image_id)\n\n        if not isinstance(self.line_id, int):",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[251:257]\n==receipt_dynamo.entities.receipt_word:[459:465]\n        return hash(\n            (\n                self.receipt_id,\n                self.image_id,\n                self.line_id,\n                self.word_id,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[66:76]\n==receipt_dynamo.entities.receipt_validation_result:[95:105]\n        self.metadata = metadata or {}\n\n    @property\n    def key(self) -> Dict[str, Dict[str, str]]:\n        \"\"\"Return the DynamoDB key for this item.\"\"\"\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\n                \"S\": (\n                    f\"RECEIPT#{self.receipt_id:05d}#ANALYSIS#VALIDATION#\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance_job:[273:279]\n==receipt_dynamo.entities.ocr_routing_decision:[150:156]\n        \"status\",\n    }\n    if not required_keys.issubset(item.keys()):\n        missing_keys = required_keys - item.keys()\n        additional_keys = item.keys() - required_keys\n        raise ValueError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt:[214:227]\n==receipt_dynamo.entities.receipt_word_label:[171:185]\n        }\n\n    def to_item(self) -> Dict[str, Any]:\n        \"\"\"Converts the ReceiptWordLabel object to a DynamoDB item.\n\n        Returns:\n            dict: A dictionary representing the ReceiptWordLabel object as a\n                DynamoDB item.\n        \"\"\"\n        return {\n            **self.key,\n            **self.gsi1_key(),\n            **self.gsi2_key(),\n            **self.gsi3_key(),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[136:142]\n==receipt_dynamo.entities.receipt_line:[159:165]\n            \"text\": {\"S\": self.text},\n            \"bounding_box\": serialize_bounding_box(self.bounding_box),\n            \"top_right\": serialize_coordinate_point(self.top_right),\n            \"top_left\": serialize_coordinate_point(self.top_left),\n            \"bottom_right\": serialize_coordinate_point(self.bottom_right),\n            \"bottom_left\": serialize_coordinate_point(self.bottom_left),",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job:[101:107]\n==receipt_dynamo.entities.queue_job:[66:72]\n        valid_priorities = [\"low\", \"medium\", \"high\", \"critical\"]\n        if (\n            not isinstance(priority, str)\n            or priority.lower() not in valid_priorities\n        ):\n            raise ValueError(f\"priority must be one of {valid_priorities}\")",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.ocr_job:[204:210]\n==receipt_dynamo.entities.ocr_routing_decision:[175:181]\n            image_id=image_id,\n            job_id=job_id,\n            s3_bucket=s3_bucket,\n            s3_key=s3_key,\n            created_at=created_at,\n            updated_at=updated_at,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.ocr_job:[30:39]\n==receipt_dynamo.entities.ocr_routing_decision:[45:55]\n        assert_valid_uuid(self.image_id)\n        assert_valid_uuid(self.job_id)\n\n        if not isinstance(self.s3_bucket, str):\n            raise ValueError(\"s3_bucket must be a string\")\n\n        if not isinstance(self.s3_key, str):\n            raise ValueError(\"s3_key must be a string\")\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job_metric:[341:348]\n==receipt_dynamo.entities.job_resource:[355:362]\n        raise ValueError(\n            f\"Invalid item format\\nmissing keys: {missing_keys}\\n\"\n            f\"additional keys: {additional_keys}\"\n        )\n\n    try:\n        job_id = item[\"job_id\"][\"S\"]",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job_log:[50:56]\n==receipt_dynamo.entities.job_metric:[70:76]\n        self.timestamp: str\n        if isinstance(timestamp, datetime):\n            self.timestamp = timestamp.isoformat()\n        elif isinstance(timestamp, str):\n            self.timestamp = timestamp\n        else:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_label_analysis:[78:85]\n==receipt_dynamo.entities.receipt_line_item_analysis:[108:116]\n        elif isinstance(timestamp_added, str):\n            self.timestamp_added = timestamp_added\n        else:\n            raise ValueError(\n                \"timestamp_added must be a datetime object or a string\"\n            )\n\n        # Store timestamp_updated if provided",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_label_analysis:[120:133]\n==receipt_dynamo.entities.receipt_validation_summary:[123:132]\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\"S\": f\"RECEIPT#{self.receipt_id:05d}#ANALYSIS#VALIDATION\"},\n        }\n\n    def gsi1_key(self) -> Dict[str, Dict[str, str]]:\n        \"\"\"Return the GSI1 key for this item.\"\"\"\n        return {\n            \"GSI1PK\": {\"S\": \"ANALYSIS_TYPE\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_label_analysis:[74:81]\n==receipt_dynamo.entities.receipt_validation_summary:[100:106]\n        self.timestamp_added: str\n        if isinstance(timestamp_added, datetime):\n            self.timestamp_added = timestamp_added.isoformat()\n        elif isinstance(timestamp_added, str):\n            self.timestamp_added = timestamp_added\n        else:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.instance:[60:68]\n==receipt_dynamo.entities.job_resource:[72:80]\n        if not isinstance(instance_id, str) or not instance_id:\n            raise ValueError(\"instance_id must be a non-empty string\")\n        self.instance_id = instance_id\n\n        if not isinstance(instance_type, str) or not instance_type:\n            raise ValueError(\"instance_type must be a non-empty string\")\n        self.instance_type = instance_type\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data.base_operations.base:[287:293]\n==receipt_dynamo.data.base_operations.flattened_standard_mixin:[200:206]\n        response = self._client.get_item(\n            TableName=self.table_name,\n            Key={\n                \"PK\": {\"S\": primary_key},\n                \"SK\": {\"S\": sort_key},\n            },",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._completion_batch_result:[133:149]\n==receipt_dynamo.data._embedding_batch_result:[251:258]\n        )\n\n    @handle_dynamodb_errors(\"get_completion_batch_result\")\n    def get_completion_batch_result(\n        self,\n        batch_id: str,\n        receipt_id: int,\n        line_id: int,\n        word_id: int,\n        label: str,\n    ) -> CompletionBatchResult:\n        result = self._get_entity(\n            primary_key=f\"BATCH#{batch_id}\",\n            sort_key=(\n                f\"RESULT#RECEIPT#{receipt_id}#LINE#{line_id}\"\n                f\"#WORD#{word_id}#LABEL#{label}\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._embedding_batch_result:[52:73]\n==receipt_dynamo.data._receipt_letter:[39:95]\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,\n    CommonValidationMixin,\n):\n    \"\"\"DynamoDB accessor for EmbeddingBatchResult items.\"\"\"\n\n    @handle_dynamodb_errors(\"add_embedding_batch_result\")\n    def add_embedding_batch_result(\n        self, embedding_batch_result: EmbeddingBatchResult\n    ):\n        \"\"\"\n        Adds an EmbeddingBatchResult to the database.\n\n        Raises:\n            EntityAlreadyExistsError: If the embedding batch result already\n                exists\n            EntityValidationError: If embedding_batch_result parameters are\n                invalid\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._line:[29:71]\n==receipt_dynamo.data._receipt_metadata:[35:108]\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,\n    CommonValidationMixin,\n):\n    \"\"\"\n    A class providing methods to interact with \"ReceiptMetadata\" entities in\n    DynamoDB. This class is typically used within a DynamoClient to access and\n    manage receipt metadata records.\n\n    Attributes\n    ----------\n    _client : boto3.client\n        The Boto3 DynamoDB client (must be set externally).\n    table_name : str\n        The name of the DynamoDB table (must be set externally).\n\n    Methods\n    -------\n    add_receipt_metadata(receipt_metadata: ReceiptMetadata):\n        Adds a single ReceiptMetadata item to the database, ensuring unique ID.\n    add_receipt_metadatas(receipt_metadatas: List[ReceiptMetadata]):\n        Adds multiple ReceiptMetadata items to the database in chunks of up to\n        25 items.\n    update_receipt_metadata(receipt_metadata: ReceiptMetadata):\n        Updates an existing ReceiptMetadata item in the database.\n    update_receipt_metadatas(receipt_metadatas: List[ReceiptMetadata]):\n        Updates multiple ReceiptMetadata items using transactions.\n    delete_receipt_metadata(receipt_metadata: ReceiptMetadata):\n        Deletes a single ReceiptMetadata item from the database.\n    delete_receipt_metadatas(receipt_metadatas: List[ReceiptMetadata]):\n        Deletes multiple ReceiptMetadata items using transactions.\n    get_receipt_metadata(image_id: str, receipt_id: int) -> ReceiptMetadata:\n        Retrieves a single ReceiptMetadata item by image and receipt IDs.\n    get_receipt_metadatas_by_indices(\n        indices: list[tuple[str, int]]\n    ) -> list[ReceiptMetadata]:\n        Retrieves multiple ReceiptMetadata items by their indices.\n    get_receipt_metadatas(keys: list[dict]) -> list[ReceiptMetadata]:\n        Retrieves multiple ReceiptMetadata items using batch get.\n    list_receipt_metadatas(...) -> Tuple[List[ReceiptMetadata], dict | None]:\n        Lists ReceiptMetadata records with optional pagination.\n    get_receipt_metadatas_by_merchant(\n        ...\n    ) -> Tuple[List[ReceiptMetadata], dict | None]:\n        Retrieves ReceiptMetadata records by merchant name.\n    list_receipt_metadatas_with_place_id(\n        ...\n    ) -> Tuple[List[ReceiptMetadata], dict | None]:\n        Retrieves ReceiptMetadata records that have a specific place_id.\n    get_receipt_metadatas_by_confidence(\n        ...\n    ) -> Tuple[List[ReceiptMetadata], dict | None]:\n        Retrieves ReceiptMetadata records by confidence score.\n    \"\"\"\n\n    @handle_dynamodb_errors(\"add_receipt_metadata\")\n    def add_receipt_metadata(self, receipt_metadata: ReceiptMetadata) -> None:\n        \"\"\"\n        Adds a single ReceiptMetadata record to DynamoDB.\n\n        Parameters\n        ----------\n        receipt_metadata : ReceiptMetadata\n            The ReceiptMetadata instance to add.\n\n        Raises\n        ------\n        ValueError\n            If receipt_metadata is None, not a ReceiptMetadata, or if the\n            record already exists.\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[429:435]\n==receipt_dynamo.data._receipt_section:[428:434]\n                    f\"One or more parameters given were invalid: {e}\"\n                ) from e\n            elif error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e\n            else:\n                raise OperationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_chatgpt_validation:[232:261]\n==receipt_dynamo.data._receipt_letter:[196:238]\n        ]\n        self._batch_write_with_retry(request_items)\n\n    @handle_dynamodb_errors(\"get_receipt_chat_gpt_validation\")\n    def get_receipt_chat_gpt_validation(\n        self,\n        receipt_id: int,\n        image_id: str,\n        timestamp: str,\n    ) -> ReceiptChatGPTValidation:\n        \"\"\"Retrieves a single ReceiptChatGPTValidation by IDs.\n\n        Args:\n            receipt_id (int): The receipt ID.\n            image_id (str): The image ID.\n            timestamp (str): The validation timestamp.\n\n        Raises:\n            ValueError: If any parameters are invalid.\n            Exception: If the receipt ChatGPT validation cannot be\n                retrieved from DynamoDB.\n\n        Returns:\n            ReceiptChatGPTValidation: The retrieved receipt ChatGPT validation.\n        \"\"\"\n        self._validate_receipt_id(receipt_id)\n        if not isinstance(receipt_id, int):\n            raise EntityValidationError(\"receipt_id must be an integer.\")\n        self._validate_image_id(image_id)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._image:[302:308]\n==receipt_dynamo.data._receipt_word_label:[515:521]\n        query_params: QueryInputTypeDef = {\n            \"TableName\": self.table_name,\n            \"IndexName\": \"GSI3\",\n            \"KeyConditionExpression\": \"#t = :val\",\n            \"ExpressionAttributeNames\": {\"#t\": \"GSI3PK\"},\n            \"ExpressionAttributeValues\": {",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[422:428]\n==receipt_dynamo.data._receipt_line:[323:329]\n                ) from e\n            elif error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e\n            elif error_code == \"ValidationException\":",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line:[275:281]\n==receipt_dynamo.data._receipt_word:[442:448]\n        if isinstance(embedding_status, EmbeddingStatus):\n            status_str = embedding_status.value\n        elif isinstance(embedding_status, str):\n            status_str = embedding_status\n        else:\n            raise EntityValidationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._image:[219:225]\n==receipt_dynamo.data._receipt_line:[305:311]\n                response = self._client.query(\n                    TableName=self.table_name,\n                    IndexName=\"GSI1\",\n                    KeyConditionExpression=\"#gsi1pk = :status\",\n                    ExpressionAttributeNames={\"#gsi1pk\": \"GSI1PK\"},\n                    ExpressionAttributeValues={",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._image:[206:212]\n==receipt_dynamo.data._receipt_line:[291:297]\n            response = self._client.query(\n                TableName=self.table_name,\n                IndexName=\"GSI1\",\n                KeyConditionExpression=\"#gsi1pk = :status\",\n                ExpressionAttributeNames={\"#gsi1pk\": \"GSI1PK\"},\n                ExpressionAttributeValues={",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_dependency:[135:141]\n==receipt_dynamo.data._job_log:[198:204]\n        return self._query_entities(\n            index_name=None,\n            key_condition_expression=\"PK = :pk AND begins_with(SK, :sk_prefix)\",\n            expression_attribute_names=None,\n            expression_attribute_values={\n                \":pk\": {\"S\": f\"JOB#{dependent_job_id}\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job:[244:250]\n==receipt_dynamo.data._job_status:[108:114]\n            TableName=self.table_name,\n            KeyConditionExpression=\"PK = :pk AND begins_with(SK, :sk)\",\n            ExpressionAttributeValues={\n                \":pk\": {\"S\": f\"JOB#{job_id}\"},\n                \":sk\": {\"S\": \"STATUS#\"},\n            },",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._letter:[241:247]\n==receipt_dynamo.data._receipt_chatgpt_validation:[356:362]\n            index_name=None,\n            key_condition_expression=\"PK = :pkVal AND begins_with(SK, :skPrefix)\",\n            expression_attribute_names=None,\n            expression_attribute_values={\n                \":pkVal\": {\"S\": f\"IMAGE#{image_id}\"},\n                \":skPrefix\": {",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._ocr_routing_decision:[37:47]\n==receipt_dynamo.data._receipt_chatgpt_validation:[39:105]\n    DynamoDBBaseOperations,\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    CommonValidationMixin,\n):\n    @handle_dynamodb_errors(\"add_ocr_routing_decision\")\n    def add_ocr_routing_decision(\n        self, ocr_routing_decision: OCRRoutingDecision\n    ):",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_status:[78:84]\n==receipt_dynamo.data._ocr_routing_decision:[249:255]\n                ) from e\n            if error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e\n            if error_code == \"InternalServerError\":",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._ocr_job:[271:277]\n==receipt_dynamo.data._ocr_routing_decision:[70:76]\n            if error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e\n            if error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._ocr_job:[269:275]\n==receipt_dynamo.data._ocr_routing_decision:[109:115]\n        except ClientError as e:\n            error_code = e.response.get(\"Error\", {}).get(\"Code\", \"\")\n            if error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._completion_batch_result:[210:217]\n==receipt_dynamo.data._job_metric:[204:211]\n            validate_last_evaluated_key(last_evaluated_key)\n\n        return self._query_entities(\n            index_name=\"GSI1\",\n            key_condition_expression=\"GSI1PK = :pk\",\n            expression_attribute_names=None,\n            expression_attribute_values={",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[116:123]\n==receipt_dynamo.data._job_metric:[79:86]\n        if not timestamp or not isinstance(timestamp, str):\n            raise EntityValidationError(\n                \"Timestamp is required and must be a non-empty string.\"\n            )\n\n        result = self._get_entity(\n            primary_key=f\"JOB#{job_id}\",",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_field:[374:380]\n==receipt_dynamo.data.base_operations.base:[475:483]\n                raise EntityValidationError(\"Limit must be greater than 0\")\n\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )\n            # Validate DynamoDB LastEvaluatedKey structure",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_field:[321:327]\n==receipt_dynamo.data.base_operations.flattened_standard_mixin:[106:114]\n            raise EntityValidationError(\"Limit must be greater than 0\")\n        if last_evaluated_key is not None:\n            if not isinstance(last_evaluated_key, dict):\n                raise EntityValidationError(\n                    \"LastEvaluatedKey must be a dictionary\"\n                )",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_chatgpt_validation:[316:323]\n==receipt_dynamo.data._receipt_validation_category:[350:357]\n            )\n\n        return self._query_entities(\n            index_name=\"GSI1\",\n            key_condition_expression=\"#gsi1pk = :pk\",\n            expression_attribute_names={\"#gsi1pk\": \"GSI1PK\"},\n            expression_attribute_values={",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._ocr_job:[34:52]\n==receipt_dynamo.data._receipt_validation_category:[29:96]\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,\n    CommonValidationMixin,\n):\n    @handle_dynamodb_errors(\"add_ocr_job\")\n    def add_ocr_job(self, ocr_job: OCRJob):\n        \"\"\"Adds an OCR job to the database\n\n        Args:\n            ocr_job (OCRJob): The OCR job to add to the database\n\n        Raises:\n            EntityAlreadyExistsError: When a OCR job with the same ID\n                already exists\n            EntityValidationError: If ocr_job parameters are invalid\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._image:[310:319]\n==receipt_dynamo.data._receipt_label_analysis:[399:408]\n        }\n\n        if last_evaluated_key is not None:\n            query_params[\"ExclusiveStartKey\"] = last_evaluated_key\n\n        if limit is not None:\n            query_params[\"Limit\"] = limit\n\n        response = self._client.query(**query_params)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._instance:[35:41]\n==receipt_dynamo.data._receipt_label_analysis:[57:63]\n    DynamoDBBaseOperations,\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,\n    QueryByParentMixin,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_metadata:[402:408]\n==receipt_dynamo.data._word:[246:253]\n                response = self._client.batch_get_item(\n                    RequestItems=unprocessed\n                )\n                batch_items = response[\"Responses\"].get(self.table_name, [])\n                results.extend(batch_items)\n                unprocessed = response.get(\"UnprocessedKeys\", {})\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.completion_batch_result:[245:250]\n==receipt_dynamo.entities.embedding_batch_result:[259:264]\n            batch_id=batch_id,\n            image_id=image_id,\n            receipt_id=receipt_id,\n            line_id=line_id,\n            word_id=word_id,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.completion_batch_result:[29:36]\n==receipt_dynamo.entities.embedding_batch_result:[56:63]\n        assert_valid_uuid(batch_id)\n        self.batch_id = batch_id\n\n        assert_valid_uuid(image_id)\n        self.image_id = image_id\n\n        assert_type(\"receipt_id\", receipt_id, int, ValueError)",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.image:[341:346]\n==receipt_dynamo.entities.receipt:[416:421]\n        \"width\",\n        \"height\",\n        \"timestamp_added\",\n        \"raw_s3_bucket\",\n        \"raw_s3_key\",",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.image:[218:223]\n==receipt_dynamo.entities.receipt:[228:233]\n            \"width\": {\"N\": str(self.width)},\n            \"height\": {\"N\": str(self.height)},\n            \"timestamp_added\": {\"S\": self.timestamp_added},\n            \"raw_s3_bucket\": {\"S\": self.raw_s3_bucket},\n            \"raw_s3_key\": {\"S\": self.raw_s3_key},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.image:[43:48]\n==receipt_dynamo.entities.receipt:[57:62]\n    width: int\n    height: int\n    timestamp_added: str | datetime\n    raw_s3_bucket: str\n    raw_s3_key: str",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_letter:[132:137]\n==receipt_dynamo.entities.receipt_validation_result:[100:105]\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\n                \"S\": (\n                    f\"RECEIPT#{self.receipt_id:05d}#ANALYSIS#VALIDATION#\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line_item_analysis:[119:124]\n==receipt_dynamo.entities.receipt_validation_summary:[112:117]\n                self.timestamp_updated = timestamp_updated.isoformat()\n            elif isinstance(timestamp_updated, str):\n                self.timestamp_updated = timestamp_updated\n            else:\n                raise ValueError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[27:33]\n==receipt_dynamo.entities.receipt_field:[67:73]\n        if not isinstance(receipt_id, int):\n            raise ValueError(\"receipt_id must be an integer\")\n        if receipt_id <= 0:\n            raise ValueError(\"receipt_id must be positive\")\n        self.receipt_id: int = receipt_id\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_word:[161:166]\n==receipt_dynamo.entities.receipt_word_label:[213:218]\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\n                \"S\": (\n                    f\"RECEIPT#{self.receipt_id:05d}\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[71:76]\n==receipt_dynamo.entities.receipt_word_label:[106:111]\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\n                \"S\": (\n                    f\"RECEIPT#{self.receipt_id:05d}#LINE#{self.line_id:05d}\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.line:[77:87]\n==receipt_dynamo.entities.word:[84:90]\n        assert_valid_bounding_box(self.bounding_box)\n\n        assert_valid_point(self.top_right)\n\n        assert_valid_point(self.top_left)\n\n        assert_valid_point(self.bottom_right)\n\n        assert_valid_point(self.bottom_left)\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.ocr_job:[18:23]\n==receipt_dynamo.entities.ocr_routing_decision:[34:39]\n    image_id: str\n    job_id: str\n    s3_bucket: str\n    s3_key: str\n    created_at: datetime",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.job_metric:[203:218]\n==receipt_dynamo.entities.receipt_line_item_analysis:[427:440]\n            elif v is None:\n                result[k] = {\"NULL\": True}\n            else:\n                result[k] = {\"S\": str(v)}\n        return result\n\n    def _to_dynamodb_value(self, v: Any) -> Dict[str, Any]:\n        \"\"\"Converts a Python value to a DynamoDB value.\n\n        Args:\n            v (Any): The value to convert.\n\n        Returns:\n            Dict: The DynamoDB value representation.\n        \"\"\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_line_item_analysis:[100:106]\n==receipt_dynamo.entities.receipt_validation_category:[25:31]\n        if not isinstance(receipt_id, int):\n            raise ValueError(\"receipt_id must be an integer\")\n        if receipt_id <= 0:\n            raise ValueError(\"receipt_id must be positive\")\n        self.receipt_id: int = receipt_id\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_category:[214:219]\n==receipt_dynamo.entities.receipt_validation_result:[268:273]\n            return False\n        return (\n            self.receipt_id == other.receipt_id\n            and self.image_id == other.image_id\n            and self.field_name == other.field_name",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_category:[167:174]\n==receipt_dynamo.entities.receipt_validation_result:[218:225]\n        metadata = cls._dynamo_to_python(item.get(\"metadata\", {\"M\": {}}))\n\n        # Create the ReceiptValidationCategory\n        return cls(\n            receipt_id=receipt_id,\n            image_id=image_id,\n            field_name=field_name,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_category:[146:158]\n==receipt_dynamo.entities.receipt_validation_result:[186:196]\n        return item\n\n    @classmethod\n    def from_item(cls, item: Dict[str, Any]) -> \"ReceiptValidationResult\":\n        \"\"\"Create a ReceiptValidationResult from a DynamoDB item.\"\"\"\n        # Extract image_id, receipt_id, field_name, and result_index from keys\n        image_id = item[\"PK\"][\"S\"].split(\"#\")[1]\n        sk_parts = item[\"SK\"][\"S\"].split(\"#\")\n        receipt_id = int(sk_parts[1])\n        field_name = sk_parts[5]",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_validation_category:[52:58]\n==receipt_dynamo.entities.receipt_validation_result:[62:68]\n        if not isinstance(reasoning, str):\n            raise ValueError(\"reasoning must be a string\")\n        if not reasoning:\n            raise ValueError(\"reasoning must not be empty\")\n        self.reasoning = reasoning\n",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_chatgpt_validation:[135:146]\n==receipt_dynamo.entities.receipt_validation_category:[144:155]\n        item[\"metadata\"] = self._python_to_dynamo(self.metadata)\n\n        return item\n\n    @classmethod\n    def from_item(cls, item: Dict[str, Any]) -> \"ReceiptValidationCategory\":\n        \"\"\"Create a ReceiptValidationCategory from a DynamoDB item.\"\"\"\n        # Extract image_id, receipt_id, and field_name from keys\n        image_id = item[\"PK\"][\"S\"].split(\"#\")[1]\n        sk_parts = item[\"SK\"][\"S\"].split(\"#\")\n        receipt_id = int(sk_parts[1])",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.entities.receipt_structure_analysis:[627:632]\n==receipt_dynamo.entities.receipt_validation_category:[75:80]\n        return {\n            \"PK\": {\"S\": f\"IMAGE#{self.image_id}\"},\n            \"SK\": {\n                \"S\": (\n                    f\"RECEIPT#{self.receipt_id:05d}#ANALYSIS#STRUCTURE#\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._batch_summary:[51:56]\n==receipt_dynamo.data._completion_batch_result:[55:60]\n    DynamoDBBaseOperations,\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[429:435]\n==receipt_dynamo.data._receipt_word:[427:433]\n                    f\"One or more parameters given were invalid: {e}\"\n                ) from e\n            elif error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e\n            else:\n                raise OperationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[329:334]\n==receipt_dynamo.data._receipt_word:[428:433]\n                ) from e\n            elif error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e\n            else:\n                raise OperationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_structure_analysis:[193:198]\n==receipt_dynamo.entities.receipt_word_label:[214:219]\n                        \"PK\": {\"S\": f\"IMAGE#{analysis.image_id}\"},\n                        \"SK\": {\n                            \"S\": (\n                                f\"RECEIPT#{analysis.receipt_id:05d}\"\n                                f\"#ANALYSIS#STRUCTURE#{analysis.version}\"",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_metadata:[385:390]\n==receipt_dynamo.data._receipt_word:[241:246]\n            if not key[\"PK\"][\"S\"].startswith(\"IMAGE#\"):\n                raise EntityValidationError(\"PK must start with 'IMAGE#'\")\n            if not key[\"SK\"][\"S\"].startswith(\"RECEIPT#\"):\n                raise EntityValidationError(\"SK must start with 'RECEIPT#'\")\n            if not key[\"SK\"][\"S\"].split(\"#\")[-1] == \"METADATA\":",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._places_cache:[165:171]\n==receipt_dynamo.data._receipt_metadata:[254:259]\n            transact_items = [\n                TransactWriteItemTypeDef(\n                    Delete=DeleteTypeDef(\n                        TableName=self.table_name,\n                        Key=item.key,\n                        # ConditionExpression=\"attribute_exists(PK)\",",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[325:330]\n==receipt_dynamo.data._receipt_section:[421:426]\n                ) from e\n            elif error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[429:434]\n==receipt_dynamo.data._receipt_line:[330:335]\n                    f\"One or more parameters given were invalid: {e}\"\n                ) from e\n            elif error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e\n            else:",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_resource:[234:239]\n==receipt_dynamo.data.base_operations.flattened_standard_mixin:[355:360]\n        return self._query_entities(\n            index_name=None,\n            key_condition_expression=\"PK = :pk AND begins_with(SK, :sk)\",\n            expression_attribute_names=None,\n            expression_attribute_values={",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_checkpoint:[277:282]\n==receipt_dynamo.data._job_resource:[235:240]\n            index_name=None,\n            key_condition_expression=\"PK = :pk AND begins_with(SK, :sk)\",\n            expression_attribute_names=None,\n            expression_attribute_values={\n                \":pk\": {\"S\": f\"JOB#{job_id}\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_resource:[185:190]\n==receipt_dynamo.data._receipt_section:[429:434]\n                ) from e\n            elif error_code == \"InternalServerError\":\n                raise DynamoDBServerError(f\"Internal server error: {e}\") from e\n            else:\n                raise OperationError(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_resource:[181:186]\n==receipt_dynamo.data._receipt_line:[323:328]\n                ) from e\n            elif error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_status:[106:111]\n==receipt_dynamo.data._receipt_line:[345:350]\n        try:\n            response = self._client.query(\n                TableName=self.table_name,\n                KeyConditionExpression=\"PK = :pk AND begins_with(SK, :sk)\",\n                ExpressionAttributeValues={",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job:[174:179]\n==receipt_dynamo.data._ocr_job:[156:161]\n        transact_items = [\n            TransactWriteItemTypeDef(\n                Delete=DeleteTypeDef(\n                    TableName=self.table_name,\n                    Key=job.key,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._letter:[120:126]\n==receipt_dynamo.data._line:[129:135]\n        self._validate_image_id(image_id)\n\n        self._client.delete_item(\n            TableName=self.table_name,\n            Key={\n                \"PK\": {\"S\": f\"IMAGE#{image_id}\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._letter:[122:127]\n==receipt_dynamo.data._receipt_section:[177:182]\n            self._client.delete_item(\n                TableName=self.table_name,\n                Key={\n                    \"PK\": {\"S\": f\"IMAGE#{image_id}\"},\n                    \"SK\": {",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_line_item_analysis:[300:305]\n==receipt_dynamo.data._receipt_word:[322:327]\n        results, _ = self._query_entities(\n            index_name=None,\n            key_condition_expression=\"#pk = :pk_val AND begins_with(#sk, :sk_val)\",\n            expression_attribute_names={\"#pk\": \"PK\", \"#sk\": \"SK\"},\n            expression_attribute_values={",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._ocr_routing_decision:[232:237]\n==receipt_dynamo.data._receipt_metadata:[255:260]\n            TransactWriteItemTypeDef(\n                Delete=DeleteTypeDef(\n                    TableName=self.table_name,\n                    Key=item.key,\n                    ConditionExpression=(",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._ocr_routing_decision:[191:196]\n==receipt_dynamo.data._receipt_section:[176:181]\n        try:\n            self._client.delete_item(\n                TableName=self.table_name,\n                Key={\n                    \"PK\": {\"S\": f\"IMAGE#{ocr_routing_decision.image_id}\"},",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_status:[226:231]\n==receipt_dynamo.data._ocr_routing_decision:[249:254]\n                ) from e\n            if error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._job_status:[129:134]\n==receipt_dynamo.data._ocr_routing_decision:[69:74]\n                ) from e\n            if error_code == \"ProvisionedThroughputExceededException\":\n                raise DynamoDBThroughputError(\n                    f\"Provisioned throughput exceeded: {e}\"\n                ) from e",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._ocr_job:[271:276]\n==receipt_dynamo.data._ocr_routing_decision:[250:255]\n                if error_code == \"ProvisionedThroughputExceededException\":\n                    raise DynamoDBThroughputError(\n                        f\"Provisioned throughput exceeded: {e}\"\n                    ) from e\n                if error_code == \"InternalServerError\":",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._instance:[36:41]\n==receipt_dynamo.data.base_operations.standard_dynamo_mixin:[18:23]\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,\n    QueryByParentMixin,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._embedding_batch_result:[51:56]\n==receipt_dynamo.data._instance:[35:40]\n    DynamoDBBaseOperations,\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._completion_batch_result:[210:216]\n==receipt_dynamo.data._receipt_field:[380:386]\n            validate_last_evaluated_key(last_evaluated_key)\n\n        return self._query_entities(\n            index_name=\"GSI1\",\n            key_condition_expression=\"GSI1PK = :pk\",\n            expression_attribute_names=None,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._line:[28:33]\n==receipt_dynamo.data._receipt_label_analysis:[57:62]\n    DynamoDBBaseOperations,\n    SingleEntityCRUDMixin,\n    BatchOperationsMixin,\n    TransactionalOperationsMixin,\n    QueryByTypeMixin,",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.data._receipt_word:[238:243]\n==receipt_dynamo.data._word:[214:219]\n        for key in keys:\n            if not {\"PK\", \"SK\"}.issubset(key.keys()):\n                raise EntityValidationError(\"Keys must contain 'PK' and 'SK'\")\n            if not key[\"PK\"][\"S\"].startswith(\"IMAGE#\"):\n                raise EntityValidationError(\"PK must start with 'IMAGE#'\")",
        "message-id": "R0801"
    },
    {
        "type": "refactor",
        "module": "receipt_dynamo.entities.completion_batch_result",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "receipt_dynamo/entities/completion_batch_result.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==receipt_dynamo.utils.__init__:[7:12]\n==receipt_dynamo:[171:177]\n    \"BatchQueue\",\n    \"CircuitBreaker\",\n    \"CircuitBreakerOpenError\",\n    \"RetryManager\",\n    \"retry_with_backoff\",\n    # Additional exports",
        "message-id": "R0801"
    }
]
