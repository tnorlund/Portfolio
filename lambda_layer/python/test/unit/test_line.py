import pytest
from dynamo import Line, itemToLine

def test_init():
    """Test the Line constructor

    An example Line object has these attributes:
    - image_id: 1
    - id: 1
    - text: "06\/27\/2024"
    - x: 0.14956954529503239
    - y: 0.8868912353567051
    - width: 0.0872786737257435
    - height: 0.024234482472679675
    - angle: 7.7517295
    - confidence: 1
    
    """
    # image_id
    with pytest.raises(ValueError):
        Line(-1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1)
        Line(0.1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1)
    # id
    with pytest.raises(ValueError):
        Line(1, -1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1)
        Line(1, 0.1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1)
    # text
    with pytest.raises(ValueError):
        Line(1, -1, None, 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1)
    # x
    with pytest.raises(ValueError):
        Line(1, 1, "06\/27\/2024", 1, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1)
    # y
    with pytest.raises(ValueError):
        Line(1, 1, "06\/27\/2024", 0.14956954529503239, 1, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1)
    # width
    with pytest.raises(ValueError):
        Line(1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, -0.1, 0.024234482472679675, 7.7517295, 1)
        Line(1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 1, 0.024234482472679675, 7.7517295, 1)
    # height
    with pytest.raises(ValueError):
        Line(1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, -0.1, 7.7517295, 1)
        Line(1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 1, 7.7517295, 1)
    # angle
    with pytest.raises(ValueError):
        Line(1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, "Not an int nor a float", 1)
    # confidence
    with pytest.raises(ValueError):
        Line(1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, -0.1)
        Line(1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1.1)

    line = Line(
        1, 1, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert int(line.image_id) == 1
    assert int(line.id) == 1
    assert line.text == "06\/27\/2024"
    assert line.x == 0.14956954529503239
    assert line.y == 0.8868912353567051
    assert line.width == 0.0872786737257435
    assert line.height == 0.024234482472679675
    assert line.angle == 7.7517295
    assert line.confidence == 1.00

def test_key():
    """Test the Line.key() method"""
    line = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert line.key() == {"PK": {"S": "IMAGE#00001"}, "SK": {"S": "LINE#00002"}}

def test_to_item():
    """Test the Line.to_item() method"""
    line = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert line.to_item() == {
        "PK": {"S": "IMAGE#00001"},
        "SK": {"S": "LINE#00002"},
        "Type": {"S": "LINE"},
        "Text": {"S": "06\/27\/2024"}, 
        "X": {"N": "0.14956954529503239000"},
        "Y": {"N": "0.88689123535670510000"},
        "Width": {"N": "0.08727867372574350000"},
        "Height": {"N": "0.02423448247267967500"},
        "Angle": {"N": "7.7517295000"},
        "Confidence": {"N": "1.00"},
    }

def test_repr():
    """Test the Line.__repr__() method"""
    line = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert repr(line) == "Line(id=2, text='06\/27\/2024')"

def test_iter():
    """Test the Line.__iter__() method"""
    line = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert dict(line) == {
        "image_id": 1, 
        "id": 2,
        "text": "06\/27\/2024",
        "x": 0.14956954529503239,
        "y": 0.8868912353567051,
        "width": 0.0872786737257435,
        "height": 0.024234482472679675,
        "angle": 7.7517295,
        "confidence": 1,
    }

def test_eq():
    """Test the Line.__eq__() method"""
    line1 = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    line2 = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert line1 == line2, "the equal operator works with the same image_id, id, text, x, y, width, height, angle, confidence"

    line3 = Line(
        1, 3, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert line1 != line3, "the equal operator works with different id"
    line4 = Line(
        1, 2, "06\/27\/2025", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert line1 != line4, "the equal operator works with different text"
    line5 = Line(
        1, 2, "06\/27\/2024", 0.14956954529503237, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert line1 != line5, "the equal operator works with different x"
    line6 = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567052, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert line1 != line6, "the equal operator works with different y"
    line7 = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257433, 0.024234482472679675, 7.7517295, 1
    )
    assert line1 != line7, "the equal operator works with different width"
    line8 = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679673, 7.7517295, 1
    )
    assert line1 != line8, "the equal operator works with different height"
    line9 = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517294, 1
    )
    assert line1 != line9, "the equal operator works with different angle"
    line10 = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 0.88
    )
    assert line1 != line10, "the equal operator works with different confidence"

def test_itemToLine():
    """Test the itemToLine() function"""
    item = {
        "PK": {"S": "IMAGE#00001"},
        "SK": {"S": "LINE#00002"},
        "Type": {"S": "LINE"},
        "Text": {"S": "06\/27\/2024"},
        "X": {"N": "0.14956954529503239000"},
        "Y": {"N": "0.88689123535670510000"},
        "Width": {"N": "0.08727867372574350000"},
        "Height": {"N": "0.02423448247267967500"},
        "Angle": {"N": "7.7517295000"},
        "Confidence": {"N": "1.00"},
    }
    line = Line(
        1, 2, "06\/27\/2024", 0.14956954529503239, 0.8868912353567051, 0.0872786737257435, 0.024234482472679675, 7.7517295, 1
    )
    assert itemToLine(item) == line