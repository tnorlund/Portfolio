import pytest
from dynamo import Line, itemToLine

# from dynamo.entities._utils import map_to_dict


def test_init():
    """Test the Line constructor"""
    line = Line(
        1,
        1,
        "07\/03\/2024",
        {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        {"y": 0.9307722198001792, "x": 0.5323281614683008},
        {"y": 0.9395758560096301, "x": 0.44837726658954413},
        {"x": 0.529377231641995, "y": 0.9167082878750482},
        {"x": 0.4454263367632384, "y": 0.9255119240844992},
        -5.986527,
        -0.10448461,
        1,
    )
    assert int(line.image_id) == 1
    assert int(line.id) == 1
    assert line.text == "07\/03\/2024"
    assert line.boundingBox == {
        "x": 0.4454263367632384,
        "height": 0.022867568134581906,
        "width": 0.08690182470506236,
        "y": 0.9167082878750482,
    }
    assert line.topRight == {
        "y": 0.9307722198001792,
        "x": 0.5323281614683008,
    }, "topRight"
    assert line.topLeft == {
        "y": 0.9395758560096301,
        "x": 0.44837726658954413,
    }, "topLeft"
    assert line.bottomRight == {
        "x": 0.529377231641995,
        "y": 0.9167082878750482,
    }, "bottomRight"
    assert line.bottomLeft == {
        "x": 0.4454263367632384,
        "y": 0.9255119240844992,
    }, "bottomLeft"
    assert line.angleDegrees == -5.986527
    assert line.angleRadians == -0.10448461
    assert line.confidence == 1.00

    # Test bad Image ID
    with pytest.raises(ValueError):
        Line(
            -1,
            1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            -5.986527,
            -0.10448461,
            1,
        )
    
    # Test bad Line ID
    with pytest.raises(ValueError):
        Line(
            1,
            -1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            -5.986527,
            -0.10448461,
            1,
        )
    
    # Test bad Text
    with pytest.raises(ValueError):
        Line(
            1,
            1,
            1,
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            -5.986527,
            -0.10448461,
            1,
        )

    # Test bad BoundingBox
    with pytest.raises(ValueError):
        Line(
            1,
            1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            -5.986527,
            -0.10448461,
            1,
        )
    
    # Test bad TopRight
    with pytest.raises(ValueError):
        Line(
            1,
            1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            -5.986527,
            -0.10448461,
            1,
        )
    
    # Test bad TopLeft
    with pytest.raises(ValueError):
        Line(
            1,
            1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            -5.986527,
            -0.10448461,
            1,
        )
    
    # Test bad BottomRight
    with pytest.raises(ValueError):
        Line(
            1,
            1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            -5.986527,
            -0.10448461,
            1,
        )
    
    # Test bad BottomLeft
    with pytest.raises(ValueError):
        Line(
            1,
            1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"y": 0.9255119240844992},
            -5.986527,
            -0.10448461,
            1,
        )
    
    # Test bad AngleDegrees
    with pytest.raises(ValueError):
        Line(
            1,
            1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            "-5.986527",
            -0.10448461,
            1,
        )
    
    # Test bad AngleRadians
    with pytest.raises(ValueError):
        Line(
            1,
            1,
            "07\/03\/2024",
            {
                "x": 0.4454263367632384,
                "height": 0.022867568134581906,
                "width": 0.08690182470506236,
                "y": 0.9167082878750482,
            },
            {"y": 0.9307722198001792, "x": 0.5323281614683008},
            {"y": 0.9395758560096301, "x": 0.44837726658954413},
            {"x": 0.529377231641995, "y": 0.9167082878750482},
            {"x": 0.4454263367632384, "y": 0.9255119240844992},
            -5.986527,
            "-0.10448461",
            1,
        )
        


def test_key():
    """Test the Line.key() method"""
    line = Line(
        1,
        1,
        "07\/03\/2024",
        {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        {"y": 0.9307722198001792, "x": 0.5323281614683008},
        {"y": 0.9395758560096301, "x": 0.44837726658954413},
        {"x": 0.529377231641995, "y": 0.9167082878750482},
        {"x": 0.4454263367632384, "y": 0.9255119240844992},
        -5.986527,
        -0.10448461,
        1,
    )
    assert line.key() == {"PK": {"S": "IMAGE#00001"}, "SK": {"S": "LINE#00001"}}


def test_to_item():
    """Test the Line.to_item() method"""
    line = Line(
        1,
        1,
        "07\/03\/2024",
        {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        {"y": 0.9307722198001792, "x": 0.5323281614683008},
        {"y": 0.9395758560096301, "x": 0.44837726658954413},
        {"x": 0.529377231641995, "y": 0.9167082878750482},
        {"x": 0.4454263367632384, "y": 0.9255119240844992},
        -5.986527,
        -0.10448461,
        1,
    )
    assert line.to_item() == {
        "PK": {"S": "IMAGE#00001"},
        "SK": {"S": "LINE#00001"},
        "Type": {"S": "LINE"},
        "Text": {"S": "07\/03\/2024"},
        "BoundingBox": {
            "M": {
                "x": {"N": "0.445426336763238400"},
                "height": {"N": "0.022867568134581906"},
                "width": {"N": "0.086901824705062360"},
                "y": {"N": "0.916708287875048200"},
            }
        },
        "TopRight": {
            "M": {
                "y": {"N": "0.930772219800179200"},
                "x": {"N": "0.532328161468300800"},
            }
        },
        "TopLeft": {
            "M": {
                "y": {"N": "0.939575856009630100"},
                "x": {"N": "0.448377266589544130"},
            }
        },
        "BottomRight": {
            "M": {
                "x": {"N": "0.529377231641995000"},
                "y": {"N": "0.916708287875048200"},
            }
        },
        "BottomLeft": {
            "M": {
                "x": {"N": "0.445426336763238400"},
                "y": {"N": "0.925511924084499200"},
            }
        },
        "AngleDegrees": {"N": "-5.9865270000"},
        "AngleRadians": {"N": "-0.1044846100"},
        "Confidence": {"N": "1.00"},
    }


def test_repr():
    """Test the Line.__repr__() method"""
    line = Line(
        1,
        1,
        "07\/03\/2024",
        {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        {"y": 0.9307722198001792, "x": 0.5323281614683008},
        {"y": 0.9395758560096301, "x": 0.44837726658954413},
        {"x": 0.529377231641995, "y": 0.9167082878750482},
        {"x": 0.4454263367632384, "y": 0.9255119240844992},
        -5.986527,
        -0.10448461,
        1,
    )
    assert repr(line) == "Line(id=1, text='07\/03\/2024')"


def test_iter():
    """Test the Line.__iter__() method"""
    line = Line(
        1,
        1,
        "07\/03\/2024",
        {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        {"y": 0.9307722198001792, "x": 0.5323281614683008},
        {"y": 0.9395758560096301, "x": 0.44837726658954413},
        {"x": 0.529377231641995, "y": 0.9167082878750482},
        {"x": 0.4454263367632384, "y": 0.9255119240844992},
        -5.986527,
        -0.10448461,
        1,
    )
    assert dict(line) == {
        "image_id": 1,
        "id": 1,
        "text": "07\/03\/2024",
        "boundingBox": {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        "topRight": {"y": 0.9307722198001792, "x": 0.5323281614683008},
        "topLeft": {"y": 0.9395758560096301, "x": 0.44837726658954413},
        "bottomRight": {"x": 0.529377231641995, "y": 0.9167082878750482},
        "bottomLeft": {"x": 0.4454263367632384, "y": 0.9255119240844992},
        "angleDegrees": -5.986527,
        "angleRadians": -0.10448461,
        "confidence": 1,
    }


def test_eq():
    """Test the Line.__eq__() method"""
    line1 = Line(
        1,
        1,
        "07\/03\/2024",
        {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        {"y": 0.9307722198001792, "x": 0.5323281614683008},
        {"y": 0.9395758560096301, "x": 0.44837726658954413},
        {"x": 0.529377231641995, "y": 0.9167082878750482},
        {"x": 0.4454263367632384, "y": 0.9255119240844992},
        -5.986527,
        -0.10448461,
        1,
    )
    line2 = Line(
        1,
        1,
        "07\/03\/2024",
        {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        {"y": 0.9307722198001792, "x": 0.5323281614683008},
        {"y": 0.9395758560096301, "x": 0.44837726658954413},
        {"x": 0.529377231641995, "y": 0.9167082878750482},
        {"x": 0.4454263367632384, "y": 0.9255119240844992},
        -5.986527,
        -0.10448461,
        1,
    )
    assert line1 == line2


def map_to_dict(map):
    """
    Convert a DynamoDB map to a dictionary.
    """
    return {key: float(value["N"]) for key, value in map.items() }


def test_map_to_dict():
    mapped_item = {
        "BoundingBox": {
            "M": {
                "x": {"N": "0.445426336763238400"},
                "height": {"N": "0.022867568134581906"},
                "width": {"N": "0.086901824705062360"},
                "y": {"N": "0.916708287875048200"},
            }
        },
    }
    assert map_to_dict(mapped_item["BoundingBox"]['M']) == {
        "x": 0.4454263367632384,
        "height": 0.022867568134581906,
        "width": 0.08690182470506236,
        "y": 0.9167082878750482,
    }


def test_itemToLine():
    item = {
        "PK": {"S": "IMAGE#00001"},
        "SK": {"S": "LINE#00001"},
        "Type": {"S": "LINE"},
        "Text": {"S": "07\/03\/2024"},
        "BoundingBox": {
            "M": {
                "x": {"N": "0.445426336763238400"},
                "height": {"N": "0.022867568134581906"},
                "width": {"N": "0.086901824705062360"},
                "y": {"N": "0.916708287875048200"},
            }
        },
        "TopRight": {
            "M": {
                "y": {"N": "0.930772219800179200"},
                "x": {"N": "0.532328161468300800"},
            }
        },
        "TopLeft": {
            "M": {
                "y": {"N": "0.939575856009630100"},
                "x": {"N": "0.448377266589544130"},
            }
        },
        "BottomRight": {
            "M": {
                "x": {"N": "0.529377231641995000"},
                "y": {"N": "0.916708287875048200"},
            }
        },
        "BottomLeft": {
            "M": {
                "x": {"N": "0.445426336763238400"},
                "y": {"N": "0.925511924084499200"},
            }
        },
        "AngleDegrees": {"N": "-5.9865270000"},
        "AngleRadians": {"N": "-0.1044846100"},
        "Confidence": {"N": "1.00"},
    }
    assert Line(
        1,
        1,
        "07\/03\/2024",
        {
            "x": 0.4454263367632384,
            "height": 0.022867568134581906,
            "width": 0.08690182470506236,
            "y": 0.9167082878750482,
        },
        {"y": 0.9307722198001792, "x": 0.5323281614683008},
        {"y": 0.9395758560096301, "x": 0.44837726658954413},
        {"x": 0.529377231641995, "y": 0.9167082878750482},
        {"x": 0.4454263367632384, "y": 0.9255119240844992},
        -5.986527,
        -0.10448461,
        1,
    ) == itemToLine(item)
