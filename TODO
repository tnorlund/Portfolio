# Receipt Label Package TODOs

## Create Analysis Items
- [x] Create Receipt Label Analysis in DynamoDB
- [x] Create Receipt Structure Analysis in DynamoDB
- [x] Create Receipt Line Items Analysis in DynamoDB
- [ ] Create Receipt Validation in DynamoDB

## Align Base Classes with DynamoDB Schema
- [x] Consistency in Naming:
  - [x] Rename `discovered_sections` to `sections` in StructureAnalysis to match schema
- [x] Position Representation:
  - [x] Decide on consistent approach for positions (bounding boxes vs. individual points)
  - [x] Ensure consistent representation across ReceiptWord and ReceiptLine classes
- [ ] Metadata and Version Tracking:
  - [ ] Add version fields to analysis classes
  - [ ] Ensure timestamp fields are consistently used
  - [x] Add standardized metadata structure across all classes:
    - [x] Include processing metrics (time, API calls)
    - [x] Add source information (model/version)
    - [x] Track creation and modification timestamps
  - [x] Implement consistent versioning approach:
    - [x] Add version field to LabelAnalysis
    - [x] Add version field to LineItemAnalysis
    - [x] Add version field to ValidationAnalysis
  - [x] Add processing history tracking in metadata:
    - [x] Track creation events
    - [x] Track update events with change descriptions
    - [x] Record model/algorithm versions used
  - [x] Create helper methods for version operations:
    - [x] Add version comparison methods
    - [x] Add timestamp conversion utilities
- [ ] Validation Structure:
  - [ ] Review ValidationAnalysis to ensure it represents all schema categories
  - [ ] Ensure proper representation of validation status enums
  - [ ] Integrate NER label validation:
    - [ ] Add validation rules for semantic correctness of NER labels
    - [ ] Validate consistency between line item analysis and NER labels
    - [ ] Implement coverage metrics for required label categories
  - [ ] Add validation visualization for NER labels:
    - [ ] Implement colored highlighting of labeled entities
    - [ ] Create confusion matrix for predicted vs. validated labels
    - [ ] Generate validation reports focused on NER quality
- [ ] Data Transformation:
  - [x] Update `from_dynamo` and `to_dynamo` methods to handle proper transformations
  - [x] Add special handling for nested objects and arrays
  - [ ] Create consistent serialization methods across all classes:
    - [x] Implement `to_dynamo()` for LabelAnalysis
    - [x] Implement `from_dynamo()` for LabelAnalysis
    - [x] Implement `to_dynamo()` for StructureAnalysis
    - [x] Implement `from_dynamo()` for StructureAnalysis
    - [x] Implement `to_dynamo()` for LineItemAnalysis
    - [x] Implement `from_dynamo()` for LineItemAnalysis
    - [ ] Implement `to_dynamo()` for ValidationAnalysis
    - [ ] Implement `from_dynamo()` for ValidationAnalysis
  - [x] Add integration tests for serialization/deserialization for ReceiptLabelAnalysis
  - [ ] Add integration tests for serialization/deserialization for other analysis types
- [ ] Optional vs. Required Fields:
  - [ ] Review which fields are required in schema versus optional in models
  - [ ] Adjust default values or optionality to match schema requirements

## Implement Base Classes
- [x] Create Receipt Word Label class
- [x] Create Receipt Field class
- [x] Create LabelAnalysis class
- [x] Create StructureAnalysis class
- [x] Create LineItemAnalysis class
- [x] Create ValidationAnalysis class

## Remove Tag System
- [x] Delete Word Tag items from DynamoDB
- [x] Delete Receipt Word Tag items from DynamoDB
- [x] Delete GPT Prompt items from DynamoDB
- [x] Remove tags attribute from Word items
- [x] Remove tags attribute from Receipt Word items
- [x] Remove GPT prompt-related code from Receipt Dynamo
- [ ] Remove tag-related code from codebase
  - [ ] Prove new labeling approach works better

## Update `process.py`

## Improve GPT Integration
- [x] Update gpt.py validation functions:
  - [x] Replace confidence score with reasoning in _validate_gpt_response_structure_analysis
  - [x] Replace confidence score with reasoning in _validate_gpt_response_field_labeling
  - [x] Replace confidence score with reasoning in _validate_gpt_response_line_item_analysis

## Iterative Changes to receipt_analyzer.py and llm_processor.py
- [x] Modify receipt_analyzer.py:
  - [x] Test that structure_analysis still returns correctly with reasoning instead of confidence
  - [x] Test that field_labeling still returns correctly with reasoning instead of confidence
  - [x] Test that line_item_analysis still returns correctly with reasoning instead of confidence
  - [x] Update any docstrings to reflect reasoning instead of confidence scores
  - [x] Add new debug logging for reasoning fields

- [x] Modify llm_processor.py:
  - [x] Update _process_missing_components to handle reasoning fields
  - [x] Modify the updates dictionary structure to include reasoning
  - [x] Test that analysis extraction still works with updated GPT response format
  - [x] Add backward compatibility for code expecting confidence scores
  - [x] Update any docstrings to reflect reasoning instead of confidence scores

## Update processors/line_item_processor.py:
  - [x] Replace _calculate_confidence with _calculate_reasoning in FastPatternMatcher
  - [x] Update reasoning to explain why line items match or don't match

## Add Features
- [ ] Add position tracking to Label Analysis
- [ ] Add pattern detection to Structure Analysis
- [ ] Add price/quantity parsing to Line Items
- [ ] Add validation types to Receipt Validation
- [ ] Add reasoning field to validation results

## Line Item Processor and Validator Update
- [x] Define standardized NER label vocabulary for receipts:
  1. Item Description Labels
    - ITEM_NAME: For the primary product name (e.g., "APPLES", "ALFRESCO SLTD BUTTER")
  2. Quantity Labels
    - ITEM_QUANTITY: For numeric quantity values (e.g., "2", "1.31")
    - ITEM_UNIT: For unit of measure (e.g., "EA", "lb")
  3. Price Labels
    - ITEM_PRICE: For unit prices (e.g., "$3.99")
    - ITEM_TOTAL: For extended prices of individual items (e.g., "$17.98" for 2 items at $8.99)
  4. Receipt Summary Labels
    - SUBTOTAL: For the subtotal amount
    - TAX: For tax amount
    - DISCOUNT: For any discounts applied
    - TOTAL: For the final total amount
  5. Modifier Labels (for special cases)
    - ITEM_MODIFIER: For modifiers like "void", "discount", "special price"
- [x] Enhance line item processing to apply standardized labels:
  - [x] Update LineItemProcessor to assign labels to words based on their role
  - [x] Implement metadata structure to track line item associations separate from labels


## Testing
- [ ] Write unit tests for each analysis class
- [x] Write integration tests for DynamoDB operations for ReceiptLabelAnalysis
- [ ] Write integration tests for remaining DynamoDB operations
- [ ] Create test data for each analysis type
- [ ] Test migration procedures
- [ ] Test GPT reasoning responses
- [ ] Create test cases for common validation scenarios

## Documentation
- [ ] Update README with new analysis items
- [ ] Document DynamoDB schemas
- [ ] Add query examples
- [ ] Document validation statuses
- [ ] Document GPT reasoning patterns
- [ ] Add examples of good vs bad reasoning responses
