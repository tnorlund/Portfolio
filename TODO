# Merchant Data Cleaning Strategy

## Phase 1: One-Time Batch Cleanup (Manual Run)

- [x] **Create/Adapt Batch Script:** Create a script/Lambda (`BatchCleanMerchants`) based on `merchant_clustering.py` logic.
- [x] **Load Existing Data:** Modify the script to load all relevant `ReceiptMetadata` items from the DynamoDB table.
- [x] **Implement Clustering:** Use `place_id`-first clustering, with fuzzy name/address/phone fallback for records without `place_id`.
- [x] **Implement Canonical Selection:** Use `choose_canonical_metadata` logic (with source prioritization: ADDRESS_LOOKUP > NEARBY_LOOKUP > TEXT_SEARCH > PHONE_LOOKUP) to select the best representative record per cluster.
- [x] **Implement Normalization:** Normalize the address (`normalize_address`) from the canonical record. Use the original name/phone from the canonical record.
- [x] **Implement DynamoDB Update:** For every `ReceiptMetadata` item, update it in DynamoDB with new attributes (`canonical_place_id`, `canonical_merchant_name`, `canonical_address`, `canonical_phone_number`, potentially `cluster_id`).
- [x] **Execute:** Run this script once to clean the existing data.

## Phase 2: Ongoing Incremental Consolidation (Step Function Integration)

- [x] **Modify ReceiptMetadata Class:** Update the class to add canonical field support (`canonical_place_id`, `canonical_merchant_name`, `canonical_address`, `canonical_phone_number`).
- [x] **Update DynamoDB Functions:** Enhance `update_items_with_canonical` to use `ReceiptMetadata` methods for better integration.
- [x] **Create New Lambda:** Define a new Lambda function (`ConsolidateNewMetadataLambda`) responsible for consolidating newly created metadata.
  - [x] Logic: Fetch new records based on input keys (`image_id`, `receipt_id`).
  - [x] Logic: For records with `place_id`, query DynamoDB GSI for existing cleaned records with the same `place_id`.
  - [x] Logic: If match found, copy canonical attributes (`canonical_*`) from matched record to the new record via `UpdateItem`.
  - [x] Logic: If no `place_id` or no match found, self-canonize the new record (set `canonical_*` based on its own data) via `UpdateItem`.
  - [x] Permissions: Grant necessary DynamoDB Get/BatchGet/Update/Query permissions.
- [x] **Modify Step Function:** Update `ValidateMerchantStepFunctions` state machine definition.
  - [x] Add a new `ConsolidateMetadata` Task state after the `ForEachReceipt` Map state.
  - [x] Configure the new Task state to invoke `ConsolidateNewMetadataLambda`.
  - [x] Ensure the output of the Map state is correctly passed as input to the new Task state.
- [x] **Modify GSI:** Repurposed GSI2 to support efficient place_id-based queries for the consolidation process. Also updated GSI1 to use canonical merchant names when available.
- [x] **Deploy:** Deploy the new Lambda and the updated Step Function definition.

## Phase 3: Periodic Full Re-consolidation (Scheduled Batch Job)

- [x] **Finalize Batch Script:** Ensure the `BatchCleanMerchants` script from Phase 1 is robust and runnable in a scheduled environment (e.g., as a Lambda).
- [x] **Choose Scheduling Method:** Decide how to run the batch job periodically (e.g., CloudWatch Scheduled Event triggering Lambda, Fargate Task, EC2 cron job).
- [x] **Implement Scheduling:** Set up the chosen scheduling mechanism.
- [x] **(Optional) Outlier Detection:** Enhance the batch script to detect and potentially flag clusters with significant geographic discrepancies (e.g., different states for the same `place_id`).
