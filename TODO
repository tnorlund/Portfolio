# Receipt Label Package TODOs

## üêõ Fix Items in DynamoDB
- [ ] Set the receipt ID to be `:05d` padded
- [ ] Figure out where `"type"` is being set from for the Validation Categories
- [ ] Metadata not being set for some "analysis" items

## Create Analysis Items
- [x] Create Receipt Label Analysis in DynamoDB
- [x] Create Receipt Structure Analysis in DynamoDB
- [x] Create Receipt Line Items Analysis in DynamoDB
- [x] Create Receipt Validation in DynamoDB using split storage pattern:
  - [x] Implement Receipt Validation Summary in DynamoDB
  - [x] Implement Receipt Validation Category in DynamoDB
  - [x] Implement Receipt Validation Result in DynamoDB
  - [x] Implement Receipt ChatGPT Validation in DynamoDB

## Align Base Classes with DynamoDB Schema
- [x] Consistency in Naming:
  - [x] Rename `discovered_sections` to `sections` in StructureAnalysis to match schema
- [x] Position Representation:
  - [x] Decide on consistent approach for positions (bounding boxes vs. individual points)
  - [x] Ensure consistent representation across ReceiptWord and ReceiptLine classes
- [ ] Metadata and Version Tracking:
  - [ ] Add version fields to analysis classes
  - [ ] Ensure timestamp fields are consistently used
  - [x] Add standardized metadata structure across all classes:
    - [x] Include processing metrics (time, API calls)
    - [x] Add source information (model/version)
    - [x] Track creation and modification timestamps
  - [x] Implement consistent versioning approach:
    - [x] Add version field to LabelAnalysis
    - [x] Add version field to LineItemAnalysis
    - [x] Add version field to ValidationAnalysis
  - [x] Add processing history tracking in metadata:
    - [x] Track creation events
    - [x] Track update events with change descriptions
    - [x] Record model/algorithm versions used
  - [x] Create helper methods for version operations:
    - [x] Add version comparison methods
    - [x] Add timestamp conversion utilities
- [ ] Validation Structure:
  - [ ] Review ValidationAnalysis to ensure it represents all schema categories
  - [ ] Ensure proper representation of validation status enums
  - [ ] Integrate NER label validation:
    - [ ] Add validation rules for semantic correctness of NER labels
    - [ ] Validate consistency between line item analysis and NER labels
    - [ ] Implement coverage metrics for required label categories
  - [ ] Add validation visualization for NER labels:
    - [ ] Implement colored highlighting of labeled entities
    - [ ] Create confusion matrix for predicted vs. validated labels
    - [ ] Generate validation reports focused on NER quality
- [ ] Data Transformation:
  - [x] Update `from_dynamo` and `to_dynamo` methods to handle proper transformations
  - [x] Add special handling for nested objects and arrays
  - [ ] Create consistent serialization methods across all classes:
    - [x] Implement `to_dynamo()` for LabelAnalysis
    - [x] Implement `from_dynamo()` for LabelAnalysis
    - [x] Implement `to_dynamo()` for StructureAnalysis
    - [x] Implement `from_dynamo()` for StructureAnalysis
    - [x] Implement `to_dynamo()` for LineItemAnalysis
    - [x] Implement `from_dynamo()` for LineItemAnalysis
    - [x] Implement split storage serialization for ValidationAnalysis:
      - [x] Implement `to_dynamo_validation_summary()` for ValidationAnalysis (creates ReceiptValidationSummary objects with ValidationAnalysis attributes)
      - [x] Implement `to_dynamo_validation_categories()` for ValidationAnalysis (creates ReceiptValidationCategory objects with ValidationAnalysis attributes)
      - [x] Implement `to_dynamo_validation_results()` for ValidationAnalysis (creates ReceiptValidationResult objects with ValidationAnalysis attributes)
      - [x] Implement `from_dynamo_items()` to reconstruct ValidationAnalysis from ReceiptValidationSummary, ReceiptValidationCategory, and ReceiptValidationResult items
    - [ ] Implement ChatGPT second-pass validation serialization:
      - [ ] Implement `to_dynamo_chatgpt_validation()` method (creates ReceiptChatGPTValidation items with PK=IMAGE#<image_id>, SK=RECEIPT#<receipt_id>#ANALYSIS#VALIDATION#CHATGPT#<timestamp>)
      - [ ] Implement `from_dynamo_chatgpt_validation()` method to reconstruct ChatGPT validation from DynamoDB items
  - [x] Add integration tests for serialization/deserialization for ReceiptLabelAnalysis
  - [x] Add integration tests for serialization/deserialization for ValidationAnalysis
  - [ ] Add integration tests for serialization/deserialization for other analysis types
- [ ] Optional vs. Required Fields:
  - [ ] Review which fields are required in schema versus optional in models
  - [ ] Adjust default values or optionality to match schema requirements

## Implement Base Classes
- [x] Create Receipt Word Label class
- [x] Create Receipt Field class
- [x] Create LabelAnalysis class
- [x] Create StructureAnalysis class
- [x] Create LineItemAnalysis class
- [x] Create ValidationAnalysis class

## Implement DynamoDB CRUD Operations
- [ ] Create a dedicated module for analysis operations:
  - [ ] Create `receipt_label/receipt_label/data/analysis_operations.py` module
  - [ ] Define common utility functions for DynamoDB operations
  - [ ] Implement error handling and logging for DynamoDB operations
  - [ ] Add documentation for each operation with usage examples

- [ ] Implement Label Analysis operations:
  - [ ] Create `get_label_analysis(receipt_id, image_id)` function leveraging `LabelAnalysis.from_dynamo()`
  - [ ] Create `list_label_analyses_by_receipt(receipt_id, limit=None, last_evaluated_key=None)` function
  - [ ] Create `list_label_analyses_by_image(image_id, limit=None, last_evaluated_key=None)` function
  - [ ] Create `save_label_analysis(label_analysis)` function utilizing `LabelAnalysis.to_dynamo()`
  - [ ] Create `delete_label_analysis(receipt_id, image_id)` function

- [ ] Implement Structure Analysis operations:
  - [ ] Create `get_structure_analysis(receipt_id, image_id)` function leveraging `StructureAnalysis.from_dynamo()`
  - [ ] Create `list_structure_analyses_by_receipt(receipt_id, limit=None, last_evaluated_key=None)` function
  - [ ] Create `save_structure_analysis(structure_analysis)` function utilizing `StructureAnalysis.to_dynamo()`
  - [ ] Create `delete_structure_analysis(receipt_id, image_id)` function

- [ ] Implement Line Item Analysis operations:
  - [ ] Create `get_line_item_analysis(receipt_id, image_id)` function leveraging `LineItemAnalysis.from_dynamo()`
  - [ ] Create `list_line_item_analyses_by_receipt(receipt_id, limit=None, last_evaluated_key=None)` function
  - [ ] Create `save_line_item_analysis(line_item_analysis)` function utilizing `LineItemAnalysis.to_dynamo()`
  - [ ] Create `delete_line_item_analysis(receipt_id, image_id)` function

- [ ] Implement Validation Analysis operations with split storage support:
  - [ ] Create `get_validation_analysis(receipt_id, image_id)` function leveraging `from_dynamo_items()`
  - [ ] Create `list_validation_analyses_by_receipt(receipt_id, limit=None, last_evaluated_key=None)` function
  - [ ] Create `save_validation_analysis(validation_analysis)` function utilizing the split storage pattern methods
  - [ ] Create `delete_validation_analysis(receipt_id, image_id)` function to delete all related items

- [ ] Implement ChatGPT Validation operations:
  - [ ] Create `get_chatgpt_validation(receipt_id, image_id, timestamp)` function
  - [ ] Create `list_chatgpt_validations_by_receipt_image(receipt_id, image_id)` function
  - [ ] Create `save_chatgpt_validation(chatgpt_validation)` function
  - [ ] Create `delete_chatgpt_validation(receipt_id, image_id, timestamp)` function

- [ ] Add batch and transaction support:
  - [ ] Implement `batch_get_analyses(receipt_image_pairs, analysis_type)` function for efficient retrieval
  - [ ] Implement `batch_save_analyses(analyses, analysis_type)` function for efficient creation/updates
  - [ ] Implement `batch_delete_analyses(receipt_image_pairs, analysis_type)` function
  - [ ] Create `save_receipt_analysis_transaction(label_analysis, structure_analysis, line_item_analysis, validation_analysis)` function for atomic operations
  - [ ] Create `delete_receipt_analysis_transaction(receipt_id, image_id)` function for atomic deletion

- [ ] Integrate with existing code:
  - [ ] Add analysis saving to the `process_receipt` function
  - [ ] Add error handling and retry logic for DynamoDB operations
  - [ ] Implement version checking before updates
  - [ ] Add metadata tracking for DynamoDB operations

- [ ] Create unit and integration tests:
  - [ ] Write unit tests for each analysis operation
  - [ ] Create mock DynamoDB responses for testing
  - [ ] Implement integration tests with actual DynamoDB
  - [ ] Test transaction rollback scenarios

## Remove Tag System
- [x] Delete Word Tag items from DynamoDB
- [x] Delete Receipt Word Tag items from DynamoDB
- [x] Delete GPT Prompt items from DynamoDB
- [x] Remove tags attribute from Word items
- [x] Remove tags attribute from Receipt Word items
- [x] Remove GPT prompt-related code from Receipt Dynamo
- [ ] Remove tag-related code from codebase
  - [ ] Prove new labeling approach works better

## Update `process.py`

## Improve GPT Integration
- [x] Update gpt.py validation functions:
  - [x] Replace confidence score with reasoning in _validate_gpt_response_structure_analysis
  - [x] Replace confidence score with reasoning in _validate_gpt_response_field_labeling
  - [x] Replace confidence score with reasoning in _validate_gpt_response_line_item_analysis

## Iterative Changes to receipt_analyzer.py and llm_processor.py
- [x] Modify receipt_analyzer.py:
  - [x] Test that structure_analysis still returns correctly with reasoning instead of confidence
  - [x] Test that field_labeling still returns correctly with reasoning instead of confidence
  - [x] Test that line_item_analysis still returns correctly with reasoning instead of confidence
  - [x] Update any docstrings to reflect reasoning instead of confidence scores
  - [x] Add new debug logging for reasoning fields

- [x] Modify llm_processor.py:
  - [x] Update _process_missing_components to handle reasoning fields
  - [x] Modify the updates dictionary structure to include reasoning
  - [x] Test that analysis extraction still works with updated GPT response format
  - [x] Add backward compatibility for code expecting confidence scores
  - [x] Update any docstrings to reflect reasoning instead of confidence scores

## Update processors/line_item_processor.py:
  - [x] Replace _calculate_confidence with _calculate_reasoning in FastPatternMatcher
  - [x] Update reasoning to explain why line items match or don't match

## Add Features
- [ ] Add position tracking to Label Analysis
- [ ] Add pattern detection to Structure Analysis
- [ ] Add price/quantity parsing to Line Items
- [ ] Add validation types to Receipt Validation
- [ ] Add reasoning field to validation results

## Line Item Processor and Validator Update
- [x] Define standardized NER label vocabulary for receipts:
  1. Item Description Labels
    - ITEM_NAME: For the primary product name (e.g., "APPLES", "ALFRESCO SLTD BUTTER")
  2. Quantity Labels
    - ITEM_QUANTITY: For numeric quantity values (e.g., "2", "1.31")
    - ITEM_UNIT: For unit of measure (e.g., "EA", "lb")
  3. Price Labels
    - ITEM_PRICE: For unit prices (e.g., "$3.99")
    - ITEM_TOTAL: For extended prices of individual items (e.g., "$17.98" for 2 items at $8.99)
  4. Receipt Summary Labels
    - SUBTOTAL: For the subtotal amount
    - TAX: For tax amount
    - DISCOUNT: For any discounts applied
    - TOTAL: For the final total amount
  5. Modifier Labels (for special cases)
    - ITEM_MODIFIER: For modifiers like "void", "discount", "special price"
- [x] Enhance line item processing to apply standardized labels:
  - [x] Update LineItemProcessor to assign labels to words based on their role
  - [x] Implement metadata structure to track line item associations separate from labels


## Testing
- [ ] Write unit tests for each analysis class
- [x] Write integration tests for DynamoDB operations for ReceiptLabelAnalysis
- [ ] Write integration tests for remaining DynamoDB operations
- [ ] Create test data for each analysis type
- [ ] Test migration procedures
- [ ] Test GPT reasoning responses
- [ ] Create test cases for common validation scenarios

## Documentation
- [ ] Update README with new analysis items
- [ ] Document DynamoDB schemas
- [ ] Add query examples
- [ ] Document validation statuses
- [ ] Document GPT reasoning patterns
- [ ] Add examples of good vs bad reasoning responses
