[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "portfolio-infra"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = [
    "pulumi>=3.0.0,<4.0.0",
    "pulumi-aws>=6.0.0,<8.0.0",
    "pulumi-command>=0.9.0,<2.0.0",  # Updated to allow 1.x versions
    "pulumi-docker-build>=0.0.12",  # Used for Docker image building
    # Lambda Layer Version Update Tool dependencies
    "boto3>=1.26.0",
    "PyYAML>=6.0",
]

[project.optional-dependencies]
dev = [
    "black==25.1.0",
    "isort==6.0.1",
    "flake8>=7.0.0",  # Added version specification
    "mypy>=1.16.1",
    "pytest>=8.0.0",  # Added version specification
    "pytest-cov>=6.0.0",  # Added version specification
]

[tool.hatch.build.targets.wheel]
packages = ["infra"]

[tool.black]
line-length = 79
target-version = ["py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 79

[tool.mypy]
# Configuration for mypy type checking
# Applies to all Python code in infra/, including embedding_step_functions
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports for third-party libraries
[[tool.mypy.overrides]]
module = [
    "receipt_label.*",
    "boto3.*",
    "botocore.*",
    "chromadb.*",
    "openai.*",
    "pulumi.*",
    "pulumi_aws.*",
    "pulumi_docker_build.*",
    "chromadb_compaction.*",
    "dynamo_db.*",
    "lambda_layer.*",
]
ignore_missing_imports = true


[tool.pylint.format]
# Pylint configuration for code style and quality
# Applies to all Python code in infra/, including embedding_step_functions
max-line-length = 79

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-instance-attributes",
    "too-many-branches",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-many-statements",
    "too-many-nested-blocks",
    "fixme",
    "protected-access",
    "import-error",  # for receipt_label imports
    "no-name-in-module",  # for receipt_label imports
]

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "pk", "sk", "e"]
# Allow single letter 'e' for exception handling

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
max-statements = 60
max-returns = 10
max-attributes = 15
max-bool-expr = 5
max-public-methods = 25
min-public-methods = 0

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.Exception", "builtins.BaseException"]

[tool.pylint.logging]
logging-format-style = "old"  # Use % formatting for logging
logging-modules = ["logging"]

[tool.pylint.imports]
# Allow imports at any level for these modules
allow-any-import-level = ["receipt_label", "boto3", "botocore", "chromadb", "openai"]

[tool.pytest.ini_options]
# Configure pytest to not import packages when collecting tests
# This prevents loading infrastructure code during Lambda function testing
pythonpath = ["."]
testpaths = ["chromadb_compaction/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Don't add parent directories to sys.path
addopts = "--import-mode=importlib"
